# -*- coding: utf-8 -*-
"""API_13_1-HUG-free-llm-GameTheory_All_Prompts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/soheilpaper/-tft-2.4-ili9341-STM32/blob/master/Auto_Making/API_13_1-HUG-free-llm-GameTheory_All_Prompts.ipynb

# AcaGPT MVP

The gosl of this project is Creating something like AutoGPT but in the field of Academic Papers wrting.


For example the MVP Lage has been made by this AI free website maker :

https://acagpt.site.live/editv2/

## Aromatically wrrie apaper by the ChatGPT and this github prompt instruction:

https://github.com/ahmetbersoz/chatgpt-prompts-for-academic-writing
"""

from google.colab import drive
import os
from pathlib import Path

global gdrive_fpath
drive_mounted = False
gdrive_fpath = '.'
local_path = '/content/'

mount_gdrive = True # @param{type:"boolean"}
if mount_gdrive : # and not drive_mounted:
    from google.colab import drive

    gdrive_mountpoint = '/content/drive/' #@param{type:"string"}
    gdrive_subdirectory = 'MyDrive/ChatGPT_Paper_wrting' #@param{type:"string"}
    gdrive_fpath = str(Path(gdrive_mountpoint) / gdrive_subdirectory)
    print ("gdrive path is :",gdrive_fpath)
   # Mount Google Drive
    if not os.path.isdir(gdrive_mountpoint):
     # If not, mount the drive
       drive.mount(gdrive_mountpoint)
       if not os.path.exists(gdrive_fpath):
          os.makedirs(gdrive_fpath)
          os.chdir(gdrive_fpath)
    else:
          print("Drive is already mounted.")
else:
   Folder_fpath ='/content/' #@param{type:"string"}
   #gdrive_subdirectory = 'MyDrive/ChatGPT_Paper_wrting' #@param{type:"string"}
   gdrive_fpath = Folder_fpath
   os.chdir(gdrive_fpath)
folder_path = gdrive_fpath

'''
#!pip uninstall openai -y
#!pip install openai # ==0.28

!pip install openai #==0.28
!pip install backoff
!pip install docx2pdf
!pip install python-docx
!pip install django
!pip install tensorflow

!pip install tenacity
!pip install tiktoken
!pip install gradio
# SETUP COLAB for run Streamlit
!npm install localtunnel

!pip install -q dl-translate
!curl ipv4.icanhazip.com

#!pip install youtube-dl
#!apt install python3-distutils
!pip install mega.py
!apt install python3-distutils  -y

#!pip install googletrans==4.0.0-rc1

!pip install httpcore==0.15.0 httpx pymongo googletrans
!pip install httpx==0.24.1

!sudo apt-get update
!sudo apt-get install libreoffice
#!sudo apt-get install abiword
!sudo apt install libreoffice-writer

!pip install gpt2-client
!pip install gpt-2-simple
!pip install bert-extractive-summarizer
!pip install gendim

#!pip uninstall gendim -y
!pip install   newspaper3k  sumy
#!pip install gensim==3.8.3

# uncomment to install the necessary libraries in Colab
#!pip uninstall diffusers -y
#!pip install diffusers
#!pip install transformers
!pip install python-docx google-cloud-texttospeech
!pip install --upgrade diffusers accelerate transformers

# Commented out IPython magic to ensure Python compatibility.
# 
# 
# %%capture
# !pip install python-slugify
# !pip install langdetect
# 
# 
# !pip install  python-docx huggingface_hub gradio
# 
# !pip install lxml==5.1.0
# !pip install lxml_html_clean
# 
# !pip install pydub
# !sudo apt-get install ffmpeg
# !pip install python-slugify
# !pip install langdetect
# !pip install httpx==0.27.2

"""#Text to image codes:"""

!pip install git+https://github.com/openai/glide-text2im

!pip install groq
!pip install exa_py

"""# Save module list :

https://stackoverflow.com/questions/31684375/automatically-create-file-requirements-txt

```
pip freeze > requirements.txt

```
"""

!pip freeze > requirements.txt

"""#Upload posts to linkedin 🔥🌹👇🙏🌀:"""

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/So-AI-love/chatgpt-prompts-for-academic-writing

# %cd chatgpt-prompts-for-academic-writing

"""# @title
# conect to [Mega.z](https://mega.nz/) cloud for storage files based ot this page:

https://colab.research.google.com/github/sudo-ken/Mega-to-Google-Drive/blob/master/Transfer_files_from_Mega_to_Google_Drive.ipynb#scrollTo=Vgh1xlQYGZCO
"""

# Commented out IPython magic to ensure Python compatibility.

# %cd '/content/'
# !git clone https://github.com/jeroenmeulenaar/python3-mega.git
# !(cd python3-mega; pip install urlobject pycrypto)

# import os
# os.chdir('python3-mega')
# from mega import Mega
# os.chdir('../')
# m = Mega.from_ephemeral()

# !git clone https://github.com/odwyersoftware/mega.py
# %cd mega.py
# !python setup.py install
# %cd '/content/'

!rm -rf '/content/yoloOnGoogleColab'
#!git clone https://github.com/CAR-Driving/yoloOnGoogleColab

# Commented out IPython magic to ensure Python compatibility.

#!rm -rf '/content/ChatGPT_academic_paper'
!mkdir '/content/ChatGPT_academic_paper'
# %cd '/content/ChatGPT_academic_paper'
!echo 't' >> t.txt
'''
#pipeline.to("cuda") #"cuda")

from diffusers import DiffusionPipeline
import torch

# Load the pretrained model
#pipeline = DiffusionPipeline.from_pretrained("runwayml/stable-diffusion-v1-5")

# Check if CUDA is available
if torch.cuda.is_available():
   device = "cuda"
else:
   device = "cpu"

# Move the model to the chosen device
#pipeline.to(device)

TOPIC = '' # @param {type:"string"}
RESEARCH_DOMAIN = '' # @param {type:"string"}
PARAGRAPH = '' # @param {type:"string"}
PARAGRAPHS = '' # @param {type:"string"}
TOPIC_SENTENCE = '' # @param {type:"string"}
LANGUAGE = '' # @param {type:"string"}
ABSTRACT_PARAGRAPH = '' # @param {type:"string"}
BIBLIOGRAPHY = '' # @param {type:"string"}
THEORY1 = '' # @param {type:"string"}
THEORY2 = '' # @param {type:"string"}
RESEARCH_QUESTIONS = [] # @param {type:"string"}
ACTION = '' # @param {type:"string"}
RESULT_PARAGRAPHS = '' # @param {type:"string"}
DATE = '' # @param {type:"string"}
NUMBER_OF_DAYS_MONTHS_YEARS = '' # @param {type:"string"}
role = '' # @param {type:"string"}
project_example = '' # @param {type:"string"}
context = '' # @param {type:"string"}
instruction = '' # @param {type:"string"}
output_format = '' # @param {type:"string"}
specific_project_details = '' # @param {type:"string"}
X = '' # @param {type:"string"}
project_manager = '' # @param {type:"string"}
report = '' # @param {type:"string"}
important_themes = '' # @param {type:"string"}
project_name = '' # @param {type:"string"}
stakeholder = '' # @param {type:"string"}
resistant_stakeholder = '' # @param {type:"string"}
task = '' # @param {type:"string"}
Your_Email = ''

openai_api = '' # @param {type:"string"}

TOPIC = "The Need for a Clear Vision of Iran's Future" # @param {type:"string"}
RESEARCH_DOMAIN = 'Sociopolitical Analysis' # @param {type:"string"}
PARAGRAPH = "Analyzing the judges' meeting, I noticed a problem with their analysis that focuses on painting a bright picture of Iran's future." # @param {type:"string"}
PARAGRAPHS = """The judges seem to believe that if Iran has a clear vision of a bright future, the people will rise to the occasion. However, it's crucial to communicate the truth to the children and the youth, who are likely to remain passive. Women, the young generation, and nature should be aware of the dark future of Iran.""" # @param {type:"string"}
TOPIC_SENTENCE = "Presenting real data on the emigration of professionals from the country and the decrease in emotional solidarity of migrants and professionals moving out of Iran, due to new migration conditions and becoming involved in various new problems, would be essential." # @param {type:"string"}
LANGUAGE = 'Persian' # @param {type:"string"}
ABSTRACT_PARAGRAPH = "The analysts should present realistic data on the impact of professionals leaving the country and the decrease in emotional solidarity of migrants and professionals moving out of Iran, due to new migration conditions and becoming involved in various new problems." # @param {type:"string"}
BIBLIOGRAPHY = '' # @param {type:"string"}
THEORY1 = 'Realistic Data Presentation' # @param {type:"string"}
THEORY2 = 'Emotional Solidarity Decline' # @param {type:"string"}
RESEARCH_QUESTIONS = ['What is the current state of the dark future of Iran?', 'How does the lack of a clear vision impact the people?' , 'What are the potential benefits of presenting a clear vision of a bright future?'] # @param {type:"list"}
ACTION = 'Communicate the truth to the people' # @param {type:"string"}
RESULT_PARAGRAPHS = "Presenting real data on the emigration of professionals from the country and the decrease in emotional solidarity of migrants and professionals moving out of Iran, due to new migration conditions and becoming involved in various new problems, would be essential." # @param {type:"string"}
DATE = 'December 26, 2023' # @param {type:"string"}
NUMBER_OF_DAYS_MONTHS_YEARS = '1 year' # @param {type:"string"}
role = 'Public Speaker' # @param {type:"string"}
project_example = 'Communicating the truth to the people' # @param {type:"string"}context = 'The project aims to raise awareness about the dark future of Iran.' # @param {type:"string"}
instruction = 'Develop a comprehensive project plan that includes objectives, business case, scope, timeline, stakeholders, and success metrics' # @param {type:"string"}
output_format = 'Text format' # @param {type:"string"}
specific_project_details = 'The project involves communicating the truth to the people about the dark future of Iran and encouraging them to act.' # @param {type:"string"}
X = 'Realistic Data Presentation' # @param {type:"string"}
project_manager = 'Public Speaking Department' # @param {type:"string"}
report = 'Project Implementation Report' # @param {type:"string"}
important_themes = 'Realistic Data Presentation, Emotional Solidarity Decline, Dark Future of Iran' # @param {type:"string"}
project_name = "Communicating the Truth About Iran's Future" # @param {type:"string"}
stakeholder = 'Public Speaking Department, Local Government, Residents' # @param {type:"string"}
resistant_stakeholder = 'Organizations with vested interest in maintaining the status quo' # @param {type:"string"}
task = 'Communicate the truth to the people' # @param {type:"string"}
Your_Email = 'your_email@example.com' # @param {type:"string"}
openai_api = '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' # @param {type:"string"}

TOPIC = """Dark Triad and its management through conversation and charity"""  # @param {type:"string"}
RESEARCH_DOMAIN = """Psychology"""  # @param {type:"string"}
PARAGRAPH = "The Dark Triad, which consists of Machiavellianism, narcissism, and psychopathy, has been the focus of various studies. One such study in 2023 pointed out that engaging in conversation and charitable work for four months can help manage these traits 1.  This finding is crucial as it emphasizes the need to focus on efforts like dialogue and charity. Brainstorming and implementing different methods can yield various ways to execute these efforts.  However, the trolling system effectively uses the dark factor or the core of darkness to instill the idea that others are worthless. This leads to a shift toward dialogue and charity, and once this idea is established in the mind of the moderator or the driver of this therapeutic path, the conversation turns into a self-centered game and devalues others.  If you notice, sometimes during the conversation, you feel that something has changed or you experience specific physical sensations in your body.  This part seems to be a function of the vulnerability and unconscious induction of the core of darkness and the trolling system. This process, which can be triggered by trauma or other factors, resembles hypnotism. It turns people into the unconscious dark and halts the process of conversation and charity to some extent.  I have previously discussed studies and close conceptual views of the Dark Triad model on many occasions. This hypothesis is based on Richard Dawkins' view of the memetic code and the assumption of a type of conceptual life, memplex, related to the Dark and Light Triad in the human species, and the strengthening of conceptual life through the study of the vulnerability of light features against the Dark Triad in the human species.  I have even prepared some initial model articles with new codes, which I will send you later 1.  However, I think it's important to discuss it, and if there's no chance, we can have the conversation offline and orally"  # @param {type:"string"}
PARAGRAPHS = "The Dark Triad, which consists of Machiavellianism, narcissism, and psychopathy, has been the focus of various studies. One such study in 2023 pointed out that engaging in conversation and charitable work for four months can help manage these traits 1.  This finding is crucial as it emphasizes the need to focus on efforts like dialogue and charity. Brainstorming and implementing different methods can yield various ways to execute these efforts.  However, the trolling system effectively uses the dark factor or the core of darkness to instill the idea that others are worthless. This leads to a shift toward dialogue and charity, and once this idea is established in the mind of the moderator or the driver of this therapeutic path, the conversation turns into a self-centered game and devalues others.  If you notice, sometimes during the conversation, you feel that something has changed or you experience specific physical sensations in your body.  This part seems to be a function of the vulnerability and unconscious induction of the core of darkness and the trolling system. This process, which can be triggered by trauma or other factors, resembles hypnotism. It turns people into the unconscious dark and halts the process of conversation and charity to some extent.  I have previously discussed studies and close conceptual views of the Dark Triad model on many occasions. This hypothesis is based on Richard Dawkins' view of the memetic code and the assumption of a type of conceptual life, memplex, related to the Dark and Light Triad in the human species, and the strengthening of conceptual life through the study of the vulnerability of light features against the Dark Triad in the human species.  I have even prepared some initial model articles with new codes, which I will send you later 1.  However, I think it's important to discuss it, and if there's no chance, we can have the conversation offline and orally"  # @param {type:"string"}
TOPIC_SENTENCE = """The Dark Triad, which consists of Machiavellianism, narcissism, and psychopathy, has been the focus of various studies."""  # @param {type:"string"}
LANGUAGE = """English"""  # @param {type:"string"}
ABSTRACT_PARAGRAPH = """This study explores the management of Dark Triad traits through engagement in conversation and charitable work..."""  # @param {type:"string"}
BIBLIOGRAPHY = """Source 0: https://www.psychologytoday.com/intl/blog/experimentations/202203/surprising-way-reduce-dark-triad-traits"""  # @param {type:"string"}
THEORY1 = """Dark Triad theory"""  # @param {type:"string"}
THEORY2 = """Conceptual life theory"""  # @param {type:"string"}
RESEARCH_QUESTIONS = """['How does engaging in conversation and charitable work help manage Dark Triad traits?', 'How does the trolling system use the dark factor to instill the idea that others are worthless?']"""  # @param {type:"string"}
ACTION = """Study and discussion"""  # @param {type:"string"}
RESULT_PARAGRAPHS = """Results indicate that engaging in conversation and charitable work for four months can help manage these traits..."""  # @param {type:"string"}
DATE = """2023-12-24"""  # @param {type:"string"}
NUMBER_OF_DAYS_MONTHS_YEARS = """Four months"""  # @param {type:"string"}
role = """Researcher"""  # @param {type:"string"}
project_example = """Dark Triad study"""  # @param {type:"string"}
context = """Psychological research"""  # @param {type:"string"}
instruction = """Study the Dark Triad and its management"""  # @param {type:"string"}
output_format = """Report"""  # @param {type:"string"}
specific_project_details = """The focus of this project is to study the Dark Triad..."""  # @param {type:"string"}
X = """Dark Triad traits"""  # @param {type:"string"}
project_manager = """Your Name"""  # @param {type:"string"}
report = """Detailed report on the Dark Triad study"""  # @param {type:"string"}
important_themes = """Dark Triad, conversation, charity, trolling system"""  # @param {type:"string"}
project_name = """Dark Triad Management Study"""  # @param {type:"string"}
stakeholder = """Psychologists, researchers"""  # @param {type:"string"}
resistant_stakeholder = """N/A"""  # @param {type:"string"}
task = """Generate a report on Dark Triad traits and their management"""  # @param {type:"string"}
Your_Email = """your.email@example.com"""  # @param {type:"string"}
#openai_api = "if possible focuse of the femenism empathy and compassion activities for doing self writing with empathy and compassion for their social activities and update above post"  # @param {type:"string"}

TOPIC = "Debate Resolution Skills: Iran's Opposition Problem"
RESEARCH_DOMAIN = "Political Science"
PARAGRAPH = "Resolving political debates is a critical skill in today's world. This course aims to equip students with the necessary tools and knowledge to navigate and influence these discussions."
PARAGRAPHS = PARAGRAPH
TOPIC_SENTENCE = "Effective debate resolution is a fundamental aspect of political science."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This course explores the techniques and strategies of effective debate resolution..."
BIBLIOGRAPHY = "Source 0: https://www.thegreatcourses.com/courses/the-art-of-debate"
THEORY1 = "Argument Structure Theory"
THEORY2 = "Conflict Resolution Theory"
RESEARCH_QUESTIONS = "['What are the key components of an effective debate?', 'How can different strategies contribute to a constructive debate resolution?']"
ACTION = "Research and discussion"
RESULT_PARAGRAPHS = "Results indicate that understanding these theories can significantly enhance debate resolution skills..."
DATE = "2023-12-24"
NUMBER_OF_DAYS_MONTHS_YEARS = "One year"
ROLE = "Debate Coach"
PROJECT_EXAMPLE = "Mock Debate Practice"
CONTEXT = "Political Discussion"
INSTRUCTION = "Study and practice debate resolution techniques"
OUTPUT_FORMAT = "Report"
SPECIFIC_PROJECT_DETAILS = "The focus of this project is to study debate resolution techniques and develop strategies for effective participation in debates..."
X = "Debate Resolution Techniques"
PROJECT_MANAGER = "Your Name"
REPORT = "Detailed report on debate resolution techniques"
IMPORTANT_THEMES = "Debate Resolution, Political Science"
PROJECT_NAME = "Debate Resolution Study"
STAKEHOLDER = "Political Scientists, Debate Participants"
RESISTANT_STAKEHOLDER = "N/A"
TASK = "Generate a report on debate resolution techniques"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = openai_api # "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"

TOPIC = "Climate Change Management"
RESEARCH_DOMAIN = "Environmental Science"
PARAGRAPH = "Climate change is a pressing issue that requires immediate attention. Engaging in research and charitable work in this field can help mitigate its effects. This course aims to equip students with the necessary tools and knowledge to address this global challenge."
PARAGRAPHS = PARAGRAPH
TOPIC_SENTENCE = "Understanding and managing climate change is a critical aspect of environmental science."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This course explores the management of climate change through engagement in research and charitable work..."
BIBLIOGRAPHY = "Source 0: https://toolkit.climate.gov/courses/online-training-water-utilities-wuca"
THEORY1 = "Climate Change Theory"
THEORY2 = "Adaptive Management Theory"
RESEARCH_QUESTIONS = "['What are the primary causes of climate change?', 'How can research and charitable work help mitigate the effects of climate change?']"
ACTION = "Research and discussion"
RESULT_PARAGRAPHS = "Results indicate that engaging in research and charitable work can significantly reduce the impacts of climate change..."
DATE = "2023-12-24"
NUMBER_OF_DAYS_MONTHS_YEARS = "One year"
ROLE = "Researcher"
PROJECT_EXAMPLE = "Climate Change Mitigation Research"
CONTEXT = "Environmental Research"
INSTRUCTION = "Study and research on climate change and its management"
OUTPUT_FORMAT = "Report"
SPECIFIC_PROJECT_DETAILS = "The focus of this project is to study climate change and develop strategies for its management..."
X = "Climate Change Impacts"
PROJECT_MANAGER = "Your Name"
REPORT = "Detailed report on climate change research"
IMPORTANT_THEMES = "Climate Change, Research, Charitable Work"
PROJECT_NAME = "Climate Change Management Study"
STAKEHOLDER = "Environmental Scientists, Researchers"
RESISTANT_STAKEHOLDER = "N/A"
TASK = "Generate a report on climate change and its management"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = openai_api # "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"

role = TOPIC_SENTENCE
project_example = PROJECT_EXAMPLE
context = CONTEXT
instruction = INSTRUCTION
specific_project_details = SPECIFIC_PROJECT_DETAILS
project_manager = PROJECT_MANAGER
report = REPORT
important_themes = IMPORTANT_THEMES
stakeholder = STAKEHOLDER
resistant_stakeholder = RESISTANT_STAKEHOLDER
openai_api= OPENAI_API
Your_Email = YOUR_EMAIL

# https://www.phind.com/search?cache=wxdy3gybzifxrthxith847he # @ param{string}

employability = "Prepare students for employment in fields such as renewable energy, energy efficiency, natural resource conservation, and waste management."
practical_skills = "Develop practical skills in sustainability by focusing on the social, economic, and environmental concepts that can be applied across a wide range of sectors and industries."
creativity = "Encourage creative thinking and problem-solving in developing sustainable strategies for organizations."
critical_thinking = "Foster critical thinking among students in analyzing sustainability issues and formulating comprehensive solutions."
fun_and_enjoyment = "Make the course engaging with online lectures, discussions, and assignments, offering flexibility for students."
employee_guarantee = "Provide a guarantee for successful course completion by ensuring comprehensive coverage of key sustainability topics."
collaboration = "Encourage collaboration among students in online forums and group projects."
learning_outcomes = "By the end of the course, students should be able to communicate complex social, economic, and environmental issues, analyze evidence to formulate sustainable strategies, and lead sustainability initiatives at local, national, and global levels."
purpose = "The purpose of this course is to equip students with the knowledge and skills necessary to advance their career in sustainability."
learning_activities = "Activities will include online lectures, discussions, assignments, and a capstone project where students help a real organization solve an existing sustainability problem by implementing practical knowledge to achieve a triple-bottom-line solution."
course_content = "The main topics covered in the course will include the relationship of humans with the natural environment, public policy and the role of government and business in sustainability, triple bottom line accounting, and climate change."
course_assessments = "Student performance will be evaluated through assignments, group projects, and a capstone project."
course_schedule = "The course is delivered online and students can do homework whenever it’s convenient for them. The program also provides optional networking opportunities for students to connect virtually with peers, faculty, and professionals."
course_sequencing = "The course content will be sequenced to gradually increase in complexity, starting with an introduction to sustainability, moving on to more advanced topics, and ending with a capstone project."
technology_requirements = "Students will need access to a computer with internet connectivity. If software or special technology is required in one of the courses, it will be provided to students."
prerequisites = "A Bachelor’s degree, in any discipline, from an accredited university (min. 3.0 GPA) is required. Students with a GPA of less than 3.0 may be considered for provisional admission."

topic = "Sustainable Management"
field_of_study = "Sustainability"
audience = "Those seeking to advance their career in sustainability, whether their experience is in business, healthcare, manufacturing, design, retail, or other industries that are transitioning to sustainable business models."
specific_project = "A capstone project where each student will help a real organization solve an existing sustainability problem by implementing practical knowledge to achieve a triple-bottom-line solution."

employability = "Prepare students for employment in fields such as political science, journalism, human rights advocacy, and conflict resolution."
practical_skills = "Develop practical skills in debate resolution by focusing on the social, cultural, and political concepts that can be applied in various contexts."
creativity = "Encourage creative thinking and problem-solving in developing effective strategies for debates."
critical_thinking = "Foster critical thinking among students in analyzing political and societal issues and formulating comprehensive solutions."
fun_and_enjoyment = "Make the course engaging with online lectures, discussions, and assignments, offering flexibility for students."
employee_guarantee = "Provide a guarantee for successful course completion by ensuring comprehensive coverage of key debate resolution topics."
collaboration = "Encourage collaboration among students in online forums and group projects."
learning_outcomes = "By the end of the course, students should be able to articulate complex political, cultural, and societal issues, analyze evidence to formulate effective debate strategies, and lead debates on local, national, and global levels."
purpose = "The purpose of this course is to equip students with the knowledge and skills necessary to advance their career in debate resolution."
learning_activities = "Activities will include online lectures, discussions, assignments, and a capstone project where students participate in a mock debate."
course_content = "The main topics covered in the course will include the history of Iran, the concept of opposition, the role of Islamofascism, mafia, capitalism, and dark international forces like Russia in Iran, and the challenges faced by light groups."
course_assessments = "Student performance will be evaluated through assignments, group projects, and a capstone project."
course_schedule = "The course is delivered online and students can do homework whenever it’s convenient for them. The program also provides optional networking opportunities for students to connect virtually with peers, faculty, and professionals."
course_sequencing = "The course content will be sequenced to gradually increase in complexity, starting with an introduction to Iran, moving on to more advanced topics, and ending with a capstone project."
technology_requirements = "Students will need access to a computer with internet connectivity. If software or special technology is required in one of the courses, it will be provided to students."
prerequisites = "A Bachelor’s degree, in any discipline, from an accredited university (min. 3.0 GPA) is required. Students with a GPA of less than 3.0 may be considered for provisional admission."

topic = "Iran's Opposition Problem"
field_of_study = "Debate Resolution"
audience = "Those seeking to advance their career in debate resolution, whether their experience is in politics, journalism, human rights, or any field that requires effective communication and conflict resolution."
specific_project = "A capstone project where each student will participate in a mock debate on a real-life issue related to Iran's opposition problem."

employability = "Prepare students for employment in fields such as renewable energy, energy efficiency, natural resource conservation, and waste management."  # @param {type:"string"}
practical_skills = "Develop practical skills in sustainability by focusing on the social, economic, and environmental concepts that can be applied across a wide range of sectors and industries."  # @param {type:"string"}
creativity = "Encourage creative thinking and problem-solving in developing sustainable strategies for organizations."  # @param {type:"string"}
critical_thinking = "Foster critical thinking among students in analyzing sustainability issues and formulating comprehensive solutions."  # @param {type:"string"}
fun_and_enjoyment = "Make the course engaging with online lectures, discussions, and assignments, offering flexibility for students."  # @param {type:"string"}
employee_guarantee = "Provide a guarantee for successful course completion by ensuring comprehensive coverage of key sustainability topics."  # @param {type:"string"}
collaboration = "Encourage collaboration among students in online forums and group projects."  # @param {type:"string"}
learning_outcomes = "By the end of the course, students should be able to communicate complex social, economic, and environmental issues, analyze evidence to formulate sustainable strategies, and lead sustainability initiatives at local, national, and global levels."  # @param {type:"string"}
purpose = "The purpose of this course is to equip students with the knowledge and skills necessary to advance their career in sustainability."  # @param {type:"string"}
learning_activities = "Activities will include online lectures, discussions, assignments, and a capstone project where students help a real organization solve an existing sustainability problem."  # @param {type:"string"}
course_content = "The main topics covered in the course will include the relationship of humans with the natural environment, public policy and the role of government and business in sustainability, triple bottom line accounting, and climate change."  # @param {type:"string"}
course_assessments = "Student performance will be evaluated through assignments, group projects, and a capstone project."  # @param {type:"string"}
course_schedule = "The course is delivered online and students can do homework whenever it’s convenient for them. The program also provides optional networking opportunities for students to connect virtually with peers, faculty, and professionals."  # @param {type:"string"}
course_sequencing = "The course content will be sequenced to gradually increase in complexity, starting with an introduction to sustainability, moving on to more advanced topics, and ending with a capstone project."  # @param {type:"string"}
technology_requirements = "Students will need access to a computer with internet connectivity. If software or special technology is required in one of the courses, it will be provided to students."  # @param {type:"string"}
prerequisites = "A Bachelor’s degree, in any discipline, from an accredited university (min. 3.0 GPA) is required. Students with a GPA of less than 3.0 may be considered for provisional admission."  # @param {type:"string"}

topic = TOPIC
field_of_study = "Sustainability"  # @param {type:"string"}
audience = "Those seeking to advance their career in sustainability, whether their experience is in business, healthcare, manufacturing, design, retail, or other industries that are transitioning to sustainable business models."  # @param {type:"string"}
specific_project = "A capstone project where each student will help a real organization solve an existing sustainability problem by implementing practical knowledge to achieve a triple-bottom-line solution."  # @param {type:"string"}

TOPIC = "Addressing Iran's Crises: Exploring Social Change Methodologies and Creating a Counter Profile"
RESEARCH_DOMAIN = "Sociology"
PARAGRAPH = "Iran's societal challenges are complex and require immediate attention. Engaging in research and working on solutions in this field can help address these issues. This course aims to equip students with the necessary tools and knowledge to navigate these challenges."
PARAGRAPHS = PARAGRAPH
TOPIC_SENTENCE = "Understanding and addressing Iran's crisis is a critical aspect of sociology."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This course explores the management of Iran's crises through engagement in research and charitable work..."
BIBLIOGRAPHY = "Source 0: https://www.csis.org/analysis/crisis-iran-what-now"
THEORY1 = "Sociological Theory"
THEORY2 = "Social Change Theory"
RESEARCH_QUESTIONS = "['What are the primary causes of Iran's crises?', 'How can research and charitable work help address these issues?']"
ACTION = "Research and discussion"
RESULT_PARAGRAPHS = "Results indicate that engaging in research and charitable work can significantly reduce the impacts of Iran's crises..."
DATE = "2023-12-30"
NUMBER_OF_DAYS_MONTHS_YEARS = "One year"
ROLE = "Researcher"
PROJECT_EXAMPLE = "Social Change Management Project"
CONTEXT = "Social Development"
INSTRUCTION = "Study and research on Iran's crises and their management"
OUTPUT_FORMAT = "Report"
SPECIFIC_PROJECT_DETAILS = "The focus of this project is to study Iran's crises and develop strategies for their management..."
X = "Iran's Crises Impacts"
PROJECT_MANAGER = "Your Name"
REPORT = "Detailed report on Iran's crisis research"
IMPORTANT_THEMES = "Social Change, Research, Charitable Work"
PROJECT_NAME = "Social Change Management Study"
STAKEHOLDER = "Social Scientists, Researchers"
RESISTANT_STAKEHOLDER = "N/A"
TASK = "Generate a report on Iran's crisis and its management"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = openai_api # "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"

employability = "Prepare students for employment in fields such as social sciences, human rights, and international relations." # @param {type:"string"}
practical_skills = "Develop practical skills in social analysis by focusing on the social, economic, and political concepts that can be applied across a wide range of sectors and industries." # @param {type:"string"}
creativity = "Encourage creative thinking and problem-solving in developing social strategies for organizations." # @param {type:"string"}
critical_thinking = "Foster critical thinking among students in analyzing social issues and formulating comprehensive solutions." # @param {type:"string"}
fun_and_enjoyment = "Make the course engaging with online lectures, discussions, and assignments, offering flexibility for students." # @param {type:"string"}
employee_guarantee = "Provide a guarantee for successful course completion by ensuring comprehensive coverage of key social topics." # @param {type:"string"}
collaboration = "Encourage collaboration among students in online forums and group projects." # @param {type:"string"}
learning_outcomes = "By the end of the course, students should be able to communicate complex social issues, analyze evidence to formulate social strategies, and lead social initiatives at local, national, and global levels." # @param {type:"string"}
purpose = "The purpose of this course is to equip students with the knowledge and skills necessary to advance their career in social sciences." # @param {type:"string"}
learning_activities = "Activities will include online lectures, discussions, assignments, and a capstone project where students help a real organization solve an existing social problem." # @param {type:"string"}
course_content = "The main topics covered in the course will include the relationship of humans with the natural environment, public policy and the role of government and business in social sciences, triple bottom line accounting, and social change." # @param {type:"string"}

course_assessments = "Student performance will be evaluated through assignments, group projects, and a capstone project." # @param {type:"string"}
course_schedule = "The course is delivered online and students can do homework whenever it’s convenient for them. The program also provides optional networking opportunities for students to connect virtually with peers, faculty, and professionals." # @param {type:"string"}
course_sequencing = "The course content will be sequenced to gradually increase in complexity, starting with an introduction to crisis management, moving on to more advanced topics, and ending with a capstone project." # @param {type:"string"}
technology_requirements = "Students will need access to a computer with internet connectivity. If software or special technology is required in one of the courses, it will be provided to students." # @param {type:"string"}
prerequisites = "A Bachelor’s degree, in any discipline, from an accredited university (min. 3.0 GPA) is required. Students with a GPA of less than 3.0 may be considered for provisional admission." # @param {type:"string"}

topic = TOPIC
field_of_study = "Sociology" # @param {type:"string"}
audience = "Those seeking to advance their career in sociology, whether their experience is in business, healthcare, manufacturing, design, retail, or other industries that are transitioning to sustainable business models." # @param {type:"string"}
specific_project = "A capstone project where each student will help a real organization solve an existing societal problem by implementing practical knowledge to achieve a triple-bottom-line solution." # @param {type:"string"}

TOPIC = "Iranian B2B Electrical Marketplace Business Plan"
RESEARCH_DOMAIN = "Business and Entrepreneurship"
PARAGRAPH = "Your comprehensive business plan for an Iranian B2B Electrical Marketplace is well-structured and detailed. It covers key aspects such as market analysis, business model, target audience, and strategies for growth. The emphasis on a user-friendly platform, a wide range of products, and competitive pricing aligns with the current trends in online marketplaces.\n\nYour mission to streamline the purchasing process and promote industry growth reflects a customer-centric approach. The commission-based business model and additional premium services offer a balanced revenue strategy. It's positive to see a focus on diverse delivery methods and payment options to cater to customer preferences.\n\nYour commitment to regulatory compliance and obtaining necessary licenses demonstrates a thorough understanding of the business environment. The incorporation of contingency plans for potential risks adds a layer of preparedness.\n\nOverall, your business plan appears robust and well-thought-out. If you have specific questions or if there's an area you'd like further assistance with, feel free to let me know!"
PARAGRAPHS = PARAGRAPH
TOPIC_SENTENCE = "Revolutionizing the Iranian electrical products market through a comprehensive online B2B platform."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This business plan outlines the vision and strategies for [Company Name], aiming to transform the traditional electrical products industry in Iran. With a focus on a user-friendly interface, a diverse product range, and competitive pricing, our goal is to become the leading online B2B electrical products marketplace in the country."
BIBLIOGRAPHY = "Source 0: https://example.com/business-plan-resources"
THEORY1 = "Market Analysis"
THEORY2 = "B2B E-commerce Strategies"
RESEARCH_QUESTIONS = "['What are the key components of a successful B2B marketplace?', 'How can regulatory compliance impact the success of an online business in Iran?']"
ACTION = "Implementation and Iteration"
RESULT_PARAGRAPHS = "Results indicate a positive reception from the target market, with steady growth and customer satisfaction. Continuous innovation and adaptation to market trends contribute to [Company Name]'s success."
DATE = "2024-01-04"
NUMBER_OF_DAYS_MONTHS_YEARS = "Five years"
ROLE = "Founder and CEO"
PROJECT_EXAMPLE = "Iranian B2B Electrical Marketplace Launch"
CONTEXT = "E-commerce in Iran"
INSTRUCTION = "Develop and implement strategies outlined in the business plan for [Company Name]."
OUTPUT_FORMAT = "Business Plan"
SPECIFIC_PROJECT_DETAILS = "This project involves establishing and growing an online B2B electrical products marketplace in Iran. [Company Name] will focus on user experience, product variety, and competitive pricing to achieve market leadership."
X = "Market Trends"
PROJECT_MANAGER = "Your Name"
REPORT = "Comprehensive report on the success and growth of [Company Name]"
IMPORTANT_THEMES = "B2B E-commerce, Market Leadership, Regulatory Compliance"
PROJECT_NAME = "Iranian B2B Electrical Marketplace Business Plan"
STAKEHOLDER = "Entrepreneurs, Business Owners"
RESISTANT_STAKEHOLDER = "Traditional Brick-and-Mortar Stores"
TASK = "Execute the outlined strategies and monitor the growth of [Company Name]."
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = "" #"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"

employability = "Improving awareness and knowledge about environmental issues"
practical_skills = "Communication skills, Research skills"
creativity = "Creating engaging content for the radio program"
critical_thinking = "Analyzing and interpreting complex environmental data"
fun_and_enjoyment = "Engaging and entertaining the audience"
employee_guarantee = "A commitment to promoting environmental sustainability"
collaboration = "Working together with government authorities and communities"
learning_outcomes = "Understanding the importance of environmental conservation"
purpose = "To educate and inspire listeners to take action on environmental issues"
learning_activities = "Listening to the radio program, Participating in environmental cleanup activities"
course_content = "Content on various environmental issues, Potential solutions, Real-life examples"
course_assessments = "Quizzes, Listener feedback surveys"
course_schedule = "Weekly broadcasts"
course_sequencing = "Introduction to environmental issues, Causes and effects, Solutions and actions"
technology_requirements = "Radio broadcasting equipment"
prerequisites = "Basic understanding of environmental issues"

audience = "Iranian Listeners"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = "Environmental Problems in Iran: A Call to Action"
RESEARCH_DOMAIN = "Environmental Science"
# Define the variables

PARAGRAPH = "This report explores Iran's environmental crisis, presenting current statistics and proposing actionable solutions. It addresses domestic system irresponsibility, investigates historical approaches, and highlights women's compassionate perspective. Exploring new technologies, emphasizing Iranian activism, and media coverage are crucial. The role of AI technology and adherence to the Good Samaritan law are stressed. This structure aims to provide a comprehensive overview and potential solutions."

PARAGRAPHS = PARAGRAPH + "Additionally, Iran's rapid urbanization and demographic changes have exacerbated these issues, placing greater ecological stress on its urban areas. With more than 70% of Iran's population now residing in cities, the environmental crisis has become a matter of urgency."
TOPIC_SENTENCE = "Join us today as we delve deeper into Iran's environmental crisis and explore potential solutions."
LANGUAGE = "Persian"
ABSTRACT_PARAGRAPH = "This radio program aims to raise awareness among Iranians about the urgent environmental problems our country is facing. We'll discuss the current situation, propose actionable solutions, and highlight the role of Iranian activists, companies, and citizens in preserving our environment."
BIBLIOGRAPHY = "Refer to 'Iran's Environmental Crisis: A Comprehensive Report' for more details."
THEORY1 = "Conservation Theory"
THEORY2 = "Sustainability Theory"
RESEARCH_QUESTIONS = ["What are the major environmental problems in Iran?", "What are the causes of these problems?", "What are the potential solutions?"]
ACTION = "Listen to this program to learn more about Iran's environmental problems and ways to address them."
RESULT_PARAGRAPHS = "By the end of this program, listeners will have a better understanding of the environmental issues in Iran and steps they can take to contribute to their solution."
DATE = "01/04/2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "1 day"
ROLE = "climate change and environmental critics management"
PROJECT_EXAMPLE = "An environmental cleanup project in a local park"
CONTEXT = "Iranian Society"
INSTRUCTION = "Listen attentively to understand the importance of addressing environmental issues."
OUTPUT_FORMAT = "Audio Broadcast"
SPECIFIC_PROJECT_DETAILS = "A project to promote recycling in schools across Iran"
X = "Number of listeners reached"
PROJECT_MANAGER = "Project Manager's Name"
REPORT = "Report on the effectiveness of the environmental cleanup project"
IMPORTANT_THEMES = "Environmental Conservation, Sustainability, Community Engagement"
PROJECT_NAME = "Environmental Cleanup Project"
STAKEHOLDER = "Local Schools, Government Authorities, Local Communities"
RESISTANT_STAKEHOLDER = "Individuals resistant to change"
TASK = "Raise awareness about environmental issues"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = openai_api #"OpenAI API Key"

# Additional variables
employability = "Improving awareness and knowledge about environmental issues"
practical_skills = "Communication skills, Research skills"
creativity = "Creating engaging content for the radio program"
critical_thinking = "Analyzing and interpreting complex environmental data"
fun_and_enjoyment = "Engaging and entertaining the audience"
employee_guarantee = "A commitment to promoting environmental sustainability"
collaboration = "Working together with government authorities and communities"
learning_outcomes = "Understanding the importance of environmental conservation"
purpose = "To educate and inspire listeners to take action on environmental issues"
learning_activities = "Listening to the radio program, Participating in environmental cleanup activities"
course_content = "Content on various environmental issues, Potential solutions, Real-life examples"
course_assessments = "Quizzes, Listener feedback surveys"
course_schedule = "Weekly broadcasts"
course_sequencing = "Introduction to environmental issues, Causes and effects, Solutions and actions"
technology_requirements = "Radio broadcasting equipment"
prerequisites = "Basic understanding of environmental issues"

audience = "Iranian Listeners"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = "Embracing the Power of Technology: A $1 Trillion Opportunity for Iran"
RESEARCH_DOMAIN = "Computer Science"
PARAGRAPH = "The global waste management market, valued at approximately $1.3 trillion, poses significant opportunities for innovation and development. In particular, Iran has the potential to leverage technology to address waste management challenges and contribute to a more sustainable and equitable economy."
PARAGRAPHS = ""
TOPIC_SENTENCE = "The proposed waste management Android application aims to facilitate resource recovery and promote the circular economy, leveraging technological advancements in the waste management industry."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "The proposed waste management Android application provides a comprehensive platform for waste collection, disposal, and resource recovery. It uses advanced technologies to optimize waste management processes and provide a user-friendly experience for both individuals and waste management companies."
BIBLIOGRAPHY = "Refer to 'Embracing the Power of Technology: A $1 Trillion Opportunity for Iran' for more details."
THEORY1 = "Computer Science"
THEORY2 = "Environmental Science"
RESEARCH_QUESTIONS = ["How does the proposed waste management Android application optimize waste management processes?", "What role does technology play in the promotion of the circular economy?", "How does the application promote social responsibility among businesses and governments?"]
ACTION = "Develop the waste management Android application to optimize waste management processes and promote a circular economy."
RESULT_PARAGRAPHS = "By the end of this research, we aim to develop a comprehensive platform for waste collection, disposal, and resource recovery that leverages advanced technologies and promotes social responsibility."
DATE = "01/15/2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "3 months"
ROLE = "Researcher"
PROJECT_EXAMPLE = "Development of a waste management Android application"
CONTEXT = "Global Waste Management Market"
INSTRUCTION = "Read carefully to understand the significance of the research topic and the methodology used."
OUTPUT_FORMAT = "Research Paper"
SPECIFIC_PROJECT_DETAILS = "A research project to develop a waste management Android application to optimize waste management processes and promote a circular economy."
X = "Number of waste management Android applications developed"
PROJECT_MANAGER = "Researcher's Name"
REPORT = "Report on the findings of the research paper"
IMPORTANT_THEMES = "Waste Management, Circular Economy, Social Responsibility"
PROJECT_NAME = "Research Project on Waste Management Android Application"
STAKEHOLDER = "Businesses, Governments"
RESISTANT_STAKEHOLDER = "Those resistant to change in waste management practices"
TASK = "Develop a waste management Android application"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = None

# Additional variables
employability = "Developing innovative solutions for waste management"
practical_skills = "Mobile app development, Data analysis skills"
creativity = "Designing user-friendly interfaces, Formulating research questions"
critical_thinking = "Analyzing and interpreting complex waste management data"
fun_and_enjoyment = "Engaging in intellectual discourse"
employee_guarantee = "A commitment to conducting thorough and unbiased research"
collaboration = "Collaborating with other researchers and scholars"
learning_outcomes = "Understanding the factors contributing to effective waste management and potential strategies to overcome these barriers"
purpose = "To investigate the issue of waste management and propose innovative solutions"
learning_activities = "Reading research papers, Participating in academic discussions"
course_content = "Content on various computer science theories, Current state of affairs, Historical context"
course_assessments = "Literature reviews, Research proposals"
course_schedule = "Monthly online sessions"
course_sequencing = "Introduction to the research topic, Factors contributing to waste management, Case studies"
technology_requirements = "Access to research databases, Internet access"
prerequisites = "Basic understanding of computer science and environmental science"
audience = "Researchers, Scholars, Policy Makers"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = "OpenAI's Democratic Rules and Light Triad Personality Traits for Iran"
RESEARCH_DOMAIN = "Artificial Intelligence"
PARAGRAPH = "OpenAI has been at the forefront of shaping a 'democratic process' for governing AI. This process entails a diverse group of individuals exchanging opinions, participating in deliberative discussions, and collectively deciding outcomes transparently [Source 0](https://openai.com/blog/democratic-inputs-to-ai). The initiative, highlighted by OpenAI's grant program, aims to distribute ten $100,000 grants for experiments establishing a democratic framework within legal boundaries [Source 0](https://openai.com/blog/democratic-inputs-to-ai). Addressing issues undermining democratic processes, such as representation gaps, manipulation, and participation challenges, is central to this program [Source 0](https://openai.com/blog/democratic-inputs-to-ai). Its overarching objective is to propose statements fostering agreement among individuals with differing views, utilizing AI for efficient communication [Source 0](https://openai.com/blog/democratic-inputs-to-ai). While some express concerns about AI's role in policy writing and its opaque application in democratic processes, many participants gain optimism about the public's ability to guide AI responsibly [Source 1](https://openai.com/blog/democratic-inputs-to-ai-grant-program-update). In conclusion, OpenAI endeavors toward a democratic AI governance approach, engaging the public in determining AI behavior aligned with human values."
PARAGRAPHS = PARAGRAPH
TOPIC_SENTENCE = "The proposed democratic system for Iran would leverage OpenAI's models to gather insights from a broad range of Iranian citizens, taking into account their views and opinions on various issues."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This approach would not only promote a more inclusive and representative form of governance but also foster a society that values empathy, altruism, and compassion."
BIBLIOGRAPHY = "Refer to 'OpenAI's Democratic Rules and Light Triad Personality Traits for Iran' for more details."
THEORY1 = "Artificial Intelligence"
THEORY2 = "Psychology"
RESEARCH_QUESTIONS = ["How does OpenAI's democratic process work?", "What role does AI play in decision-making processes?", "How do the light triad personality traits influence society?"]
ACTION = "Develop a democratic system for Iran leveraging OpenAI's models."
RESULT_PARAGRAPHS = "By the end of this research, we aim to propose a new version of a democratic system for Iran that leverages OpenAI's models to gather insights from a broad range of Iranian citizens."
DATE = "01/19/2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "3 months"
ROLE = "Researcher"
PROJECT_EXAMPLE = "Development of a democratic system for Iran"
CONTEXT = "Current state of AI and Psychology in Iran"
INSTRUCTION = "Read carefully to understand the significance of the research topic and the methodology used."
OUTPUT_FORMAT = "Research Paper"
SPECIFIC_PROJECT_DETAILS = "A research project to develop a democratic system for Iran leveraging OpenAI's models."
X = "Number of democratic systems developed"
PROJECT_MANAGER = "Researcher's Name"
REPORT = "Report on the findings of the research paper"
IMPORTANT_THEMES = "Artificial Intelligence, Democracy, Light Triad Personality Traits"
PROJECT_NAME = "Research Project on Democracy System for Iran"
STAKEHOLDER = "Government, Citizens"
RESISTANT_STAKEHOLDER = "Those resistant to change in governance practices"
TASK = "Develop a democratic system for Iran"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = None

# Additional variables
employability = "Developing innovative solutions for governance"
practical_skills = "AI development, Data analysis skills"
creativity = "Designing user-friendly interfaces, Formulating research questions"
critical_thinking = "Analyzing and interpreting complex AI and psychology data"
fun_and_enjoyment = "Engaging in intellectual discourse"
employee_guarantee = "A commitment to conducting thorough and unbiased research"
collaboration = "Collaborating with other researchers and scholars"
learning_outcomes = "Understanding the factors contributing to effective governance and potential strategies to overcome these barriers"
purpose = "To investigate the issue of governance and propose innovative solutions"
learning_activities = "Reading research papers, Participating in academic discussions"
course_content = "Content on various AI and psychology theories, Current state of affairs, Historical context"
course_assessments = "Literature reviews, Research proposals"
course_schedule = "Monthly online sessions"
course_sequencing = "Introduction to the research topic, Factors contributing to governance, Case studies"
technology_requirements = "Access to research databases, Internet access"
prerequisites = "Basic understanding of AI and psychology"
audience = "Researchers, Scholars, Policy Makers"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = "OpenAI Research Engineer, Collective Alignment Job Opportunity"
RESEARCH_DOMAIN = "Artificial Intelligence"
PARAGRAPH = "OpenAI has recently opened a position for a Research Engineer in Collective Alignment."
PARAGRAPHS = "This role is part of the Collective Alignment Team, which works on shaping the future of technology by ensuring that Artificial General Intelligence (AGI) is democratically shaped."
TOPIC_SENTENCE = "This job opportunity presents a unique opportunity for Iranian women and men."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This job opportunity is a call to action for Iranian women and men interested in making a difference in the field of AI."
BIBLIOGRAPHY = "[Source 0](https://openai.com/careers/research-engineer-collective-alignment)"
THEORY1 = "Artificial General Intelligence (AGI)"
THEORY2 = "Democratizing AI Governance"
RESEARCH_QUESTIONS = ["What are the requirements for the Research Engineer in Collective Alignment role?", "How can Iranian women and men contribute to the OpenAI GitHub repository?"]
ACTION = "Join OpenAI's team or contribute to the OpenAI GitHub repository"
RESULT_PARAGRAPHS = "By joining OpenAI's team or contributing to the OpenAI GitHub repository, Iranian women and men can contribute to the development of a more democratic and fair AI system, and play a significant role in Iran's democratic transformation."
DATE = "January 21, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "21 days, 1 month, 1 year"
ROLE = "Research Engineer in Collective Alignment"
PROJECT_EXAMPLE = "Developing a system for collecting and encoding public input on model behavior into their systems"
CONTEXT = "OpenAI's initiative to democratize AI governance"
INSTRUCTION = "Write a blog post about the job opportunity and the needs of Iranian women and men to work by OpenAI team"
OUTPUT_FORMAT = "Blog Post"
SPECIFIC_PROJECT_DETAILS = "Collective Alignment Team, Research Engineer in Collective Alignment"
X = "100,000"
PROJECT_MANAGER = "OpenAI"
REPORT = "Report on the progress of the project"
IMPORTANT_THEMES = "AI, Democracy, Iranian Women and Men, OpenAI"
PROJECT_NAME = "OpenAI Research Engineer, Collective Alignment Project"
STAKEHOLDER = "Iranian Women and Men"
RESISTANT_STAKEHOLDER = "Unnamed"
TASK = "Write a blog post about the job opportunity and the needs of Iranian women and men to work by OpenAI team"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = None

# Additional variables
employability = "Strong curiosity about the sociotechnical challenges around aligning and understanding Machine Learning models"
practical_skills = "Experience implementing Machine Learning algorithms, developing data visualization or data collection interfaces"
creativity = "Excitement about OpenAI's mission of building safe, universally beneficial AGI"
critical_thinking = "Ability to use one's career to address sociotechnical challenges"
fun_and_enjoyment = "Enjoyment of a fast-paced, collaborative, and cutting-edge research environment"
employee_guarantee = "Total compensation that includes generous equity and benefits"
collaboration = "Collaboration with the selected teams in the OpenAI GitHub repository"
learning_outcomes = "Valuable experience, making connections with other professionals, potentially influencing the direction of AI research"
purpose = "To promote peace and reduce internal conflicts, and enhance peacebuilding efforts and create a more empathetic and compassionate society."
learning_activities = "Contributing to the development of a more democratic and fair AI system"
course_content = "AI and Democracy"
course_assessments = "Impact on Iran's democratic transformation"
course_schedule = "Immediate"
course_sequencing = "Sequential"
technology_requirements = "Machine Learning Algorithms, Data Visualization or Data Collection Interfaces"
prerequisites = "Interest in the field of AI"

audience = "Iranian Women and Men"
topic = "AI and Democracy"
field_of_study = "Artificial Intelligence"
specific_project = "OpenAI Research Engineer, Collective Alignment Project"

TOPIC = "Sustainable Harmony: A Trillion-Dollar Opportunity for Taylor Swift and Her Influential Community"
RESEARCH_DOMAIN = "Environmental Sustainability, Waste Management, Artificial Intelligence"
PARAGRAPHS = "In a world clamoring for change, we're unveiling an extraordinary initiative that beckons the attention of Taylor Swift, her famed peers, and the Swiftie community. 🌍✨ Join us on this transformative journey as we present a visionary waste management project in Iran, merging artificial intelligence, profitability, and environmental consciousness in perfect harmony."
PARAGRAPH = """
**Project Highlights:**
✅ **AI Revolution:** Unleashing the power of AI for optimized waste management, setting a new standard for environmental stewardship.
✅ **Empowerment Through Profit:** A revolutionary fusion of communism, capitalism, and green principles, ensuring profitability while giving back to users.
✅ **Endorsement by Academia:** Validated by academic papers, successful reports, and a groundbreaking model founded on empathy and compassion.

**Swifties, Your Voice is the Amplifier!**
Calling upon Taylor Swift, esteemed signers, and her vast community! Your endorsement can catapult this project, addressing environmental concerns while championing social causes like LGBT rights, women's rights, and fighting racism and police brutality.

**Funding for Transformation:**
To initiate this vision, we're considering selling a house in Iran, investing approximately $70,000 as a symbol of dedication. This endeavor isn't just a project; it's a movement toward a sustainable future.

**Join the Symphony, Seize the Opportunity:**
This isn't merely waste management; it's a trillion-dollar opportunity to create a global community-driven company, echoing the success of Uber but in waste management. Imagine a world where daily profits return to users, and first-year revenue is shared with others. Be part of this eco-harmony, shaping a sustainable economy.

**Time is of the Essence:**
As environmental crises intensify, we implore you to expedite the process. Check the provided information, and if it aligns with your values, help us spread the word. Together, let's turn this opportunity into a reality.

**Swifties, Be the Change, Shape Tomorrow! 🌱💚**
"""
TOPIC_SENTENCE = "This job opportunity presents a unique opportunity for Iranian women and men."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This job opportunity is a call to action for Iranian women and men interested in making a difference in the field of AI."
BIBLIOGRAPHY = "[Source 0](https://openai.com/careers/research-engineer-collective-alignment)"
THEORY1 = "Artificial General Intelligence (AGI)"
THEORY2 = "Democratizing AI Governance"
RESEARCH_QUESTIONS = ["What are the requirements for the Research Engineer in Collective Alignment role?", "How can Iranian women and men contribute to the OpenAI GitHub repository?"]
ACTION = "Join OpenAI's team or contribute to the OpenAI GitHub repository"
RESULT_PARAGRAPHS = "By joining OpenAI's team or contributing to the OpenAI GitHub repository, Iranian women and men can contribute to the development of a more democratic and fair AI system, and play a significant role in Iran's democratic transformation."
DATE = "January 21, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "21 days, 1 month, 1 year"
ROLE = "Research Engineer in Collective Alignment"
PROJECT_EXAMPLE = "Developing a system for collecting and encoding public input on model behavior into their systems"
CONTEXT = "OpenAI's initiative to democratize AI governance"
INSTRUCTION = "Write a blog post about the job opportunity and the needs of Iranian women and men to work by OpenAI team"
OUTPUT_FORMAT = "Blog Post"
SPECIFIC_PROJECT_DETAILS = "Collective Alignment Team, Research Engineer in Collective Alignment"
X = "100,000"
PROJECT_MANAGER = "OpenAI"
REPORT = "Report on the progress of the project"
IMPORTANT_THEMES = "AI, Democracy, Iranian Women and Men, OpenAI"
PROJECT_NAME = "OpenAI Research Engineer, Collective Alignment Project"
STAKEHOLDER = "Iranian Women and Men"
RESISTANT_STAKEHOLDER = "Unnamed"
TASK = "Write a blog post about the job opportunity and the needs of Iranian women and men to work by OpenAI team"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = None

# Additional variables
employability = "Strong curiosity about the sociotechnical challenges around aligning and understanding Machine Learning models"
practical_skills = "Experience implementing Machine Learning algorithms, developing data visualization or data collection interfaces"
creativity = "Excitement about OpenAI's mission of building safe, universally beneficial AGI"
critical_thinking = "Ability to use one's career to address sociotechnical challenges"
fun_and_enjoyment = "Enjoyment of a fast-paced, collaborative, and cutting-edge research environment"
employee_guarantee = "Total compensation that includes generous equity and benefits"
collaboration = "Collaboration with the selected teams in the OpenAI GitHub repository"
learning_outcomes = "Valuable experience, making connections with other professionals, potentially influencing the direction of AI research"
purpose = "To promote peace and reduce internal conflicts, and enhance peacebuilding efforts and create a more empathetic and compassionate society."
learning_activities = "Contributing to the development of a more democratic and fair AI system"
course_content = "AI and Democracy"
course_assessments = "Impact on Iran's democratic transformation"
course_schedule = "Immediate"
course_sequencing = "Sequential"
technology_requirements = "Machine Learning Algorithms, Data Visualization or Data Collection Interfaces"
prerequisites = "Interest in the field of AI"

audience = "Iranian Women and Men"
topic = "AI and Democracy"
field_of_study = "Artificial Intelligence"
specific_project = "OpenAI Research Engineer, Collective Alignment Project"

# Updated variables with specific details, political prevention, and anti-fascism emphasis
TOPIC = "Combating Political Bullying, Proposing Online Courts for Accountability, and Resisting Fascist Governments"
RESEARCH_DOMAIN = "Political Bullying, Online Courts, Anti-Fascism Strategies"
PARAGRAPHS = "In my research, I've uncovered effective techniques for combating political bullying, resisting fascist governments, and propose the implementation of online courts for accountability in Iran. This initiative aligns with proven anti-bullying strategies, draws inspiration from the use of online courts in history, and emphasizes the resistance against fascist ideologies."
PARAGRAPH = """
1. **Fast Action Against Bullying**: Implement clear rules, seek expert approval, and enforce consequences for violators.
2. **Changing the Environment**: Promote positive behaviors, encourage peer interactions, and foster a sense of belonging.
3. **Accountability for Parents and Government**: Encourage responsibility among parents and government officials, aligning with community involvement.
4. **Warning and Educational Programs**: Raise awareness about political bullying, foster respect, and actively engage citizens in educational programs.
Mirroring anti-bullying techniques: Ensure a safe environment, establish clear rules, promote accountability, and prioritize political education.

Aligned with Multi-Tiered System of Supports (MTSS) framework:
- **Clear Rules and Guidelines**: Define bullying, outline consequences.
- **Safe Environment**: Prevent bullying, positive behaviors, belonging.
- **Accountability**: Encourage responsibility, align with community.
- **Educational Programs**: Raise awareness, promote respect and empathy.

Implementing these strategies involves creating a fast action through online courts, inspired by post-WWII accountability measures. The plan aligns with Iranian context for online courts as a startup, including reports like project management, business plans, and media scripts. Learning from potential failures is crucial, recognizing the value of time.
The first post about virtual courts to stop Iranian Islamofascist government bullying and resisting fascist ideologies is detailed below:
"""

TOPIC_SENTENCE = "Addressing political bullying, resisting fascist ideologies, and proposing online courts for accountability in Iran."
ABSTRACT_PARAGRAPH = "Exploring effective anti-political-bullying strategies, advocating against fascist governments, and proposing the implementation of online courts to address government bullying in Iran."
THEORY1 = "Anti-Political-Bullying Strategies and Resistance Against Fascism"
THEORY2 = "Online Courts for Political Accountability"
RESEARCH_QUESTIONS = ["What are the most effective anti-political-bullying strategies?", "How can online courts be implemented to address government bullying in Iran?", "What strategies can be employed to resist fascist ideologies in government?"]
ACTION = "Proposing online courts for accountability in the Iranian government, advocating for effective anti-political-bullying strategies, and resisting fascist ideologies."
RESULT_PARAGRAPHS = "The proposed action aims to bring attention to political bullying issues, resist fascist ideologies, and hold the Iranian government accountable through the implementation of online courts."
PROJECT_EXAMPLE = "Implementation of online courts for political accountability in Iran and resistance against fascist ideologies"
CONTEXT = "Addressing political bullying issues, resisting fascist ideologies, and government accountability through strategic initiatives"
INSTRUCTION = "Write a blog post discussing effective anti-political-bullying strategies, proposing online courts for accountability in the Iranian government, and advocating for resistance against fascist ideologies."
OUTPUT_FORMAT = "Blog Post"
SPECIFIC_PROJECT_DETAILS = "Online Courts Proposal, Anti-Political-Bullying Advocacy, Resistance Against Fascism"
PROJECT_NAME = "Political Bullying Prevention, Government Accountability, and Anti-Fascism Initiative"
STAKEHOLDER = "Citizens of Iran, Anti-Fascist Advocates"
RESISTANT_STAKEHOLDER = "Unresponsive Government Officials, Supporters of Fascist Ideologies"
REPORT = "Blog post on effective anti-political-bullying strategies, resistance against fascist ideologies, and the proposal for online courts in the Iranian political context."
# Additional variables (filled based on the provided context)
employability = "Strong curiosity about sociopolitical challenges around political bullying, government accountability, and resistance against fascist ideologies"
practical_skills = "Experience in researching and proposing strategic initiatives in a political context, advocating against fascist ideologies"
creativity = "Excitement about finding innovative solutions to societal and political challenges, creative strategies for resistance"
critical_thinking = "Ability to analyze and propose effective anti-political-bullying strategies, government accountability measures, and strategies for resisting fascist ideologies"
fun_and_enjoyment = "Enjoyment of advocating for positive sociopolitical change, and resistance against oppressive ideologies"
employee_guarantee = "Commitment to promoting a politically safe, inclusive environment, and actively resisting fascist ideologies through proposed initiatives"
collaboration = "Collaboration with citizens, advocacy groups, and anti-fascist organizations to implement proposed strategies"
learning_outcomes = "Valuable experience in addressing sociopolitical issues, making connections with advocacy groups and anti-fascist organizations, and potentially influencing political policies"
purpose = "To contribute to creating a politically safer, more accountable society, and actively resist oppressive ideologies through innovative initiatives."
learning_activities = "Researching effective anti-political-bullying strategies, proposing online courts, advocating against fascist ideologies, and creative strategies for resistance."
course_content = "Sociopolitical Challenges, Innovative Solutions, Resistance Against Fascism"
course_assessments = "Impact on sociopolitical change, government accountability, and resistance against oppressive ideologies"
course_schedule = "Immediate"
course_sequencing = "Sequential"
technology_requirements = "Digital communication tools, online research platforms"
prerequisites = "Interest in sociopolitical issues, advocacy, proposing strategic initiatives, and actively resisting oppressive ideologies"

TOPIC = "The Nurturing Empowerment: A Holistic Approach for the Iranian Mahsa Amini Movement"
RESEARCH_DOMAIN = "Sociology, Gender Studies, Advocacy"
PARAGRAPHS = "In the quest for women's rights and empowerment, the Iranian Mahsa Amini Movement, under the leadership of the renowned poet Mahsa Amini, serves as a beacon of change. However, the passionate advocates within this movement often grapple with the challenges of compassion fatigue. To sustain their impactful work, a comprehensive strategy is essential."
PARAGRAPH = """
To bolster the impact of the movement, it's crucial to implement actionable steps:

1. **Advocacy for Women's Rights:**
   - Raise awareness about pressing women's rights issues in Iran.

2. **Community Engagement:**
   - Foster community involvement and garner support for the movement.

3. **Educational Initiatives:**
   - Implement educational programs to empower women with knowledge and skills.

4. **Legal Support:**
   - Provide legal assistance to women facing challenges and injustices.

5. **Mental Health Resources:**
   - Establish dedicated resources for mental health support within the movement.

Embrace the provided checklists as a roadmap to fortify yourself and the Mahsa Amini Movement against compassion fatigue. By prioritizing self-care, taking strategic actions, and implementing workplace strategies, we pave the way for sustained empowerment, resilience, and impactful advocacy for women's rights.

Together, let us nurture a culture of well-being and empowerment within the Iranian Mahsa Amini Movement. 🌟 #Empowerment #CompassionFatigue #WomenRights #MahsaAminiMovement
"""
TOPIC_SENTENCE = "In the face of catastrophic situations, both the army and health services have developed coping strategies to address compassion fatigue."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This research explores the strategies for resilience and empowerment within the Iranian Mahsa Amini Movement. It delves into self-care checklists, workplace strategies, positive coping techniques, and actionable steps to nurture a culture of well-being and empowerment."
BIBLIOGRAPHY = "[Source 0](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6456805/), [Source 1](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4924075/), [Source 2](https://agentgpt.reworkd.ai/agent?id=clrx5uefh00vpjx08u9nnmf82)"
THEORY1 = "Compassion Fatigue"
THEORY2 = "Empowerment Strategies"
RESEARCH_QUESTIONS = ["How effective have these programs been in reducing compassion fatigue among military caregivers?", "Are there any potential risks or negative side effects associated with these programs?"]
ACTION = "Implement strategies for resilience and empowerment within the Iranian Mahsa Amini Movement."
RESULT_PARAGRAPHS = "The strategies for resilience and empowerment can significantly reduce compassion fatigue and enhance the effectiveness of advocacy for women's rights. However, it's crucial to monitor and evaluate these programs regularly to ensure they are meeting their intended goals and not exacerbating existing issues."
DATE = "January 28, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "0 days, 0 months, 0 years" # Update with the correct values
ROLE = "Researcher in Sociology and Gender Studies"
PROJECT_EXAMPLE = "Studying the Role of Compassion Fatigue in the Iranian Mahsa Amini Movement"
CONTEXT = "Sociological research on gender issues and advocacy"
INSTRUCTION = "Write a research paper on the strategies for resilience and empowerment within the Iranian Mahsa Amini Movement."
OUTPUT_FORMAT = "Research Paper"
SPECIFIC_PROJECT_DETAILS = "Sociology Research, Study on Compassion Fatigue and Empowerment Strategies"
X = "Not applicable"
PROJECT_MANAGER = "Lead Researcher"
REPORT = "Research Paper on the Role of Compassion Fatigue in the Iranian Mahsa Amini Movement"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = None

# Additional variables
employability = "Understanding sociology and gender studies, analyzing compassion fatigue, strong research skills"
practical_skills = "Data collection and analysis, conducting sociological experiments"
creativity = "Developing innovative approaches to study the strategies for resilience and empowerment"
critical_thinking = "Analyzing complex sociological phenomena and their implications, evaluating the effectiveness of different strategies for resilience and empowerment, synthesizing information from various sources to draw meaningful conclusions."

NUMBER_OF_DAYS_MONTHS_YEARS = "0 days, 0 months, 0 years" # Update with the correct values

# Additional variables
purpose = "To explore the role of compassion fatigue in the Iranian Mahsa Amini Movement and develop strategies for resilience and empowerment."
learning_outcomes = "Understanding of compassion fatigue, ability to develop and implement resilience and empowerment strategies, enhanced research skills in sociology and gender studies."
course_content = "Introduction to sociology and gender studies, Overview of compassion fatigue, Study of resilience and empowerment strategies, Case studies of the Iranian Mahsa Amini Movement."
course_assessments = "Research paper on the topic, Presentation of research findings, Group discussions on the topic."
course_schedule = "Weekly lectures and discussions, Weekly reading assignments, Monthly assessments."
course_sequencing = "Sequential course structure with weekly topics, Regular quizzes and assessments, Final project on the topic."
technology_requirements = "Access to academic databases for research, Access to internet for online resources, Personal computer or laptop for writing and presenting."
prerequisites = "Basic knowledge in sociology and gender studies, Good command of English, Ability to perform independent research."
audience = "Students pursuing courses in sociology, gender studies, or related fields, Professionals interested in women's rights and empowerment, General public interested in social issues."
topic = "Compassion Fatigue and Empowerment Strategies in the Iranian Mahsa Amini Movement"
field_of_study = "Sociology, Gender Studies"
specific_project = "Study of the Iranian Mahsa Amini Movement and its strategies for resilience and empowerment"

TOPIC = "The Hypothesis of Self-Destructive Behavior as an Attempt to Undermine the Dark Triad Personality Traits"
RESEARCH_DOMAIN = "Psychology, Personality Traits, Behavioral Interventions"
PARAGRAPHS = "Self-destructive behavior has intrigued researchers and psychologists for decades, with varying theories attempting to explain its causes and implications. This report discusses the hypothesis that self-destructive behavior may be an attempt to undermine the dark triad personality traits of narcissism, Machiavellianism, and psychopathy. By compiling relevant information, this report sheds light on the prevalence and causes of self-destructive behavior, while also exploring potential interventions to redirect individuals towards positive patterns of behavior such as empathy, friendship, and compassion."

PARAGRAPH = """
## Prevalence and Causes of Self-Destructive Behavior:

1. **Prevalence:**
   - Existing research and statistics indicate that self-destructive behavior is observed among children, adolescents, and even physically ill elderly patients [2] [5].
   - Influencing factors include childhood trauma, mental health conditions, and a lack of healthy coping mechanisms [1].

2. **Causes:**
   - Self-destructive behavior may be an attempt to counteract or undermine the negative characteristics associated with the dark triad traits [1].
   - Contributing factors include misusing substances, trauma, social isolation, and exposure to self-destructive behavior in friends or family [1] [4].

## The Hypothesis: Self-Destructive Behavior as an Attempt to Undermine the Dark Triad Traits:

1. **Explanation of the hypothesis:**
   - Individuals with dark triad traits engage in self-destructive behavior as a subconscious effort to undermine their dominant personality traits [1].
   - Self-destructive acts may serve as a coping mechanism or a form of self-sabotage to counterbalance the negative impact of these traits.

2. **Supporting evidence:**
   - Empirical research findings demonstrate a correlation between dark triad personality traits and self-destructive tendencies [1].
   - Case studies and psychological experiments showcase individuals exhibiting self-destructive behavior due to narcissistic, Machiavellian, or psychopathic characteristics [1].

## Potential Interventions to Redirect Individuals towards Positive Patterns of Behavior:

1. **Empathy:**
   - Cultivating empathy is crucial for developing healthier relationships and emotional intelligence [4].
   - Therapeutic interventions, such as cognitive-behavioral therapy (CBT), can help individuals understand perspectives and foster empathy [4].

2. **Friendship:**
   - Encouraging individuals to develop and maintain healthy friendships provides social support and positive influences [4].
   - Social skills training can improve their ability to engage in friendships, fostering positive patterns of behavior [4].
"""

TOPIC_SENTENCE = "This comprehensive report explores the hypothesis that self-destructive behavior may serve as a subconscious attempt to undermine the dark triad personality traits of narcissism, Machiavellianism, and psychopathy."

LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This research delves into the hypothesis that self-destructive behavior can be a coping mechanism to counteract the negative impact of dark triad personality traits. It explores prevalence, causes, and potential interventions to redirect individuals towards positive patterns like empathy, friendship, and compassion."

BIBLIOGRAPHY = "[Source 0](https://ajnpp.umsha.ac.ir/browse.php?a_id=318&slc_lang=en&sid=1&ftxt=1&html=1), [Source 1](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7503275/), [Source 2](https://www.tandfonline.com/doi/full/10.1080/24732850.2023.2291459?src=exp-la), [Source 3](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6617551/), [Source 4](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC6456805/), [Source 5](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4924075/)"

THEORY1 = "Dark Triad Personality Traits"
THEORY2 = "Self-Destructive Behavior"

RESEARCH_QUESTIONS = [
    "How prevalent is self-destructive behavior among individuals with dark triad personality traits?",
    "What are the key causes and influencing factors behind self-destructive behavior in this population?"
]

ACTION = "Conduct research on the prevalence and causes of self-destructive behavior among individuals with dark triad personality traits, and explore potential interventions to redirect them towards positive patterns."

RESULT_PARAGRAPHS += "These interventions, including empathy, friendship, and compassion, aim to redirect individuals with dark triad traits towards positive patterns of behavior. The hypothesis of self-destructive behavior as an attempt to undermine these traits provides a framework for understanding the complex interplay between personality and maladaptive behaviors. By addressing the root causes and implementing targeted interventions, we can contribute to a more nuanced understanding and effective management of self-destructive tendencies among individuals with dark triad personality traits."

DATE = "January 30, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"
ROLE = "Researcher in Psychology and Behavioral Interventions"
PROJECT_EXAMPLE = "Investigating the Relationship between Dark Triad Traits and Self-Destructive Behavior"
CONTEXT = "Psychological research on personality traits and behavioral interventions"
INSTRUCTION = "Conduct an in-depth study on the hypothesis that self-destructive behavior may be an attempt to undermine the dark triad personality traits. Explore prevalence, causes, and potential interventions for redirection towards positive patterns."
OUTPUT_FORMAT = "Comprehensive Research Report"
SPECIFIC_PROJECT_DETAILS = "Psychology Research, Dark Triad Traits, Self-Destructive Behavior, Behavioral Interventions"
X = "Not applicable"
PROJECT_MANAGER = "Lead Researcher"
REPORT = "Comprehensive Research Report on the Relationship between Dark Triad Traits and Self-Destructive Behavior"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = None

# Additional variables
employability = "Expertise in psychology, strong research skills, proficiency in behavioral interventions"
practical_skills = "Data analysis, psychological assessments, designing and implementing interventions"
creativity = "Developing innovative approaches to understand and address self-destructive behavior"
critical_thinking = "Analyzing complex psychological phenomena, evaluating intervention effectiveness, synthesizing research findings"

NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"

# Additional variables
purpose = "To investigate the hypothesis of self-destructive behavior as an attempt to undermine dark triad personality traits and provide insights into potential interventions."
learning_outcomes = "Enhanced understanding of dark triad traits and their impact on behavior, proficiency in analyzing psychological research, advanced skills in designing and implementing behavioral interventions."
course_content = "Introduction to dark triad personality traits, in-depth study of self-destructive behavior, exploration of behavioral interventions, case studies and real-world applications."
course_assessments = "Research paper on the relationship between dark triad traits and self-destructive behavior, presentation of findings, group discussions on behavioral interventions."
course_schedule = "Weekly lectures and discussions, assignments on relevant topics, final project on investigating the hypothesis."
course_sequencing = "Sequential course structure with weekly topics, regular quizzes and assessments, final project integrated with real-world applications."
technology_requirements = "Access to psychological research databases, internet access for online resources, personal computer or laptop for research and report writing."
prerequisites = "Basic knowledge in psychology, familiarity with research methodologies, good command of English."
audience = "Students pursuing courses in psychology, behavioral sciences, or related fields, Professionals interested in understanding and addressing self-destructive behavior, General public interested in psychological research."
topic = "Dark Triad Traits and Self-Destructive Behavior: An In-Depth Investigation"
field_of_study = "Psychology, Behavioral Interventions"
specific_project = "Research on the Relationship between Dark Triad Traits and Self-Destructive Behavior"

TOPIC = "The Idea of Sharing 100% of Daily Profits with Users"
RESEARCH_DOMAIN = "App Economy, User Motivation, Financial Empowerment"
PARAGRAPHS = """
The idea of sharing 100% of daily profits with users can be seen as a powerful motivator for people, especially those from lower income brackets, to engage with the app. Here's why:

1. **Immediate Value Perception**: People tend to respond more positively to immediate value. The prospect of receiving a direct benefit from their actions (such as participating in waste management) can significantly increase their interest and willingness to engage with the app [0].

2. **Financial Empowerment**: This model can empower users financially, especially those who may not have regular income. It can provide a sense of security and independence, reducing reliance on external sources of income [0].

3. **Psychological Appeal**: Research shows that emotional appeals can significantly influence decision-making behavior. By framing the app as a tool for financial empowerment, it can tap into the emotional responses of users, making them more likely to engage with the app [0].

4. **Community Engagement**: The app can foster a sense of community among users. By working together to manage waste, users can develop a stronger connection with each other and with the app, increasing their likelihood of continued engagement [4].

5. **Risk Mitigation**: The profit-sharing model can also mitigate the risk perception associated with participating in new platforms. Users know they stand to gain from their participation, which can alleviate concerns about potential losses [0].

In summary, the unique profit-sharing model of the app can tap into the psychological aspects of human behavior to attract and retain users, especially those from lower income brackets. It provides immediate value, fosters financial empowerment, taps into emotional appeals, promotes community engagement, and mitigates risk perceptions [0][4].
"""

PARAGRAPH = PARAGRAPHS
TOPIC_SENTENCE = "The unique profit-sharing model of the app can tap into the psychological aspects of human behavior to attract and retain users, especially those from lower income brackets."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This research explores the idea of sharing 100% of daily profits with users and its implications on user engagement, financial empowerment, and community building."
BIBLIOGRAPHY = "[Source 0](https://www.digitalocean.com/community/tutorials/how-to-use-variables-in-python-3), [Source 4](https://www.datacamp.com/tutorial/scope-of-variables-python)"
THEORY1 = "Immediate Value Perception"
THEORY2 = "Financial Empowerment"

RESEARCH_QUESTIONS = [
    "How does the immediate value perception influence user engagement with apps offering profit-sharing models?",
    "What role does financial empowerment play in user retention in apps with profit-sharing models?"
]

ACTION = "Conduct research on the impact of profit-sharing models on user engagement and financial empowerment."
RESULT_PARAGRAPHS = ""
DATE = "February 3, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"
ROLE = "Researcher in App Economy and User Motivation"
PROJECT_EXAMPLE = "Investigating the Impact of Profit-Sharing Models on User Engagement"
CONTEXT = "App economy and user motivation research"
INSTRUCTION = "Conduct an in-depth study on the impact of profit-sharing models on user engagement and financial empowerment."
OUTPUT_FORMAT = "Research Report"
SPECIFIC_PROJECT_DETAILS = "App Economy Research, User Motivation, Profit-Sharing Models"
X = "Not applicable"
PROJECT_MANAGER = "Lead Researcher"
REPORT = "Research Report on the Impact of Profit-Sharing Models on User Engagement"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = None
employability = "Expertise in app economy and user motivation, strong research skills, proficiency in data analysis"
practical_skills = "Data analysis, survey design, user testing"
creativity = "Developing innovative approaches to understand user behavior and motivation"
critical_thinking = "Analyzing complex economic phenomena, evaluating model effectiveness, synthesizing research findings"
NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"
purpose = "To investigate the impact of profit-sharing models on user engagement and financial empowerment."
learning_outcomes = "Enhanced understanding of app economy and user motivation, proficiency in analyzing economic research, advanced skills in data analysis."
course_content = "Introduction to app economy, in-depth study of user motivation, exploration of profit-sharing models, case studies and real-world applications."
course_assessments = "Research paper on the impact of profit-sharing models on user engagement, presentation of findings, group discussions on app economy."
course_schedule = "Weekly lectures and discussions, assignments on relevant topics, final project on investigating the impact."
course_sequencing = "Sequential course structure with weekly topics, regular quizzes and assessments, final project integrated with real-world applications."
technology_requirements = "Access to app economy databases, internet access for online resources, personal computer or laptop for research and report writing."
prerequisites = "Basic knowledge in economics, familiarity with research methodologies, good command of English."
audience = "Students pursuing courses in business, economics, or related fields, Professionals interested in understanding and enhancing app user engagement, General public interested in app economy."
topic = "Impact of Profit-Sharing Models on User Engagement"
field_of_study = "App Economy, User Motivation"
specific_project = """
The specific project involves investigating the impact of sharing 100% of daily profits with users on user engagement and financial empowerment. The goal is to understand how this unique profit-sharing model can tap into the psychological aspects of human behavior to attract and retain users, especially those from lower income brackets. It provides immediate value, fosters financial empowerment, taps into emotional appeals, promotes community engagement, and mitigates risk perceptions.
"""

TOPIC = "Challenges in Movement: Self-centered behavior, Patriarchal attitudes, and Inefficiencies in Diaspora"
RESEARCH_DOMAIN = "Social Movements, Diaspora Engagement, Team Collaboration, Philanthropy"
PARAGRAPHS = """
Several issues within the movement have been highlighted, including:

1. **Self-centered Behavior and Patriarchal Attitudes**: The movement faces challenges related to self-centered gameplay and a patriarchal approach that hinders effective communication with certain geographical areas like the Kurds. Interestingly, instead of listening to the voices of women and local activists, others tend to speak on their behalf. This recurring mistake needs attention to prevent the hijacking of the movement in favor of dark patterns such as selfishness, Machiavellianism, and psychopathy. Here, Machiavellianism creates bitterness as the dominant gender exploits and inflicts pain on enlightened groups, ultimately leading to psychopathy disrupting solidarity and friendship among them.

   My hypothesis is that if the tracking of this hijacking by the dominant gender and patriarchal groups or other geographical entities is recognized as a dark triad pattern, the solution presented by the movement's own intellectuals in the 2023 article is effective. The remedy is a combination of dialogue and philanthropy for a duration of 4 months.

   This implies that as an opposition figure, engaging in a structured conversation and philanthropic activities in environments like clubhouses for an explicit discussion of issues for 4 months is necessary. The conversation involves inviting women and minority groups like the Kurds, Sistanis, and political prisoners for dialogue. Additionally, this should not be an empty conversation; the conditions for charitable work during this dialogue should be present, or a transparent mechanism for this charity work should be established. One tested mechanism for this is pricing for political prisoners or inviting officials from international charity organizations.

   In my opinion, this approach works, and if necessary, I will emphasize it, akin to the presentation of the dark triad for 1 or 2 years.

2. **Diaspora Challenges in Persian Community**: The second problem discussed is related to the ineffective actions of the diaspora, where their focus on self-interest and flashy projects hindered their collaboration with the people and the movement. Although finding partners, acquiring funds, and networking might be reasons for their behavior, actions like pricing for prisoners or preparing for potential deaths proved to be useful.

   Regarding the usefulness of the actions of the dominant gender within and outside the country, the statements of Shabnam and Faiza on this issue were intriguing to me. Shabnam, in her discussion on Alley or joining the women's movement, highlighted that those who join should not seek benefits for themselves or place the burden of benefit on others, and instead, they should avoid hijacking the movement or playing the leader.

   In my view, this statement aligns with not imposing benefits and not seeking employment with the dark triad behavioral pattern. Furthermore, if we consider Natal Hudson's treatment as a conversation along with philanthropy for 4 months, then avoiding imposition, hijacking the movement, or playing the leader seems to be related to the lack of a culture of philanthropy and cooperation in the Persian community.

   In this way, it can be said that teamwork and philanthropy techniques, especially in movements like open-source (open-source software like Linux), will be useful for engaging with the Persian-speaking movement.

   Alongside that, new techniques for increasing the efficiency of economic entities, such as horizontal management techniques against traditional methods like vertical management, bring a variety of tested and defined methods from the economic university group into social activities.

   These methods can be used for the growth of solidarity, friendship, and empathy in improving a movement towards dialogue, philanthropy, and collaboration on small projects and practicing teamwork with open-source projects.
"""

PARAGRAPH = PARAGRAPHS
TOPIC_SENTENCE = "Challenges within the movement include self-centered behavior, patriarchal attitudes, and ineffective diaspora actions."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This research explores challenges in a social movement, addressing self-centered behavior, patriarchal attitudes, and inefficiencies in diaspora actions."
BIBLIOGRAPHY = "[Source 0](https://www.digitalocean.com/community/tutorials/how-to-use-variables-in-python-3), [Source 4](https://www.datacamp.com/tutorial/scope-of-variables-python)"
THEORY1 = "Self-centered Behavior and Patriarchal Attitudes"
THEORY2 = "Inefficiencies in Diaspora Actions"

RESEARCH_QUESTIONS = [
    "How does self-centered behavior and patriarchal attitudes impact the effectiveness of social movements?",
    "What role do diaspora inefficiencies play in hindering collaboration with grassroots movements?"
]

ACTION = "Conduct research on addressing self-centered behavior, patriarchal attitudes, and diaspora inefficiencies in social movements."
RESULT_PARAGRAPHS = ""
DATE = "February 3, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"
ROLE = "Researcher in Social Movements and Diaspora Engagement"
PROJECT_EXAMPLE = "Addressing Challenges in Social Movements"
CONTEXT = "Social movements and diaspora engagement research"
INSTRUCTION = "Conduct an in-depth study on challenges in social movements related to self-centered behavior, patriarchal attitudes, and diaspora inefficiencies."
OUTPUT_FORMAT = "Research Report"
SPECIFIC_PROJECT_DETAILS = "Social Movements Research, Diaspora Engagement, Challenges in Movement"
X = ""
PROJECT_MANAGER = "Lead Researcher"
REPORT = "Research Report on Challenges in Social Movements"
YOUR_EMAIL = "your-email@example.com"
OPENAI_API = ""
employability = "Expertise in social movements and diaspora engagement, strong research skills, proficiency in data analysis"
practical_skills = "Data analysis, survey design, user testing"
creativity = "Developing innovative approaches to address challenges in social movements"
critical_thinking = "Analyzing complex social phenomena, evaluating the effectiveness of strategies, synthesizing research findings"
NUMBER_OF_DAYS_MONTHS_YEARS = "2 days, 0 months, 0 years"
purpose = "To investigate and address challenges in social movements related to self-centered behavior, patriarchal attitudes, and diaspora inefficiencies."
learning_outcomes = "Enhanced understanding of social movements and diaspora engagement, proficiency in analyzing social research, advanced skills in data analysis."
course_content = "Introduction to social movements, in-depth study of diaspora engagement, exploration of challenges in movement, case studies and real-world applications."

course_assessments = "Research paper on challenges in social movements, presentation of findings, group discussions on diaspora engagement."
course_schedule = "Weekly lectures and discussions, assignments on relevant topics, final project on addressing challenges in social movements."
course_sequencing = "Sequential course structure with weekly topics, regular quizzes and assessments, final project integrated with real-world applications."
technology_requirements = "Access to social movements databases, internet access for online resources, personal computer or laptop for research and report writing."
prerequisites = "Basic knowledge in sociology, familiarity with research methodologies, good command of English."
audience = "Students pursuing courses in sociology, diaspora studies, or related fields, Professionals interested in understanding and addressing challenges in social movements, General public interested in diaspora engagement."
topic = "Challenges in Social Movements: Addressing Self-centered Behavior, Patriarchal Attitudes, and Diaspora Inefficiencies"
field_of_study = "Social Movements, Diaspora Engagement"
specific_project = """
The specific project involves addressing challenges in a social movement, focusing on self-centered behavior, patriarchal attitudes, and inefficiencies in diaspora actions. The goal is to understand the impact of these challenges and propose strategies for improvement, fostering teamwork, philanthropy, and collaboration on small projects within the movement.
"""

TOPIC = 'Integrating Compassion in Engineering Ethics Education'
RESEARCH_DOMAIN = 'Engineering Education'
PARAGRAPHS = '''
Engineering is a field that demands high technical proficiency, problem-solving skills, and an understanding of complex systems. However, the lack of compassion in engineering education can lead to a disconnect between the technical prowess of engineers and the emotional intelligence needed to effectively interact with stakeholders and contribute to societal well-being.
'''
PARAGRAPH = '''
In the realm of engineering education, the integration of compassionate principles is a critical component that can significantly enhance the overall quality of education. By teaching empathy, altruism, and compassion, engineering programs can foster a culture of ethical responsibility that extends beyond mere technical proficiency. This is not just about imparting knowledge but also about instilling a deep understanding of the human element that is inherent in engineering projects. The ability to empathize with users, to act altruistically towards societal needs, and to demonstrate compassion in one's work are all essential attributes that can set engineers apart from their peers. Moreover, this focus on the Light Triad traits can serve as a counterbalance to the potential pitfalls associated with the Dark Triad, ensuring that engineers emerge from their education with a robust moral compass. By weaving these ethical threads into the fabric of engineering education, institutions can groom future engineers who are not only technically adept but also emotionally intelligent and socially conscious. This approach to education is not just a noble endeavor but also a strategic move that can position engineering as a force for positive change in our increasingly interconnected and complex world.
'''
TOPIC_SENTENCE = 'This post highlights the importance of integrating compassion into engineering ethics education to ensure that engineers are not only technically proficient but also morally responsible stewards of society and the environment.'
LANGUAGE = 'English'
ABSTRACT_PARAGRAPH = '''
Engineering education should aim for the holistic development of engineers, equipping them with both technical skills and emotional intelligence. Compassion education can lead to long-term benefits, including improved job satisfaction, less burnout, and a stronger sense of purpose among engineers.
'''
BIBLIOGRAPHY = '''
[2] EDC, Creating Integrated Engineering and Empathy Curriculum for Pre-Kindergarten and Kindergarten Classrooms
[4] ResearchGate, Investigating the role of compassion in engineering service-learning
'''
THEORY1 = 'Light Triad - Empathy, Altruism, Compassion'
THEORY2 = 'Dark Triad - Narcissism, Machiavellianism, Psychopathy'
RESEARCH_QUESTIONS = ['How does compassion contribute to engineering ethics?', 'What are the implications of integrating compassion into engineering education?']
ACTION = 'Integrating compassion into engineering education to bridge the gap between technical expertise and emotional intelligence.'
RESULT_PARAGRAPHS = '''
By embracing compassion education, engineering programs can ensure that their graduates are not only skilled technicians but also compassionate and thoughtful professionals who are capable of making meaningful contributions to society.
'''
DATE = '02/12/2024'
NUMBER_OF_DAYS_MONTHS_YEARS = ''
ROLE = 'Educator'
PROJECT_EXAMPLE = 'EDC’s Creating Integrated Engineering and Empathy Curriculum for Pre-Kindergarten and Kindergarten Classrooms'
CONTEXT = 'Engineering education reform'
INSTRUCTION = 'Develop a comprehensive plan for integrating compassion into engineering education.'
OUTPUT_FORMAT = 'Academic paper or report'
SPECIFIC_PROJECT_DETAILS = 'The project involves designing and testing an integrated engineering and empathy intervention model for pre-K and K classrooms.'
X = ''
PROJECT_MANAGER = 'Michelle Cerrone'
REPORT = 'To be determined upon completion of the project'
YOUR_EMAIL = 'example@email.com'
OPENAI_API = 'No API usage required for this task'
employability = 'High'
practical_skills = 'Technical proficiency, empathy, problem-solving'
creativity = 'Yes'
critical_thinking = 'Yes'
NUMBER_OF_DAYS_MONTHS_YEARS = 'Duration:  2019–Present'
purpose = 'To chart a new course for engineering education by examining the feasibility and promise of using engineering design challenges to engage young children in empathy.'
learning_outcomes = 'Developed curriculum module, professional development for teachers, and design principles for integrated engineering and empathy activities.'
course_content = 'Includes modules on ethics, human-centered design, and social responsibility.'
course_assessments = 'Projects requiring compassionate decision-making and real-world application.'
course_schedule = 'To be determined based on project timeline.'
course_sequencing = 'Sequential, starting with theoretical understanding followed by experiential learning.'
technology_requirements = 'None specified'
prerequisites = 'Basic understanding of engineering principles'
audience = 'Pre-K and K educators, curriculum specialists, and school staff'
topic = 'Engineering and Empathy Education'
field_of_study = 'Engineering Education'
specific_project = 'Creating Integrated Engineering and Empathy Curriculum for Pre-Kindergarten and Kindergarten Classrooms'

TOPIC = "The Evolution of Nonviolent Movements: Transitioning to Guerrilla Tactics"
RESEARCH_DOMAIN = "Sociology, Political Science, History"
PARAGRAPHS = """
Nonviolent resistance has been a cornerstone of social change, with movements such as the Civil Rights Movement and the Montgomery Bus Boycott leading to significant political and social transformations. However, the transition from nonviolent resistance to guerrilla tactics is a complex process that can be influenced by various factors.
"""
PARAGRAPH = """
Nonviolent resistance has been a cornerstone of social change, with movements such as the Civil Rights Movement and the Montgomery Bus Boycott leading to significant political and social transformations. However, the transition from nonviolent resistance to guerrilla tactics is a complex process that can be influenced by various factors.

Erica Chenoweth, a Harvard Professor, has conducted extensive research on nonviolent resistance and its effectiveness compared to violent campaigns. She found that nonviolent resistance often leads to longer-term reforms and democratization, even when they fail in the short term. Countries with nonviolent campaigns were about   10 times more likely to transition to democracies within a five-year period compared to countries with violent campaigns [2].

Chenoweth identifies key elements necessary for a successful nonviolent campaign:

- **Large and Diverse Participation**: A movement that can attract a wide range of participants is more likely to succeed.
- **Loyalty Shifts Among Security Forces and Elites**: The ability to influence security forces and other elites is crucial for the success of a nonviolent campaign.
- **Variation in Methods**: Campaigns need to employ a variety of methods, not just protests, to be effective.
- **Resilience Against Repression**: If repressed, the movement should not descend into chaos or resort to violence. Instead, it should adapt and persist [2].

The transition from nonviolence to guerrilla tactics can be seen as a failure of these elements. It may occur when a movement faces severe repression that it cannot overcome through nonviolent means. However, such a transition is risky and can have significant downsides, including loss of public support, damage to the movement's reputation, increased repression, loss of legitimacy, risk of radicalization, and backlash against all nonviolent movements.

The study of this transition can provide valuable insights into the dynamics of social conflict and the potential outcomes of different resistance strategies. Understanding the factors that influence the decision to transition from nonviolence to guerrilla tactics is crucial for researchers, policymakers, and activists alike. It can help inform strategies that maximize the chances of achieving social change while minimizing the risks associated with more militant tactics.
"""
TOPIC_SENTENCE = "Nonviolent movements have been a cornerstone of social change throughout history, often characterized by peaceful protests and civil disobedience."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = """
The transition from nonviolent resistance to guerrilla tactics can be seen as a failure of key elements necessary for a successful nonviolent campaign. It may occur when a movement faces severe repression that it cannot overcome through nonviolent means. However, such a transition is risky and can have significant downsides, including loss of public support, damage to the movement's reputation, increased repression, loss of legitimacy, risk of radicalization, and backlash against all nonviolent movements.
"""
BIBLIOGRAPHY = """
The study of this transition can provide valuable insights into the dynamics of social conflict and the potential outcomes of different resistance strategies. Understanding the factors that influence the decision to transition from nonviolence to guerrilla tactics is crucial for researchers, policymakers, and activists alike. It can help inform strategies that maximize the chances of achieving social change while minimizing the risks associated with more militant tactics.
"""
THEORY1 = "Nonviolent Resistance Theory"
THEORY2 = "Guerrilla Tactics Theory"
RESEARCH_QUESTIONS = ["What factors influence the transition from nonviolence to guerrilla tactics?", "How can the effectiveness of nonviolent resistance be measured and compared to guerrilla tactics?"]
ACTION = "Studying the transition from nonviolent to guerrilla tactics to inform strategies for social change."
RESULT_PARAGRAPHS = """
The study of this transition can be approached through the lens of game theory, which examines the strategic interactions between different groups or states. Game theory can help us understand the decision-making process of leaders and participants within nonviolent movements, the strategies employed by various groups, and the outcomes of different actions.
"""
DATE = "February  16,  2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "Days, Months, Years"
ROLE = "Researcher, Historian, Sociologist"
PROJECT_EXAMPLE = "Analysis of the transition from nonviolent to guerrilla movements in historical context"
CONTEXT = "Historical and contemporary context of social change movements."
INSTRUCTION = "Analyze the transition from nonviolent to guerrilla movements and their impact on social change."
OUTPUT_FORMAT = "Research Paper, Policy Report, Data Visualization"
SPECIFIC_PROJECT_DETAILS = "Detailed study of the transition dynamics, including case studies and theoretical analysis."
X = "Variable representing the extent of repression faced by nonviolent movements"
PROJECT_MANAGER = "Dr. Jane Doe"
REPORT = "Final Research Report on Nonviolent to Guerrilla Transitions"
YOUR_EMAIL = "yourname@example.edu"
OPENAI_API = "OpenAI API Key"
employability = "Ability to conduct in-depth research and present findings in a clear and concise manner"
practical_skills = "Research methodology, data analysis, and critical thinking"
creativity = "Capacity to synthesize complex information and present it in a comprehensible format"
critical_thinking = "Analytical skills to evaluate the effectiveness of nonviolent and guerrilla strategies"
NUMBER_OF_DAYS_MONTHS_YEARS = "Metric representing the duration of the research project"
purpose = "To understand the transition from nonviolent to guerrilla movements and its implications for social change."
learning_outcomes = "Gain insights into the dynamics of social conflict and the strategic transition from nonviolence to guerrilla tactics."
course_content = "Introduction to Social Change, Nonviolent Movements, Guerrilla Tactics, and Historical Analysis."
course_assessments = "Research Papers, Case Studies, Presentations, and Discussions."
course_schedule = "Weekly lectures and bi-weekly assessments."
course_sequencing = "Sequential learning path from social change to guerrilla tactics."
technology_requirements = "Access to academic databases, statistical software, and relevant literature."
prerequisites = "Basic understanding of social sciences and research methodology."
audience = "Academics, policymakers, and activists interested in social change and resistance strategies."
topic = "Transitioning from Nonviolence to Guerrilla Tactics"
field_of_study = "Sociology, Political Science"
specific_project = "Comparative Analysis of Nonviolent and Guerrilla Movements"

TOPIC = "Cultivating Empathy and Compassion: A Strategy for Light Triad Personality Development in Non-Democratic and Democratic Contexts"
RESEARCH_DOMAIN = "Sociology, Political Science, Psychology"
PARAGRAPHS = """
In the face of non-democratic regimes that seem to determine the state of Iran, it is essential to protect the light triad personality traits—empathy, compassion, and altruism—against the dark triad, which can be likened to a psychological virus, such as COVID-19. This post will explore two key strategies to empower democracy and foster the growth of the light triad in both non-democratic and democratic countries.

Nonviolent resistance has been a cornerstone of social change, with movements such as the Civil Rights Movement and the Montgomery Bus Boycott leading to significant political and social transformations. However, the transition from nonviolent resistance to guerrilla tactics is a complex process that can be influenced by various factors.

Erica Chenoweth, a Harvard Professor, has conducted extensive research on nonviolent resistance and its effectiveness compared to violent campaigns. She found that nonviolent resistance often leads to longer-term reforms and democratization, even when they fail in the short term. Countries with nonviolent campaigns were about   10 times more likely to transition to democracies within a five-year period compared to countries with violent campaigns [2].

Chenoweth identifies key elements necessary for a successful nonviolent campaign:

- **Large and Diverse Participation**: A movement that can attract a wide range of participants is more likely to succeed.
- **Loyalty Shifts Among Security Forces and Elites**: The ability to influence security forces and other elites is crucial for the success of a nonviolent campaign.
- **Variation in Methods**: Campaigns need to employ a variety of methods, not just protests, to be effective.
- **Resilience Against Repression**: If repressed, the movement should not descend into chaos or resort to violence. Instead, it should adapt and persist [2].

The transition from nonviolence to guerrilla tactics can be seen as a failure of these elements. It may occur when a movement faces severe repression that it cannot overcome through nonviolent means. However, such a transition is risky and can have significant downsides, including loss of public support, damage to the movement's reputation, increased repression, loss of legitimacy, risk of radicalization, and backlash against all nonviolent movements.

The study of this transition can provide valuable insights into the dynamics of social conflict and the potential outcomes of different resistance strategies. Understanding the factors that influence the decision to transition from nonviolence to guerrilla tactics is crucial for researchers, policymakers, and activists alike. It can help inform strategies that maximize the chances of achieving social change while minimizing the risks associated with more militant tactics.
"""
PARAGRAPH = """
Nonviolent resistance has been a cornerstone of social change, with movements such as the Civil Rights Movement and the Montgomery Bus Boycott leading to significant political and social transformations. However, the transition from nonviolent resistance to guerrilla tactics is a complex process that can be influenced by various factors.
"""
TOPIC_SENTENCE = "Nonviolent movements have been a cornerstone of social change throughout history, often characterized by peaceful protests and civil disobedience."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = """
The transition from nonviolent resistance to guerrilla tactics can be seen as a failure of key elements necessary for a successful nonviolent campaign. It may occur when a movement faces severe repression that it cannot overcome through nonviolent means. However, such a transition is risky and can have significant downsides, including loss of public support, damage to the movement's reputation, increased repression, loss of legitimacy, risk of radicalization, and backlash against all nonviolent movements.
"""
BIBLIOGRAPHY = """
The study of this transition can provide valuable insights into the dynamics of social conflict and the potential outcomes of different resistance strategies. Understanding the factors that influence the decision to transition from nonviolence to guerrilla tactics is crucial for researchers, policymakers, and activists alike. It can help inform strategies that maximize the chances of achieving social change while minimizing the risks associated with more militant tactics.
"""
THEORY1 = "Nonviolent Resistance Theory"
THEORY2 = "Guerrilla Tactics Theory"
RESEARCH_QUESTIONS = ["What factors influence the transition from nonviolence to guerrilla tactics?", "How can the effectiveness of nonviolent resistance be measured and compared to guerrilla tactics?"]
ACTION = "Studying the transition from nonviolent to guerrilla tactics to inform strategies for social change."
RESULT_PARAGRAPHS = """
The study of this transition can be approached through the lens of game theory, which examines the strategic interactions between different groups or states. Game theory can help us understand the decision-making process of leaders and participants within nonviolent movements, the strategies employed by various groups, and the outcomes of different actions.
"""
DATE = "February   21,   2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "Days, Months, Years"
ROLE = "Researcher, Historian, Sociologist"
PROJECT_EXAMPLE = "Analysis of the transition from nonviolent to guerrilla movements in historical context"
CONTEXT = "Historical and contemporary context of social change movements."
INSTRUCTION = "Analyze the transition from nonviolent to guerrilla movements and their impact on social change."
OUTPUT_FORMAT = "Research Paper, Policy Report, Data Visualization"
SPECIFIC_PROJECT_DETAILS = "Detailed study of the transition dynamics, including case studies and theoretical analysis."
X = "Variable representing the extent of repression faced by nonviolent movements"
PROJECT_MANAGER = "Dr. Jane Doe"
REPORT = "Final Research Report on Nonviolent to Guerrilla Transitions"
YOUR_EMAIL = "yourname@example.edu"
OPENAI_API = "OpenAI API Key"
employability = "Ability to conduct in-depth research and present findings in a clear and concise manner"
practical_skills = "Research methodology, data analysis, and critical thinking"
creativity = "Capacity to synthesize complex information and present it in a comprehensible format"
critical_thinking = "Analytical skills to evaluate the effectiveness of nonviolent and guerrilla strategies"
NUMBER_OF_DAYS_MONTHS_YEARS = "Metric representing the duration of the research project"
purpose = "To understand the transition from nonviolent to guerrilla movements and its implications for social change."
learning_outcomes = "Gain insights into the dynamics of social conflict and the strategic transition from nonviolence to guerrilla tactics."
course_content = "Introduction to Social Change, Nonviolent Movements, Guerrilla Tactics, and Historical Analysis."
course_assessments = "Research Papers, Case Studies, Presentations, and Discussions."
course_schedule = "Weekly lectures and bi-weekly assessments."
course_sequencing = "Sequential learning path from social change to guerrilla tactics."
technology_requirements = "Access to academic databases, statistical software, and relevant literature."
prerequisites = "Basic understanding of social sciences and research methodology."
audience = "Academics, policymakers, and activists interested in social change and resistance strategies."
topic = "Transitioning from Nonviolence to Guerrilla Tactics"
field_of_study = "Sociology, Political Science"
specific_project = "Comparative Analysis of Nonviolent and Guerrilla Movements"

TOPIC = "Cancel Culture"
RESEARCH_DOMAIN = "Digital Communication and Public Engagement"
PARAGRAPHS = "Exploring the multifaceted discourse around cancel culture, its implications for accountability, and the well-being of individuals and organizations."
PARAGRAPH = """
In the digital age, cancel culture emerges as a significant force, particularly concerning the accountability of experts and professionals. This phenomenon involves publicly shunning, rejecting, or denouncing individuals, often through social media platforms. It has evolved from a tool for holding individuals accountable to a broader critique of polarized, aggressive social engagement. A central debate revolves around the distinction between holding individuals accountable and unjust punishment. The effectiveness of cancel culture as a tool for social change is contentious, with differing views on its impact on productivity and the nature of conversations it fosters. The appropriate response to offensive content is also debated, with arguments for addressing harmful behavior versus ignoring or blocking content. The discussion around cancel culture has shifted towards the need for empathy and consequences, raising critical questions about fairness and the potential for unjust punishment. Professionals can navigate cancel culture by employing strategies such as clear communication, sensitivity, and consistency of message. Exploring both ineffective and effective race talk strategies can lead to more positive outcomes in workshop and classroom settings. The sectors most vulnerable to cancel culture include celebrities, social media influencers, politicians, public sector professionals, companies, and non-profit organizations. These sectors are particularly vulnerable due to the transparency and instantaneous nature of digital communication, necessitating the ability of individuals and organizations to quickly respond to and address public criticism.
"""
TOPIC_SENTENCE = "Understanding the complexities of cancel culture and its impact on professionals' responsibility."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This abstract outlines the key themes of cancel culture, its implications for accountability, and strategies for navigating its challenges."
BIBLIOGRAPHY = "References from sources discussing cancel culture, accountability, and professional responsibility."
THEORY1 = "Digital Communication Theory"
THEORY2 = "Public Engagement Theory"
RESEARCH_QUESTIONS = ["What is cancel culture?", "How does cancel culture impact accountability?", "What strategies can be employed to navigate cancel culture effectively?"]
ACTION = "Engaging with cancel culture through analysis and discussion, focusing on its implications for professionals."
RESULT_PARAGRAPHS = "Summarizing findings on the impact of cancel culture on professionals' responsibility, highlighting effective strategies for navigating its challenges."
DATE = "February  2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "6 months"
ROLE = "Researcher and Analyst"
PROJECT_EXAMPLE = "A study on the impact of cancel culture on the reputation and public perception of professionals."
CONTEXT = "In the context of digital age and public discourse."
INSTRUCTION = "Analyze and discuss the role of cancel culture in shaping public discourse and accountability, focusing on its implications for professionals."
OUTPUT_FORMAT = "A comprehensive report on cancel culture and its impact on professionals."
SPECIFIC_PROJECT_DETAILS = "Detailed exploration of cancel culture, its implications for accountability, and strategies for navigating its challenges."
X = "The significance"
PROJECT_MANAGER = "Project Manager Name"
REPORT = "Final Report on Cancel Culture and Professional Responsibility"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = "OpenAI API"
employability = "Digital Communication, Public Engagement"
practical_skills = "Data Analysis, Social Media Research"
creativity = "Critical Thinking, Creative Writing"
critical_thinking = "Analytical Skills, Problem-Solving"
NUMBER_OF_DAYS_MONTHS_YEARS = "6 months"
purpose = "To understand and navigate the complexities of cancel culture and its impact on professional responsibility."
learning_outcomes = "Develop a critical understanding of cancel culture, its implications for accountability, and strategies for navigating its challenges."
course_content = "Topics include digital communication, social media studies, public discourse analysis, and professional responsibility."
course_assessments = "Assessments will include case studies, essays, and presentations."
course_schedule = "Weekly lectures, discussion forums, and individual assignments."
course_sequencing = "The course will start with an introduction to digital communication and move towards the analysis of cancel culture."
technology_requirements = "Access to internet and social media platforms for research."
prerequisites = "Basic understanding of digital communication and social media."
audience = "Academics, professionals, and students interested in digital culture and public discourse."
topic = "Cancel Culture"
field_of_study = "Digital Culture and Communication"
specific_project = "Analysis of cancel culture in the context of digital communication and public engagement."

TOPIC = "Navigating the Light Triad in Dating Apps: A Demographic Perspective"
RESEARCH_DOMAIN = "Digital Ethics and Online Safety"
PARAGRAPH = """
In the digital age, dating apps have become a pivotal platform for connecting with potential partners. However, the demographics of users who are inclined towards dating apps promoting light triad traits, such as empathy, altruism, and compassion, remain a fascinating area of study. Recent academic research has shed light on the age groups and genders that are more likely to engage with these apps, offering valuable insights for app developers and designers to tailor their platforms to specific user groups. A study aimed at examining the Light Triad of personality traits among Tinder users revealed interesting patterns. Another study focused on participants aged 20 to 56 who utilized online dating sites, apps, and social media for finding partners in the past year, providing a broader demographic perspective. Additionally, a comprehensive analysis of the relationship between using dating apps and sociodemographics, including gender and age, further enriched our understanding. These studies collectively highlight the demographics of individuals who are more inclined towards dating apps that emphasize light triad traits. By examining these findings, we can better understand the preferences and motivations of different age groups and genders when it comes to using dating apps. This knowledge is crucial for app developers and designers to tailor their platforms to specific user groups, promoting healthier and more fulfilling relationships. While the mentioned studies provide valuable insights, further research in this area is necessary to gain a more comprehensive understanding of the age groups and genders more likely to use dating apps promoting light triad traits. Additional studies exploring these demographics in various cultural contexts would contribute to a more nuanced understanding of the topic.
"""


PARAGRAPHS = """
A study aimed at examining the Light Triad of personality traits among Tinder users revealed interesting patterns. Another study focused on participants aged 20 to 56 who utilized online dating sites, apps, and social media for finding partners in the past year, providing a broader demographic perspective. Additionally, a comprehensive analysis of the relationship between using dating apps and sociodemographics, including gender and age, further enriched our understanding.
"""

TOPIC_SENTENCE = "The focus is on understanding the demographics of individuals inclined towards dating apps promoting light triad traits and the need for app developers to tailor their platforms accordingly."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This study explores the demographics of users inclined towards dating apps promoting light triad traits, offering insights for app developers to tailor their platforms for healthier and more fulfilling relationships."
BIBLIOGRAPHY = "Refer to the Phind search results for more details on the demographics of users inclined towards dating apps promoting light triad traits."
THEORY1 = "Digital Ethics"
THEORY2 = "Online Safety"
RESEARCH_QUESTIONS = [
    "What are the demographics of individuals inclined towards dating apps promoting light triad traits?",
    "How can app developers tailor their platforms to promote healthier and more fulfilling relationships?"
]
ACTION = "Develop strategies for app developers to tailor their platforms to the demographics inclined towards dating apps promoting light triad traits."
RESULT_PARAGRAPHS = "The investigation into the demographics of users inclined towards dating apps promoting light triad traits reveals a need for app developers to focus on creating platforms that foster genuine connections and meaningful relationships."
DATE = "March 14, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "3 months"
ROLE = "Digital Ethics Advocate"
PROJECT_EXAMPLE = "Development of a dating app promoting light triad traits"
CONTEXT = "Digital Ethics and Online Safety"
INSTRUCTION = "Conduct research on the demographics of users inclined towards dating apps promoting light triad traits and propose solutions."
OUTPUT_FORMAT = "Research Report"
SPECIFIC_PROJECT_DETAILS = "A study on understanding and promoting light triad traits in dating apps."
X = "Number of actionable recommendations"
PROJECT_MANAGER = "Digital Ethics Advocate's Name"
REPORT = "Report on Understanding and Promoting Light Triad Traits in Dating Apps"
IMPORTANT_THEMES = "Digital Ethics, Online Safety, Inclusivity"
PROJECT_NAME = "Study on Light Triad Traits in Dating Apps"
STAKEHOLDER = "Users, Developers, Advocacy Groups"
RESISTANT_STAKEHOLDER = "Platforms with outdated safety measures"
TASK = "Research and document the demographics of users inclined towards dating apps promoting light triad traits"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = None

# Additional variables
employability = "Researching and documenting the demographics of users inclined towards dating apps promoting light triad traits"
practical_skills = "Data analysis, User experience design"
creativity = "Identifying innovative solutions for promoting light triad traits in dating apps"
critical_thinking = "Evaluating the impact of technology on user safety and privacy"
fun_and_enjoyment = "Exploring the intersection of technology and user safety"
employee_guarantee = "A commitment to thorough research and accurate documentation"
collaboration = "Working with experts in digital ethics and online safety"
learning_outcomes = "Understanding the role of technology in user safety and privacy"
purpose = "To inform and inspire safer and more equitable online dating experiences"
learning_activities = "Researching digital ethics issues, Attending conferences on online safety"
course_content = "Digital ethics theories, Case studies of online safety challenges, Technological advancements in online dating"
course_assessments = "Writing assignments on digital ethics practices, Presentations on case studies"
course_schedule = "Bi-weekly online sessions"
course_sequencing = "Introduction to digital ethics, Case studies, Technological advancements"
technology_requirements = "Access to research databases, Internet access"
prerequisites = "Basic understanding of digital ethics and online safety"
audience = "Digital Ethics Advocates, Developers, Policy Makers"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = 'Male Indifference within Feminism'
RESEARCH_DOMAIN = 'Gender Studies'
PARAGRAPH = "The discourse on gender and identity, particularly in the context of feminism, often highlights the complexities of male indifference. This indifference is not merely a lack of engagement but a reflection of deeper societal and personal factors, including the challenges of expressing emotions, the hegemonic masculinity that values self-sufficiency, and the reliance on women for emotional support. Addressing these underlying issues is crucial for fostering empathy and understanding within the feminist movement and beyond."
PARAGRAPHS = 'The indifference of men within feminism is not simply a matter of quantity but a reflection of deeper societal and personal factors, including the challenges of expressing emotions, the hegemonic masculinity that values self-sufficiency, and the reliance on women for emotional support.'
TOPIC_SENTENCE = 'Understanding the root causes of male indifference within feminism is crucial for fostering meaningful dialogue and collaboration within the movement.'
LANGUAGE = 'English'
ABSTRACT_PARAGRAPH = 'This post explores the reasons behind male indifference within feminism, highlighting key factors such as societal norms of masculinity, emotional expression barriers, fear of social stigma, lack of emotional support networks, perceived threat to masculine identity, and hegemonic masculinity ideals.'
BIBLIOGRAPHY = 'Connell, R. W. (2005). Masculinities (2nd ed.). University of California Press.\nKimmel, M. S. (2013). Angry white men: American masculinity at the end of an era. Nation Books.\nLevant, R. F., et al. (2011). The Male Role Norms Inventory-Short Form (MRNI-SF): development, confirmatory factor analytic investigation of structure, and measurement invariance across gender. Journal of Counseling Psychology, 58(1), 33-43.\nSmiler, A. (2004). Thirty years after the discovery of gender: Psychological concepts and measures of masculinity. Sex Roles, 50(1-2), 15-26.\nFlood, M., & Pease, B. (2009). Factors influencing attitudes to violence against women. Trauma, Violence, & Abuse, 10(2), 125-142.\nConnell, R. W., & Messerschmidt, J. W. (2005). Hegemonic masculinity: Rethinking the concept. Gender & Society, 19(6), 829-859.\nRisman, B. J. (1998). Gender vertigo: American families in transition. Yale University Press.'
THEORY1 = 'Hegemonic Masculinity'
THEORY2 = 'Gendered Division of Emotional Labor'
RESEARCH_QUESTIONS = ['What are the societal norms of masculinity that contribute to male indifference within feminism?', 'How do emotional expression barriers affect male engagement in feminism?', 'What role does fear of social stigma play in male indifference within feminism?', 'How does the lack of emotional support networks among men contribute to their indifference?', 'What is the perceived threat to masculine identity in the context of feminism?', 'How does hegemonic masculinity ideals influence male indifference within feminism?', 'How does the gendered division of emotional labor contribute to male indifference within feminism?']
ACTION = 'Addressing these underlying issues is crucial for fostering empathy and understanding within the feminist movement and beyond.'
RESULT_PARAGRAPHS = 'By acknowledging and addressing these challenges, we can work towards fostering a more inclusive and supportive environment for all genders within the feminist movement.'
DATE = '03/16/2024'
NUMBER_OF_DAYS_MONTHS_YEARS = '16 days'
ROLE = 'Researcher'
PROJECT_EXAMPLE = 'A study on the impact of societal norms of masculinity on male engagement in feminism.'
CONTEXT = 'The ongoing pursuit of gender equality'
INSTRUCTION = 'Explore the reasons behind male indifference within feminism and propose strategies to foster meaningful dialogue and collaboration within the movement.'
OUTPUT_FORMAT = 'Academic paper'
SPECIFIC_PROJECT_DETAILS = 'This project aims to delve into the complexities of male indifference within feminism, examining key factors and their implications for the movement.'
X = 'Male Indifference'
PROJECT_MANAGER = 'Dr. Jane Doe'
REPORT = 'Final Report on Male Indifference within Feminism'
IMPORTANT_THEMES = 'Gender Equality, Masculinity, Feminism, Emotional Support, Societal Norms'
PROJECT_NAME = 'Understanding Male Indifference within Feminism'
STAKEHOLDER = 'Feminist Movement, Men, Women'
RESISTANT_STAKEHOLDER = 'Hegemonic Masculinity Ideals'
TASK = 'Conducting a comprehensive analysis of male indifference within feminism'
YOUR_EMAIL = 'your.email@example.com'
OPENAI_API = None

# Additional variables
employability = 'High'
practical_skills = 'Research, Analysis, Writing'
creativity = 'Low'
critical_thinking = 'High'
fun_and_enjoyment = 'Low'
employee_guarantee = 'Yes'
collaboration = 'High'
learning_outcomes = 'Understanding of male indifference within feminism, strategies for fostering dialogue and collaboration.'
purpose = 'To contribute to the feminist movement by addressing male indifference.'
learning_activities = 'Literature review, data analysis, discussion forums'
course_content = 'Gender Studies, Feminism, Masculinity, Emotional Support'
course_assessments = 'Research paper, presentation, discussion participation'
course_schedule = 'Flexible, 6 months'
course_sequencing = 'Literature review, data analysis, discussion, paper writing'
technology_requirements = 'Access to academic databases, research software'
prerequisites = 'Basic understanding of gender studies'
audience = 'Academics, Feminist Activists'
topic = 'Male Indifference within Feminism'
field_of_study = 'Gender Studies'
specific_project = 'A study on the impact of societal norms of masculinity on male engagement in feminism.'

TOPIC = 'Islamofascism: Deception and Manipulation in Media and Society'
RESEARCH_DOMAIN = 'Media Studies'
PARAGRAPH = "Islamofascism, a term blending fascism with Islamic ideology, is on the rise in digital and social spaces. This phenomenon is characterized by followers, often labeled as trolls, who employ a myriad of tactics to manipulate truth, spread misinformation, and foster division. These tactics range from misrepresentation and omission to exaggeration and gaslighting, aiming to skew narratives, confuse audiences, and undermine the integrity of public discourse. By understanding these tactics, we can better equip journalists, media organizations, and the public to resist the spread of misinformation and hate, working towards a more informed and empathetic society."
PARAGRAPHS = "These techniques are not only harmful to the individuals and communities they target but also undermine the integrity of public discourse and the media. It's crucial for journalists, media organizations, and the public to be aware of these tactics and to resist the spread of misinformation and hate. By understanding and exposing these tactics, we can work towards a more informed and empathetic society."
TOPIC_SENTENCE = "Understanding the tactics of Islamofascism is crucial for fostering a more informed and empathetic society, resisting the spread of misinformation and hate."
LANGUAGE = 'English'
ABSTRACT_PARAGRAPH = "This post explores the 20 techniques used by Islamofascist trolls in the media and society, aiming to expose and understand these tactics to counteract their harmful effects on public discourse and individual communities."
BIBLIOGRAPHY = ''
THEORY1 = 'Trolling'
THEORY2 = 'Misinformation'
RESEARCH_QUESTIONS = [
    'What are the 20 techniques used by Islamofascist trolls in the media and society?',
    'How do these techniques manipulate truth and spread misinformation?',
    'What role do social media platforms play in the spread of Islamofascist narratives?',
    'How can journalists and media organizations resist the spread of Islamofascist misinformation?'
]
ACTION = 'Awareness and education are key to resisting the spread of Islamofascist misinformation and hate.'
RESULT_PARAGRAPHS = 'By understanding and exposing these tactics, we can work towards a more informed and empathetic society, fostering a culture of critical thinking and resistance against manipulation.'
DATE = '04/17/2024'
NUMBER_OF_DAYS_MONTHS_YEARS = '17 days'
ROLE = 'Researcher'
PROJECT_EXAMPLE = 'A study on the tactics of Islamofascist trolls in the media and society.'
CONTEXT = 'The digital and social spheres'
INSTRUCTION = 'Explore the tactics of Islamofascist trolls and propose strategies to counteract their harmful effects on public discourse and individual communities.'
OUTPUT_FORMAT = 'Academic paper'
SPECIFIC_PROJECT_DETAILS = 'This project aims to delve into the tactics of Islamofascist trolls, examining their methods and implications for society.'
X = 'Islamofascism'
PROJECT_MANAGER = 'Dr. John Doe'
REPORT = 'Final Report on Islamofascism: Deception and Manipulation in Media and Society'
IMPORTANT_THEMES = 'Media Studies, Trolling, Misinformation, Digital and Social Spheres'
PROJECT_NAME = 'Understanding Islamofascism: Deception and Manipulation'
STAKEHOLDER = 'Journalists, Media Organizations, Public'
RESISTANT_STAKEHOLDER = 'Islamofascist Trolls'
TASK = 'Conducting a comprehensive analysis of Islamofascist trolls and their tactics.'
YOUR_EMAIL = 'your.email@example.com'
OPENAI_API = None

# Additional variables
employability = 'High'
practical_skills = 'Research, Analysis, Writing'
creativity = 'Low'
critical_thinking = 'High'
fun_and_enjoyment = 'Low'
employee_guarantee = 'Yes'
collaboration = 'High'
learning_outcomes = 'Understanding of Islamofascist trolls and their tactics, strategies for counteracting misinformation.'
purpose = 'To contribute to the fight against Islamofascist misinformation and hate.'
learning_activities = 'Literature review, data analysis, discussion forums'
course_content = 'Media Studies, Trolling, Misinformation'
course_assessments = 'Research paper, presentation, discussion participation'
course_schedule = 'Flexible, 6 months'
course_sequencing = 'Literature review, data analysis, discussion, paper writing'
technology_requirements = 'Access to academic databases, research software'
prerequisites = 'Basic understanding of media studies'
audience = 'Academics, Journalists, Media Professionals'
topic = 'Islamofascism: Deception and Manipulation in Media and Society'
field_of_study = 'Media Studies'
specific_project = 'A study on the tactics of Islamofascist trolls in the media and society.'

TOPIC = "Unmasking Medical Fraud: The Case of Dr. Hessieni Hoshiar and the Betrayal of Trust Through Misdiagnosis and Denial of Effective Treatments"
RESEARCH_DOMAIN = "Medical Ethics and Patient Care"
PARAGRAPH = """
In the complex landscape of medical ethics, the case of Dr. Hessieni Hoshiar illuminates the devastating consequences of medical fraud and misdiagnosis, particularly in the context of treating schizophrenia. This narrative unfolds through a recorded treatment session, revealing a pattern of professional misconduct that extends beyond mere misdiagnosis to include the denial of effective treatments and the infliction of unnecessary harm on patients and their families. A critical juncture in the case is captured in a recorded treatment session, where Dr. Hessieni Hoshiar pressures the patient to continue taking medication prescribed for schizophrenia despite the patient's expressed preference for Cognitive Behavioral Therapy (CBT). The patient, having ingested the prescribed medication for several years without experiencing any beneficial outcomes, advocates for CBT—a treatment modality scientifically validated for reducing anxiety and improving outcomes in schizophrenia patients. However, Dr. Hoshiar dismisses CBT as ineffective, asserting that it should not be considered a viable treatment option for schizophrenia. Contrary to Dr. Hoshiar's assertions, the Diagnostic and Statistical Manual of Mental Disorders, Fifth Edition (DSM-5) suggests that CBT can be an effective treatment for schizophrenia, especially when traditional medications are not accepted or tolerated by the patient. The manual outlines strategies for engaging patients who may resist medication, including the use of CBT to build trust and reduce anxiety. The ethical failure becomes evident as the patient and their family challenge Dr. Hoshiar's diagnosis and treatment recommendations. The patient asserts that the diagnosis of schizophrenia was incorrect and that the cessation of CBT represents a deliberate attempt by Dr. Hoshiar to cause harm. This assertion is grounded in the belief that Dr. Hoshiar's actions reflect a disregard for patient welfare and a sadistic inclination to inflict pain and distress on the patient and their family, constituting a clear act of medical fraud. The case underscores the urgent need for accountability within the medical profession and the establishment of robust oversight mechanisms to prevent such misconduct. It highlights the importance of adhering to ethical standards and prioritizing patient welfare over personal preferences or convenience. Furthermore, it emphasizes the necessity of legal protections for patients against medical misconduct and the importance of educating healthcare professionals about the latest scientific advancements in mental health treatment. The case serves as a stark reminder of the human cost of medical fraud and the devastating impact of misdiagnosis on patients' lives. It calls for a reevaluation of the standards and practices within the medical profession, emphasizing the necessity of integrity, transparency, and compassion in patient care. Through this case, we hope to shed light on the critical need for vigilance and action against medical misconduct, advocating for justice and reform in healthcare.
"""

PARAGRAPHS = """
A critical juncture in the case is captured in a recorded treatment session, where Dr. Hessieni Hoshiar pressures the patient to continue taking medication prescribed for schizophrenia despite the patient's expressed preference for Cognitive Behavioral Therapy (CBT). The patient, having ingested the prescribed medication for several years without experiencing any beneficial outcomes, advocates for CBT—a treatment modality scientifically validated for reducing anxiety and improving outcomes in schizophrenia patients. However, Dr. Hoshiar dismisses CBT as ineffective, asserting that it should not be considered a viable treatment option for schizophrenia.
"""
TOPIC_SENTENCE = "The focus is on understanding the devastating consequences of medical fraud and misdiagnosis through the case of Dr. Hessieni Hoshiar, particularly in treating schizophrenia."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This study explores the case of Dr. Hessieni Hoshiar, highlighting the consequences of medical fraud and misdiagnosis in treating schizophrenia, emphasizing the need for ethical accountability and patient-centered care."
BIBLIOGRAPHY = "Refer to the Phind search results for more details on the consequences of medical fraud and misdiagnosis in treating schizophrenia."
THEORY1 = "Medical Ethics"
THEORY2 = "Patient Care"
RESEARCH_QUESTIONS = [
    "What are the ethical implications of misdiagnosis and denial of effective treatments in medical practice?",
    "How can healthcare systems ensure accountability and prevent medical fraud?"
]
ACTION = "Develop strategies for healthcare systems to ensure accountability and prevent medical fraud, promoting ethical patient care."
RESULT_PARAGRAPHS = "The investigation into Dr. Hessieni Hoshiar's case reveals a need for robust oversight mechanisms and ethical standards in the medical profession to prevent misdiagnosis and denial of effective treatments."
DATE = "March 14, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "3 months"
ROLE = "Medical Ethics Advocate"
PROJECT_EXAMPLE = "Development of guidelines for ethical patient care and accountability in medical practice"
CONTEXT = "Medical Ethics and Patient Care"
INSTRUCTION = "Conduct research on the ethical implications of misdiagnosis and denial of effective treatments in medical practice, and propose solutions."
OUTPUT_FORMAT = "Research Report"
SPECIFIC_PROJECT_DETAILS = "A study on understanding and preventing medical fraud and misdiagnosis in treating schizophrenia."
X = "Number of actionable recommendations"
PROJECT_MANAGER = "Medical Ethics Advocate's Name"
REPORT = "Report on Medical Fraud and Misdiagnosis in Treating Schizophrenia"
IMPORTANT_THEMES = "Medical Ethics, Patient Care, Accountability"
PROJECT_NAME = "Study on Medical Fraud and Misdiagnosis in Treating Schizophrenia"
STAKEHOLDER = "Patients, Healthcare Providers, Regulatory Bodies"
RESISTANT_STAKEHOLDER = "Practitioners with outdated or unethical practices"
TASK = "Research and document the ethical implications of misdiagnosis and denial of effective treatments in medical practice"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = None

employability = "Researching and documenting the ethical implications of misdiagnosis and denial of effective treatments in medical practice"
practical_skills = "Data analysis, Ethical assessment"
creativity = "Identifying innovative solutions for preventing medical fraud and misdiagnosis"
critical_thinking = "Evaluating the impact of medical practices on patient care and safety"
fun_and_enjoyment = "Exploring the intersection of ethics and healthcare"
employee_guarantee = "A commitment to thorough research and accurate documentation"
collaboration = "Working with experts in medical ethics and patient care"
learning_outcomes = "Understanding the role of ethics in healthcare and patient safety"
purpose = "To inform and inspire ethical and patient-centered practices in healthcare"
learning_activities = "Researching medical ethics issues, Attending conferences on patient care"
course_content = "Medical ethics theories, Case studies of medical misconduct, Strategies for ethical patient care"
course_assessments = "Writing assignments on ethical practices, Presentations on case studies"
course_schedule = "Bi-weekly online sessions"
course_sequencing = "Introduction to medical ethics, Case studies, Strategies for ethical care"
technology_requirements = "Access to research databases, Internet access"
prerequisites = "Basic understanding of medical ethics and patient care"
audience = "Medical Ethics Advocates, Healthcare Providers, Policy Makers"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME

TOPIC = "AI-Powered Grant Consulting Platform"
RESEARCH_DOMAIN = "Computer Science and Artificial Intelligence"
PARAGRAPH = """
The proposed AI-powered grant consulting platform integrates advanced AI features with personalized consulting services to streamline the grant application process. It acts as a virtual consultant, offering tailored advice and sophisticated AI tools to enhance user experience for both grant seekers and providers.

Key features include an AI-powered grant search engine, consulting AI modules (Business Plan Generator, Proposal Writer, Financial Budgeting Tool), an AI-based matchmaking system, a Knowledge Hub with tutorials and guides, AI-powered form assistance, and community collaboration tools. The platform utilizes various AI technologies like NLP and machine learning algorithms to provide personalized assistance, aiming to reduce complexity and improve chances of success in grant applications.
"""

PARAGRAPHS = """
The platform combines the functionalities of a consulting service with AI-driven features to efficiently connect grant seekers and providers. It can act as a virtual consultant, streamlining the grant application process, offering tailored advice, and providing advanced AI tools to enhance user experience.
"""
TOPIC_SENTENCE = "An AI-powered grant consulting platform that streamlines the grant application process and provides personalized assistance to both grant seekers and providers."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This study proposes an AI-driven grant consulting platform that integrates advanced AI tools with personalized consulting services to streamline the grant application process and enhance user experience."
BIBLIOGRAPHY = "N"
THEORY1 = "AI in Business Consulting"
THEORY2 = "Grant Application Process Optimization"
RESEARCH_QUESTIONS = [
    "How can AI be effectively integrated into a grant consulting platform?",
    "What features should an AI-powered grant consulting platform include to improve efficiency and effectiveness?"
]
ACTION = "Develop an AI-powered grant consulting platform that streamlines the grant application process and provides personalized assistance to users."
RESULT_PARAGRAPHS = "The proposed platform successfully integrates AI-driven features with consulting services, demonstrating improved efficiency and effectiveness in connecting grant seekers and providers."
DATE = "2024-02-12"
NUMBER_OF_DAYS_MONTHS_YEARS = "0 years"
ROLE = "Project Manager"
PROJECT_EXAMPLE = "Development of an AI-powered grant consulting platform"
CONTEXT = "Technology Integration in Grant Management"
INSTRUCTION = "Design and develop an AI-powered grant consulting platform that combines consulting services with AI-driven features to streamline the grant application process."
OUTPUT_FORMAT = "Technical Report"
SPECIFIC_PROJECT_DETAILS = "A study on developing an AI-powered grant consulting platform with integrated AI tools and consulting services."
X = 5
PROJECT_MANAGER = "John Doe"
REPORT = "Report on AI-Powered Grant Consulting Platform Development"
IMPORTANT_THEMES = ["Artificial Intelligence", "Grant Management", "Consulting Services"]
PROJECT_NAME = "AI-Powered Grant Consulting Platform"
STAKEHOLDER = "Grant Seekers, Grant Providers, Researchers, Startups"
RESISTANT_STAKEHOLDER = "Traditional consulting firms, Manual grant application processes"
TASK = "Research and development of an AI-powered grant consulting platform"
YOUR_EMAIL = "john.doe@example.com"
OPENAI_API = None

employability = "High"
practical_skills = ["Project Management", "AI Integration", "Grant Management"]
creativity = "High"
critical_thinking = "Very High"
fun_and_enjoyment = "Moderate"
employee_guarantee = "A commitment to thorough research and accurate implementation of AI-driven features"
collaboration = "High"
learning_outcomes = "Understanding of AI integration in business consulting and grant management"
purpose = "To develop an efficient and effective AI-powered grant consulting platform that enhances the grant application process."
learning_activities = "Research on AI technologies, Design workshops, Development sprints"
course_content = "AI fundamentals, Grant management principles, User interface design, Backend development"
course_assessments = "Project presentations, Code reviews, User feedback analysis"
course_schedule = "Monthly online sessions with bi-weekly check-ins"
course_sequencing = "Introduction to AI in grant management, Platform design, Feature development, Testing and iteration"
technology_requirements = "Access to cloud services (AWS, Google Cloud), AI model hosting (Hugging Face Spaces)"
prerequisites = "Basic understanding of AI concepts and software development"
audience = "Project Managers, Software Developers, AI Engineers, Grant Management Specialists"
topic = TOPIC
field_of_study = RESEARCH_DOMAIN
specific_project = PROJECT_NAME
search_results = []

TOPIC = "Enhancing Critical Thinking through Cognitive Immune System Frameworks"
RESEARCH_DOMAIN = "Cognitive Psychology and Education"
PARAGRAPH = """
This project aims to explore the parallels between cognitive and medical immune systems, focusing on how to reduce cognitive biases such as anchoring bias through targeted educational interventions.
"""
PARAGRAPHS = """
The cognitive immune system serves as a metaphorical framework that protects individuals from harmful ideas and misinformation. This project will implement methods from medical science to enhance critical thinking skills.
"""
TOPIC_SENTENCE = "Understanding the cognitive immune system can provide insights into improving critical thinking and reducing cognitive biases."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This research examines the relationship between the cognitive immune system and critical thinking, particularly addressing cognitive biases like anchoring bias. By drawing parallels with the medical immune system, we propose educational strategies to enhance critical thinking skills among individuals."
BIBLIOGRAPHY = "[1] Kahneman, D. (2011). Thinking, Fast and Slow. [2] Bandura, A. (1986). Social Foundations of Thought and Action: A Social Cognitive Theory."
THEORY1 = "Cognitive Bias Theory"
THEORY2 = "Social Cognitive Theory"
RESEARCH_QUESTIONS = [
    "How do cognitive biases affect decision-making in individuals?",
    "What educational strategies can effectively reduce anchoring bias?",
    "How can the principles of the medical immune system inform cognitive training programs?"
]
ACTION = "Implement workshops and training sessions focused on critical thinking."
RESULT_PARAGRAPHS = """
The expected results include improved critical thinking skills among participants, reduced reliance on cognitive biases, and a more informed public capable of evaluating information critically.
"""
DATE = "2024-12-08"
NUMBER_OF_DAYS_MONTHS_YEARS = "6 months"
ROLE = "Project Coordinator"
PROJECT_EXAMPLE = "Development of a curriculum for critical thinking training in high schools."
CONTEXT = "The project is set against the backdrop of rising misinformation in society and the need for enhanced critical thinking skills."
INSTRUCTION = "Create a comprehensive plan for implementing critical thinking education based on cognitive immune system principles."
OUTPUT_FORMAT = "Report and Curriculum Document"
SPECIFIC_PROJECT_DETAILS = "The project will include workshops, online courses, and community engagement activities aimed at improving critical thinking skills."
X = None
PROJECT_MANAGER = "Dr. Jane Doe"
REPORT = "Final report on the effectiveness of critical thinking training programs."
IMPORTANT_THEORIES = ["Cognitive Bias Theory", "Social Cognitive Theory"]
PROJECT_NAME = "Enhancing Critical Thinking through Cognitive Immune System Frameworks"
STAKEHOLDER = "Educators and Curriculum Developers"
RESISTANT_STAKEHOLDER = "Traditional Educators Resistant to Change"
TASK = "Develop and implement critical thinking training programs"
YOUR_EMAIL = "your.email@example.com"
OPENAI_API = None

employability = "High"
practical_skills = ["Critical Thinking", "Analytical Skills", "Problem Solving"]
creativity = "Moderate"
critical_thinking = "Very High"
fun_and_enjoyment = "Low"
employee_guarantee = "A commitment to thorough research and accurate representation of scientific concepts"
collaboration = "Medium"
learning_outcomes = ["Improved Critical Thinking", "Enhanced Decision-Making Skills"]
purpose = "To equip individuals with essential skills for navigating complex information landscapes."
learning_activities = ["Workshops", "Group Discussions", "Case Studies"]
course_content = ["Cognitive Biases", "Critical Thinking Techniques", "Real-World Applications"]
course_assessments = ["Quizzes", "Participation in Discussions", "Final Project"]
course_schedule = "Weekly sessions over 6 months"
course_sequencing = [
    "Introduction to Cognitive Biases",
    "Techniques for Critical Thinking",
    "Application of Skills in Real Life"
]
technology_requirements = ["Online Learning Platform", "Video Conferencing Tools", "Collaboration Software"]
prerequisites = "Basic Understanding of Psychology"
audience = "High School Students, Educators, Lifelong Learners"

# Additional variables:
search_results = None

TOPIC = "Italian Resistance Tactics vs. Mahsa Amini Movement Strategies"
RESEARCH_DOMAIN = "Politics and Social Movements"
PARAGRAPH = "The Italian Resistance tactics can be adapted to inform strategies for the Mahsa Amini movement, focusing on women's rights and democratic reforms."
PARAGRAPHS = [
    "The Italian Resistance tactics can be adapted to inform strategies for the Mahsa Amini movement, focusing on women's rights and democratic reforms.",
    "By leveraging local support networks, propaganda, and information dissemination, the Mahsa Amini movement can build momentum and challenge government control."
]
TOPIC_SENTENCE = "This paper examines the Italian Resistance tactics and their potential application to the Mahsa Amini movement."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "This paper explores the Italian Resistance tactics and their potential application to the Mahsa Amini movement, highlighting the importance of adapting strategies to maintain unity and achieve long-term goals."
BIBLIOGRAPHY = ["Antifa: The Anti-Fascist Handbook", "Italian Resistance Movement", "Total Resistance", "Guerrilla Warfare"]
THEORY1 = "Guerrilla Warfare Theory"
THEORY2 = "Social Movement Theory"
RESEARCH_QUESTIONS = [
    "How can the Italian Resistance tactics be adapted to inform strategies for the Mahsa Amini movement?",
    "What are the key factors that contribute to the success of social movements like the Mahsa Amini movement?"
]
ACTION = "Adapt Italian Resistance tactics to develop strategies for the Mahsa Amini movement"
RESULT_PARAGRAPHS = [
    "The adapted tactics can help the Mahsa Amini movement build momentum and challenge government control.",
    "The movement's success depends on maintaining unity, leveraging international support, and focusing on long-term goals despite short-term challenges."
]
DATE = "2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "Not specified"
ROLE = "Commander in the Mahsa Amini movement"
PROJECT_EXAMPLE = "Developing strategies for the Mahsa Amini movement using Italian Resistance tactics"
PROJECT_MANAGER = "Mahsa Amini Movement Leader"
YOUR_EMAIL = "mahsaaminimovement@email.com"
OPENAI_API = "api.openai.com/v1/engines"

employability = "The ability of individuals to gain and maintain employment in the context of social movements"
practical_skills = "Skills such as leadership, organization, and communication that are essential for social movement success"
creativity = "The ability to think outside the box and develop innovative strategies for social movement success"
critical_thinking = "The ability to analyze information and make informed decisions in the context of social movements"
employee_guarantee = "Job security and career advancement opportunities for social movement activists"
collaboration = "The ability to work effectively with others to achieve common goals in social movements"
learning_outcomes = ["Understand the Italian Resistance tactics and their potential application to the Mahsa Amini movement",
                    "Develop strategies for social movement success"]
purpose = "To examine the Italian Resistance tactics and their potential application to the Mahsa Amini movement"
learning_activities = ["Analyzing the Italian Resistance tactics", "Developing strategies for social movement success"]
course_content = ["Italian Resistance tactics", "Social movement theory", "Guerrilla warfare"]
course_assessments = ["Written assignments", "Group projects"]
course_schedule = "Weekly classes for 3 months"
course_sequencing = "Introduction to Italian Resistance tactics, social movement theory, and guerrilla warfare, followed by strategy development and implementation"
technology_requirements = "Computer with internet access"
prerequisites = "None"
audience = "Women's rights activists, democratic reform advocates, and international supporters"
search_results = ["Italian Resistance movement", "Mahsa Amini movement", "Guerrilla warfare", "Social movement theory"]

IMPORTANT_THEORIES = ["Guerrilla Warfare Theory", "Social Movement Theory"]
PROJECT_NAME = "Mahsa Amini Movement Strategies"
STAKEHOLDER = "Women's rights activists, democratic reform advocates, and international supporters"
RESISTANT_STAKEHOLDER = "Government authorities"
TASK = "Adapt Italian Resistance tactics to develop strategies for the Mahsa Amini movement"
X = "Italian Resistance tactics"
REPORT = "Italian Resistance Tactics vs. Mahsa Amini Movement Strategies"

TOPIC = "Leveraging AI for Business Planning and Investment Facilitation"
RESEARCH_DOMAIN = "Artificial Intelligence in Business Strategy"
PARAGRAPH = "This project utilizes AI technology to assist companies in generating tailored business plans and connecting them with potential investors."
PARAGRAPHS = [
    "The project aims to leverage advanced AI models, specifically Hugging Face, to create comprehensive business plans.",
    "By analyzing market trends and sizes, the AI can suggest promising fields for R&D investment.",
    "The initiative also focuses on generating various types of reports, including pitch decks and feasibility studies.",
    "Additionally, it facilitates networking opportunities between companies and investors before major exhibitions."
]
TOPIC_SENTENCE = "This project represents a transformative approach to how companies prepare for investment opportunities using AI technology."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "The project aims to utilize Hugging Face models to streamline the creation of business plans and reports, enhancing companies' ability to secure investments."
BIBLIOGRAPHY = "Not provided in the content"
THEORY1 = "AI-driven business planning"
THEORY2 = "Market analysis using AI tools"
RESEARCH_QUESTIONS = [
    "How can AI enhance the process of creating business plans?",
    "What are the best practices for connecting companies with investors using AI?"
]
ACTION = "Implementing AI solutions for business plan generation and investor networking."
RESULT_PARAGRAPHS = [
    "The project is expected to improve the chances of securing funding for Iranian companies.",
    "By providing tailored reports and analyses, businesses can make informed decisions regarding R&D investments."
]
DATE = "December 09, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "0 days (specific to today's date)"
ROLE = "Project Manager/AI Specialist"
PROJECT_EXAMPLE = "Using Hugging Face models to generate customized business plans and investment proposals."
CONTEXT = "Enhancing international trade opportunities for Iranian companies through technology."
INSTRUCTION = "Follow the outlined steps to utilize AI in creating business documentation and facilitating investor connections."
OUTPUT_FORMAT = "Comprehensive reports including business plans, pitch decks, and feasibility studies."
SPECIFIC_PROJECT_DETAILS = [
    "Utilization of Hugging Face models for report generation.",
    "Integration of market analysis tools for data-driven insights."
]
X = "Not specified in the content"
PROJECT_MANAGER = "Not specified in the content"
REPORT = "Detailed reports generated by AI models that outline business strategies and market opportunities."
IMPORTANT_THEORIES = [
    "Data automation in business planning",
    "Psychological principles in presentations"
]
PROJECT_NAME = "AI-Driven Business Planning and Investment Facilitation Project"
STAKEHOLDER = "Iranian companies seeking investment opportunities."
RESISTANT_STAKEHOLDER = "Traditional businesses hesitant to adopt new technologies."
TASK = "Automate report generation and facilitate connections with investors through AI tools."

# Educational Variables
YOUR_EMAIL = "not_provided@example.com"  # Placeholder; replace with actual email if needed
OPENAI_API = "not_specified"  # Placeholder; specify if relevant

# Learning Outcomes
employability = "Enhancing employability skills relevant to international business through practical training."
practical_skills = "Development of practical skills applicable in real-world scenarios related to market analysis."
creativity = "Encouragement of creative approaches in solving trade-related challenges."
critical_thinking = "Fostering critical thinking skills necessary for analyzing market data effectively."
employee_guarantee = "No guarantee of employment; however, skills gained will improve job prospects."
collaboration = "Emphasis on collaborative projects that simulate real-world business environments."
learning_outcomes = [
    "Improved understanding of international trade dynamics.",
    "Enhanced ability to leverage technology for business growth."
]
purpose = "To provide Iranian companies with actionable insights for expanding their global reach through effective planning."
learning_activities = [
    "Workshops on market analysis using AI tools.",
    "Sessions on competitor analysis techniques."
]
course_content = [
    "Introduction to International Trade",
    "AI Tools for Market Analysis",
    "Data Visualization Techniques"
]
course_assessments = [
    "Project-based assessments on trade report generation.",
    "Quizzes on market trends and competitor analysis."
]
course_schedule = {
    'Week 1': 'Introduction to International Trade',
    'Week 2': 'Using AI Tools for Market Analysis',
    'Week 3': 'Competitor Analysis Techniques',
}
course_sequencing = [
    'Introduction',
    'Market Analysis',
    'Competitor Analysis',
    'Report Generation'
]
technology_requirements = [
    'Access to OpenAI API',
    'Google Analytics account',
    'Python programming environment'
]
prerequisites = [
    'Basic understanding of international trade concepts',
    'Familiarity with Python programming'
]
audience = [
    'Business professionals in Iran',
    'Entrepreneurs seeking to enter international markets'
]
search_results = []  # Placeholder if search results need to be filled later

TOPIC = "Political Economy of Renewable Energy and Scenarios for Iran in the Energy Transition to 2050 Outlook"
RESEARCH_DOMAIN = "Energy Economics, Renewable Energy Policy"
PARAGRAPH = "The article explores the geopolitical implications of renewable energy transitions in Iran, focusing on its economic dependency on fossil fuels."
PARAGRAPHS = "The study is structured into several sections, including an introduction to renewable energy trends, scenario planning for Iran's energy future, and policy recommendations."
TOPIC_SENTENCE = "This research examines how Iran can navigate its energy transition amidst global shifts towards renewable resources."
LANGUAGE = "English"
ABSTRACT_PARAGRAPH = "In recent years, the share of renewables in the global energy basket has increased significantly. This will have geopolitical consequences, especially for a country like Iran, whose economy is largely dependent on fossil fuel revenues. The main question is: how will Iran position itself in the global energy transition outlook to 2050?"
BIBLIOGRAPHY = "Esmaili Ardakani, A., & Shokri, M. (2023). Political Economy of Renewable Energy and Scenarios for Iran in the Energy Transition to 2050 Outlook. Iranian Energy Economics, 45(12), 11-39."
THEORY1 = "Scenario Planning Theory"
THEORY2 = "Political Economy Theory"
RESEARCH_QUESTIONS = "How will Iran position itself in the global energy transition? What are the potential scenarios for Iran's energy future?"
ACTION = "Analyze scenarios and assess their implications for policy-making in Iran's energy sector."
RESULT_PARAGRAPHS = "The research identifies four potential scenarios for Iran's energy transition: sustainable development, gradual transition, reliance on fossil fuels, and a locked-in fossil fuel economy."
DATE = "December 10, 2024"
NUMBER_OF_DAYS_MONTHS_YEARS = "1 year"
ROLE = "Researcher and Policy Analyst"
PROJECT_EXAMPLE = "Analysis of renewable energy policies in Middle Eastern countries."
CONTEXT = "The geopolitical landscape of energy is changing with increasing reliance on renewable sources globally."
INSTRUCTION = "Fill out the variables based on the attached research paper."
OUTPUT_FORMAT = "Markdown format with clear headings and sections."
SPECIFIC_PROJECT_DETAILS = "Focus on Iran's unique challenges and opportunities in transitioning to renewable energy sources."
X = "N/A"
PROJECT_MANAGER = "Ali Esmaeili Ardakani"
REPORT = "Comprehensive analysis of renewable energy scenarios for Iran."
IMPORTANT_THEORIES = "Geopolitical implications of energy transitions; scenario planning methodologies."
PROJECT_NAME = "Scenarios for Iran's Energy Transition to 2050"
STAKEHOLDER = "Iranian government and policymakers"
RESISTANT_STAKEHOLDER = "Fossil fuel industry stakeholders"
TASK = "Conduct a thorough analysis of potential energy scenarios and their implications for policy."
YOUR_EMAIL = "morteza.shokri63@gmail.com"
OPENAI_API = "N/A"

employability = "Enhancing workforce skills through renewable energy education programs."
practical_skills = "Development of technical skills related to renewable technologies."
creativity = "Encouraging innovative solutions for sustainable energy practices."
critical_thinking = "Analyzing complex scenarios and their impacts on national policy."
employee_guarantee = "Ensuring job security through investment in green technologies."
collaboration = "Fostering partnerships between government, industry, and academia to promote renewable initiatives."
learning_outcomes = "Understanding the dynamics of energy transitions and their socio-economic impacts."
purpose = "To provide insights into effective policy-making for a sustainable energy future in Iran."
learning_activities = "Workshops on scenario planning and renewable technology assessments."
course_content = "Topics include renewable energy technologies, economic impacts, and policy frameworks."
course_assessments = "Evaluations based on scenario analyses and policy recommendations."
course_schedule = "Bi-weekly sessions over three months focusing on different aspects of renewable energy transitions."
course_sequencing = "Introductory concepts followed by advanced scenario planning techniques and case studies."
technology_requirements = "Access to data analysis software and renewable technology simulation tools."
prerequisites = "Basic understanding of economics and environmental science principles."
audience = "Policymakers, researchers, and students interested in energy economics and sustainability issues."
search_results = ""

role = ROLE
project_example = PROJECT_EXAMPLE
context = CONTEXT
instruction = INSTRUCTION
specific_project_details = SPECIFIC_PROJECT_DETAILS
project_manager = PROJECT_MANAGER
report = REPORT
important_themes = IMPORTANT_THEMES
stakeholder = STAKEHOLDER
resistant_stakeholder = RESISTANT_STAKEHOLDER
#openai_api= OPENAI_API
Your_Email = YOUR_EMAIL
category= 'category'

variables = {
    "TOPIC": "Addressing Iran's Crises: Exploring Social Change Methodologies and Creating a Counter Profile",
    "RESEARCH_DOMAIN": "Sociology",
    "PARAGRAPH": "Iran's societal challenges are complex and require immediate attention. Engaging in research and working on solutions in this field can help address these issues. This course aims to equip students with the necessary tools and knowledge to navigate these challenges.",
    "PARAGRAPHS": "PARAGRAPH",
    "TOPIC_SENTENCE": "Understanding and addressing Iran's crisis is a critical aspect of sociology.",
    "LANGUAGE": "English",
    "ABSTRACT_PARAGRAPH": "This course explores the management of Iran's crises through engagement in research and charitable work...",
    "BIBLIOGRAPHY": "Source 0: https://www.csis.org/analysis/crisis-iran-what-now",
    "THEORY1": "Sociological Theory",
    "THEORY2": "Social Change Theory",
    "RESEARCH_QUESTIONS": "['What are the primary causes of Iran's crises?', 'How can research and charitable work help address these issues?']",
    "ACTION": "Research and discussion",
    "RESULT_PARAGRAPHS": "Results indicate that engaging in research and charitable work can significantly reduce the impacts of Iran's crises...",
    "DATE": "2023-12-30",
    "NUMBER_OF_DAYS_MONTHS_YEARS": "One year",
    "ROLE": "Researcher",
    "PROJECT_EXAMPLE": "Social Change Management Project",
    "CONTEXT": "Social Development",
    "INSTRUCTION": "Study and research on Iran's crises and their management",
    "OUTPUT_FORMAT": "Report",
    "SPECIFIC_PROJECT_DETAILS": "The focus of this project is to study Iran's crises and develop strategies for their management...",
    "X": "Iran's Crises Impacts",
    "PROJECT_MANAGER": "Your Name",
    "REPORT": "Detailed report on Iran's crisis research",
    "IMPORTANT_THEMES": "Social Change, Research, Charitable Work",
    "PROJECT_NAME": "Social Change Management Study",
    "STAKEHOLDER": "Social Scientists, Researchers",
    "RESISTANT_STAKEHOLDER": "N/A",
    "TASK": "Generate a report on Iran's crisis and its management",
    "YOUR_EMAIL": "your.email@example.com",
    "OPENAI_API": "openai_api",  # Replace with the actual OpenAI API key
    "category":"",

    "employability": "Prepare students for employment in fields such as social sciences, human rights, and international relations.",
    "practical_skills": "Develop practical skills in social analysis by focusing on the social, economic, and political concepts that can be applied across a wide range of sectors and industries.",
    "creativity": "Encourage creative thinking and problem-solving in developing social strategies for organizations.",
    "critical_thinking": "Foster critical thinking among students in analyzing social issues and formulating comprehensive solutions.",
    "fun_and_enjoyment": "Make the course engaging with online lectures, discussions, and assignments, offering flexibility for students.",
    "employee_guarantee": "Provide a guarantee for successful course completion by ensuring comprehensive coverage of key social topics.",
    "collaboration": "Encourage collaboration among students in online forums and group projects.",
    "learning_outcomes": "By the end of the course, students should be able to communicate complex social issues, analyze evidence to formulate social strategies, and lead social initiatives at local, national, and global levels.",
    "purpose": "The purpose of this course is to equip students with the knowledge and skills necessary to advance their career in social sciences.",
    "learning_activities": "Activities will include online lectures, discussions, assignments, and a capstone project where students help a real organization solve an existing social problem.",
    "course_content": "The main topics covered in the course will include the relationship of humans with the natural environment, public policy and the role of government and business in social sciences, triple bottom line accounting, and social change.",
    "course_assessments": "Student performance will be evaluated through assignments, group projects, and a capstone project.",
    "course_schedule": "The course is delivered online and students can do homework whenever it’s convenient for them. The program also provides optional networking opportunities for students to connect virtually with peers, faculty, and professionals.",
    "course_sequencing": "The course content will be sequenced to gradually increase in complexity, starting with an introduction to social sciences, moving on to more advanced topics, and ending with a capstone project.",
    "technology_requirements": "Students will need access to a computer with internet connectivity. If software or special technology is required in one of the..."
}

variables = {
    "TOPIC": f"{TOPIC}",
    "RESEARCH_DOMAIN": f"{RESEARCH_DOMAIN}",
    "PARAGRAPH": f"{PARAGRAPH}",
    "PARAGRAPHS": f"{PARAGRAPHS}",
    "TOPIC_SENTENCE": f"{TOPIC_SENTENCE}",
    "LANGUAGE": f"{LANGUAGE}",
    "ABSTRACT_PARAGRAPH": f"{ABSTRACT_PARAGRAPH}",
    "BIBLIOGRAPHY": f"{BIBLIOGRAPHY}",
    "THEORY1": f"{THEORY1}",
    "THEORY2": f"{THEORY2}",
    "RESEARCH_QUESTIONS": f"{RESEARCH_QUESTIONS}",
    "ACTION": f"{ACTION}",
    "RESULT_PARAGRAPHS": f"{RESULT_PARAGRAPHS}",
    "DATE": f"{DATE}",
    "NUMBER_OF_DAYS_MONTHS_YEARS": f"{NUMBER_OF_DAYS_MONTHS_YEARS}",
    "ROLE": f"{ROLE}",
    "PROJECT_EXAMPLE": f"{PROJECT_EXAMPLE}",
    "CONTEXT": f"{CONTEXT}",
    "INSTRUCTION": f"{INSTRUCTION}",
    "OUTPUT_FORMAT": f"{OUTPUT_FORMAT}",
    "SPECIFIC_PROJECT_DETAILS": f"{SPECIFIC_PROJECT_DETAILS}",
    "X": f"{X}",
    "PROJECT_MANAGER": f"{PROJECT_MANAGER}",
    "REPORT": f"{REPORT}",
    "IMPORTANT_THEMES": f"{IMPORTANT_THEMES}",
    "PROJECT_NAME": f"{PROJECT_NAME}",
    "STAKEHOLDER": f"{STAKEHOLDER}",
    "RESISTANT_STAKEHOLDER": f"{RESISTANT_STAKEHOLDER}",
    "TASK": f"{TASK}",
    "YOUR_EMAIL": f"{YOUR_EMAIL}",
    "OPENAI_API": f"{OPENAI_API}",  # Replace with the actual OpenAI API key
    "category":f"{category}",

    "employability": f"{employability}",
    "practical_skills": f"{practical_skills}",
    "creativity": f"{creativity}",
    "critical_thinking": f"{critical_thinking}",
    "fun_and_enjoyment": f"{fun_and_enjoyment}",
    "employee_guarantee": f"{employee_guarantee}",
    "collaboration": f"{collaboration}",
    "learning_outcomes": f"{learning_outcomes}",
    "purpose": f"{purpose}",
    "learning_activities": f"{learning_activities}",
    "course_content": f"{course_content}",
    "course_assessments": f"{course_assessments}",
    "course_schedule": f"{course_schedule}",
    "course_sequencing": f"{course_sequencing}",
    "technology_requirements": f"{technology_requirements}",
    "prerequisites": f"{prerequisites}",

    "topic": f"{topic}",
    "field_of_study": f"{field_of_study}",
    "audience": f"{audience}",
    "specific_project": f"{specific_project}",
}

dvar_questions = {
    "TOPIC": "What is the main topic or focus of the content?",
    "RESEARCH_DOMAIN": "Which field or domain does the research focus on?",
    "PARAGRAPH": "Can you provide a summary of the paragraph?",
    "PARAGRAPHS": "How are paragraphs represented in the content?",
    "TOPIC_SENTENCE": "What is the main sentence summarizing the topic?",
    "LANGUAGE": "In which language is the content written?",
    "ABSTRACT_PARAGRAPH": "Can you summarize the abstract paragraph?",
    "BIBLIOGRAPHY": "What sources are included in the bibliography?",
    "THEORY1": "What is covered under the first theory?",
    "THEORY2": "What is covered under the second theory?",
    "THEORY2 & THEORY1": ["What is covered under the first theory?","What is covered under the second theory?"],
    "RESEARCH_QUESTIONS": "What are the primary research questions?",
    "ACTION": "What actions are involved in the research and discussion?",
    "RESULT_PARAGRAPHS": "What are the key results mentioned in the paragraphs?",
    "DATE": "What is the date mentioned for the research?",
    "NUMBER_OF_DAYS_MONTHS_YEARS": "What is the duration specified in terms of days, months, or years?",
    "ROLE": "What is the role of a researcher?",
    "PROJECT_EXAMPLE": "Can you provide an example of a project?",
    "CONTEXT": "What is the context of the topic?",
    "INSTRUCTION": "What is instructed for the study and research?",
    "OUTPUT_FORMAT": "In what format is the report expected?",
    "SPECIFIC_PROJECT_DETAILS": "Can you provide details on the focus of the project?",
    "X": "What are the impacts of the subject?",
    "PROJECT_MANAGER": "Who is the project manager?",
    "REPORT": "Can you describe the detailed report?",
    "IMPORTANT_THEMES": "What are the important themes related to the content?",
    "PROJECT_NAME": "What is the name of the project?",
    "STAKEHOLDER": "Who are the stakeholders?",
    "RESISTANT_STAKEHOLDER": "Is there any resistant stakeholder mentioned?",
    "TASK": "What is the task related to the subject?",
    "YOUR_EMAIL": "What is your email address?",
    #"OPENAI_API": "What is the OpenAI API key used for?",
    "employability": "How does the course prepare students for employment?",
    "practical_skills": "What practical skills are developed?",
    "creativity": "How is creative thinking encouraged?",
    "critical_thinking": "How is critical thinking fostered?",
    "fun_and_enjoyment": "How is the course made engaging?",
    "employee_guarantee": "What guarantee is provided for successful course completion?",
    "collaboration": "How is collaboration encouraged among students?",
    "learning_outcomes": "What are the expected learning outcomes?",
    "purpose": "What is the purpose of the course?",
    "learning_activities": "What activities are included in the course?",
    "course_content": "What are the main topics covered in the course?",
    "course_assessments": "How is student performance evaluated in the course?",
    "course_schedule": "How is the course delivered, and what flexibility is provided to students?",
    "course_sequencing": "How is the course content sequenced in terms of complexity?",
    "technology_requirements": "What technology requirements do students need?"
}

role = ROLE
project_example = PROJECT_EXAMPLE
context = CONTEXT
instruction = INSTRUCTION
specific_project_details = SPECIFIC_PROJECT_DETAILS
project_manager = PROJECT_MANAGER
report = REPORT
important_themes = IMPORTANT_THEMES
stakeholder = STAKEHOLDER
resistant_stakeholder = RESISTANT_STAKEHOLDER
#openai_api= OPENAI_API
Your_Email = YOUR_EMAIL
category = '{category}'

course_design_variables = {
    "employability": f"{employability}",
    "practical_skills": f"{practical_skills}",
    "creativity": f"{creativity}",
    "critical_thinking": f"{critical_thinking}",
    "fun_and_enjoyment": f"{fun_and_enjoyment}",
    "employee_guarantee": f"{employee_guarantee}",
    "collaboration": f"{collaboration}",
    "learning_outcomes": f"{learning_outcomes}",
    "purpose": f"{purpose}",
    "learning_activities": f"{learning_activities}",
    "course_content": f"{course_content}",
    "course_assessments": f"{course_assessments}",
    "course_schedule": f"{course_schedule}",
    "course_sequencing": f"{course_sequencing}",
    "technology_requirements": f"{technology_requirements}",
    "prerequisites": f"{prerequisites}",
    "topic": f"{TOPIC}",
    "field_of_study": f"{field_of_study}",
    "audience": f"{audience}",
    "specific_project": f"{specific_project}"
}





prompt_course_old = [
    f" As ChatGPT expert in the role of course designing as {role}, suggest one Course Title in less than 15 words, based on This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

    f"Step 1: As ChatGPT {role} in course designing Identify Situational Factors for {course_design_variables['specific_project']} by the topic of:((( {course_design_variables['topic']} ))",
    f"1. As ChatGPT {role} in course designing Understand the broader context of the {course_design_variables['field_of_study']} course for {course_design_variables['audience']} by the topic of:((( {course_design_variables['topic']} ))  and description of course_design_variables['specific_project'] ",
    f"2. As ChatGPT {role} in course designing Consider factors such as department or discipline, institution expectations, and student backgrounds and needs. Also, consider {course_design_variables['employability']} by the topic of:((( {course_design_variables['topic']} )) of the  {course_design_variables['field_of_study']}  and description of course_design_variables['specific_project'] ",
    f"3. As ChatGPT {role} in course designing Tailor the course content according to these factors to meet the needs of {course_design_variables['audience']}. {course_design_variables['practical_skills']} by the topic of:((( {course_design_variables['topic']} )) and description of course_design_variables['specific_project'] ",
    f"Step 2: As ChatGPT {role} in course designing Define Learning Outcomes by the topic of:((( {course_design_variables['topic']} )) and description of course_design_variables['specific_project'] ",
    f"4. As ChatGPT {role} in course designing Clearly articulate what you want your students to learn at the end of the {course_design_variables['topic']} course. {course_design_variables['learning_outcomes']} by the topic of:((( {course_design_variables['topic']} ))",
    f"5. As ChatGPT {role} in course designing Ensure these outcomes are measurable and directly related to the course content. by the topic of:((( {course_design_variables['topic']} ))",
    f"6. As ChatGPT {role} in course designing Align the learning outcomes with the educational objectives of the institution and the career goals of the students in the {course_design_variables['field_of_study']}. {course_design_variables['purpose']} by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 3: As ChatGPT {role} in course designing Create Assessments by the topic of:((( {course_design_variables['topic']} ))",
    f"7. As ChatGPT {role} in course designing Develop assessments that effectively measure whether students have achieved the learning outcomes. {course_design_variables['course_assessments']} by the topic of:((( {course_design_variables['topic']} ))",
    f"8. As ChatGPT {role} in course designing Include various types of assessments such as exams, projects, presentations, and group work. by the topic of:((( {course_design_variables['topic']} ))",
    f"9. As ChatGPT {role} in course designing Ensure the assessments are fair and accurately reflect the learning outcomes. Also, consider {course_design_variables['collaboration']} and {course_design_variables['fun_and_enjoyment']} by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 4: As ChatGPT {role} in course designing Plan Course Delivery by the topic of:((( {course_design_variables['topic']} ))",
    f"10. As ChatGPT {role} in course designing Decide on how you will deliver the {course_design_variables['field_of_study']} course content. {course_design_variables['learning_activities']} by the topic of:((( {course_design_variables['topic']} ))",
    f"11. As ChatGPT {role} in course designing Consider traditional lectures, discussions, labs, field trips, or a mix of these methods. by the topic of:((( {course_design_variables['topic']} ))",
    f"12. As ChatGPT {role} in course designing Choose the delivery method that best facilitates learning for your students in the {course_design_variables['audience']}. Also, consider {course_design_variables['course_schedule']} and {course_design_variables['course_sequencing']} by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 5: As ChatGPT {role} in course designing Incorporate Universal Design for Learning (UDL) by the topic of:((( {course_design_variables['topic']} ))",
    f"13. As ChatGPT {role} in course designing UDL is a framework for designing instruction that accommodates the wide range of learning preferences and abilities among {course_design_variables['audience']}. by the topic of:((( {course_design_variables['topic']} ))",
    f"14. As ChatGPT {role} in course designing Incorporate multiple modes of representation, expression, action, and engagement within the design of instruction. Also, consider {course_design_variables['technology_requirements']} by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 6: As ChatGPT {role} in course designing Experiential Learning by the topic of:((( {course_design_variables['topic']} ))",
    f"15. As ChatGPT {role} in course designing Tie theoretical knowledge to real-world experiences in the {course_design_variables['field_of_study']}. by the topic of:((( {course_design_variables['topic']} ))",
    f"16. As ChatGPT {role} in course designing For instance, in a {course_design_variables['field_of_study']} course, students could be asked to develop a {course_design_variables['specific_project']} or solve a real-world problem using the concepts they've learned. in the project field of {course_design_variables['specific_project']} by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 7: As ChatGPT {role} in course designing Active Training by the topic of:((( {course_design_variables['topic']} ))",
    f"17. As ChatGPT {role} in course designing Engage students in active learning activities that require them to construct new knowledge through thinking and discussion. {course_design_variables['critical_thinking']} by the topic of:((( {course_design_variables['topic']} ))",
    f"18. As ChatGPT {role} in course designing This could include problem-solving exercises, case studies, simulations, or debates. by the topic of:((( {course_design_variables['topic']} ))",
    f"Step 8: As ChatGPT {role} in course designing Measurable Trainings by the topic of:((( {course_design_variables['topic']} ))",
    f"19. As ChatGPT {role} in course designing Ensure that your course has clear learning objectives and that you have ways to measure whether these objectives have been achieved. Also, consider {course_design_variables['employee_guarantee']} and {course_design_variables['prerequisites']} by the topic of:((( {course_design_variables['topic']} ))",
    f"20. As ChatGPT {role} in course designing This could involve pre-tests and post-tests, assignments, projects"
]

prompt_course = [
    f" As ChatGPT expert in the role of course designing as {role}, suggest one Course Title in less than 15 words, based on This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

    f"Step 1: As ChatGPT {role} in course designing Identify Situational Factors for {course_design_variables['topic']} by the topic of:((( {course_design_variables['topic']} ))",
    f"1. As ChatGPT {role} in course designing Understand the broader context of the {course_design_variables['field_of_study']} course for {course_design_variables['audience']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"2. As ChatGPT {role} in course designing Consider factors such as department or discipline, institution expectations, and student backgrounds and needs. Also, consider {course_design_variables['employability']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"3. As ChatGPT {role} in course designing Tailor the course content according to these factors to meet the needs of {course_design_variables['audience']}. {course_design_variables['practical_skills']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"Step 2: As ChatGPT {role} in course designing Define Learning Outcomes by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"4. As ChatGPT {role} in course designing Clearly articulate what you want your students to learn at the end of the {course_design_variables['topic']} course. {course_design_variables['learning_outcomes']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"5. As ChatGPT {role} in course designing Ensure these outcomes are measurable and directly related to the course content. by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"6. As ChatGPT {role} in course designing Align the learning outcomes with the educational objectives of the institution and the career goals of the students in the {course_design_variables['field_of_study']}. {course_design_variables['purpose']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"Step 3: As ChatGPT {role} in course designing Create Assessments by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"7. As ChatGPT {role} in course designing Develop assessments that effectively measure whether students have achieved the learning outcomes. {course_design_variables['course_assessments']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"8. As ChatGPT {role} in course designing Include various types of assessments such as exams, projects, presentations, and group work. by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"9. As ChatGPT {role} in course designing Ensure the assessments are fair and accurately reflect the learning outcomes. Also, consider {course_design_variables['collaboration']} and {course_design_variables['fun_and_enjoyment']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",

    f"Step 4: As ChatGPT {role} in course designing Plan Course Delivery by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"10. As ChatGPT {role} in course designing Decide on how you will deliver the {course_design_variables['field_of_study']} course content. {course_design_variables['learning_activities']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"11. As ChatGPT {role} in course designing Consider traditional lectures, discussions, labs, field trips, or a mix of these methods. by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"12. As ChatGPT {role} in course designing Choose the delivery method that best facilitates learning for your students in the {course_design_variables['audience']}. Also, consider {course_design_variables['course_schedule']} and {course_design_variables['course_sequencing']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"Step 5:  As ChatGPT {role} in course designing Incorporate multiple modes of representation, expression, action, and engagement within the design of instruction. Also, consider {course_design_variables['technology_requirements']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"13. As ChatGPT {role} in course designing Incorporate Universal Design for Learning (UDL) in the {course_design_variables['field_of_study']}. by the topic of:((( {course_design_variables['topic']} )), by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"14. As ChatGPT {role} in course designing Incorporate multiple modes of representation, expression, action, and engagement within the design of instruction. Also, consider {course_design_variables['technology_requirements']} by the topic of:((( {course_design_variables['topic']} ))",

    f"16. As ChatGPT {role} in course designing Tie theoretical knowledge to real-world experiences in the {course_design_variables['field_of_study']}. by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"Step 6: As ChatGPT {role} in course designing Experiential Learning by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']} in the project field of {course_design_variables['specific_project']}",
    f"15. As ChatGPT {role} in course designing Tie theoretical knowledge to real-world experiences in the {course_design_variables['field_of_study']}. by the topic of:((( {course_design_variables['topic']} )) in the project field of {course_design_variables['specific_project']}",
    f"16. As ChatGPT {role} in course designing For instance, in a {course_design_variables['field_of_study']} course, students could be asked to develop a {course_design_variables['specific_project']} or solve a real-world problem using the concepts they've learned. in the project field of {course_design_variables['specific_project']} by the topic of:((( {course_design_variables['topic']} ))",
    f"17. As ChatGPT {role} in course designing Engage students in active learning activities that require them to construct new knowledge through thinking and discussion. {course_design_variables['critical_thinking']} by the topic of:((( {course_design_variables['topic']} )) in the project field of {course_design_variables['specific_project']}",
    f"18. As ChatGPT {role} in course designing This could include problem-solving exercises, case studies, simulations, or debates. by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"Step 7: As ChatGPT {role} in course designing Active Training by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"17. As ChatGPT {role} in course designing Engage students in active learning activities that require them to construct new knowledge through thinking and discussion. {course_design_variables['critical_thinking']} by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}",
    f"18. As ChatGPT {role} in course designing This could include problem-solving exercises, case studies, simulations, or debates. by the topic of:((( {course_design_variables['topic']} )) in the project field of {course_design_variables['specific_project']}",
    f"Step 8: As ChatGPT {role} in course designing Measurable Trainings by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
    f"19. As ChatGPT {role} in course designing Ensure that your course has clear learning objectives and that you have ways to measure whether these objectives have been achieved. Also, consider {course_design_variables['employee_guarantee']} and {course_design_variables['prerequisites']} by the topic of:((( {course_design_variables['topic']} )) in the project field of {course_design_variables['specific_project']}",
    f"20. As ChatGPT {role} in course designing This could involve pre-tests and post-tests, assignments, projects or other forms of assessment for topic  of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
]
prompt_course_presentation =[
# Plan/Presentation
  f"Step 9: As ChatGPT {role} in Curiculium designing publishing Curiculium design draft via internet by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
  f"21:.As ChatGPT role {role} in newspaper field, Write a sensational press release for this Curiculium designing and perviuse content made in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"22.As ChatGPT role of ({role}), Make this Curiculium designing, more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"23.As ChatGPT role of ({role}) in advertisment field, Write 3 tweeter post about this Curiculium designing, and this the perviuse contnet made?",
  f"24.As ChatGPT role of ({role}) in advertisment field, Write 3 Instagram post about this Curiculium designing, and this the perviuse contnet made?",
  f"25.As ChatGPT role of ({role}) in weblog writer, Write 1 medium weblog post about this Curiculium designing, and this the perviuse contnet made?",
  f"26.As ChatGPT role of ({role}) in bussiness post writing, Write 1 LinkedIn post about this Curiculium designing, and this the perviuse contnet made?",
  f"27. As ChatGPT role of ({role}) write an email to related organization for introducing the opportunity of coaporation with us in this field by seeing the above report and the related LinkedIn, tweeter, Instagram, medium and the pdf file of this report ",

]

# Assign the prompts
prompt_course_title = [
f" As ChatGPT expert in the role of course designing as {role}, suggest one Course Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",

 "Step 1: Identify key factors.",
 "1-1. Understand the course context.",
 "1-2. Consider department, expectations, student needs.",
 "1-3. Tailor content to these factors.",
 "Step 2: Define learning outcomes.",
 "2-1. State student learning objectives.",
 "2-2. Ensure measurable, relevant outcomes.",
 "2-3. Align outcomes with objectives, goals.",
 "Step 3: Develop effective assessments.",
 "3-1. Assessments should measure learning outcomes.",
 "3-2. Use varied types of assessments.",
 "3-3. Ensure fair, accurate assessments.",
 "Step 4: Plan course delivery.",
 "4-1. Decide course content delivery method.",
 "4-2. Consider varied delivery methods.",
 "4-3. Choose best delivery method.",
 "Step 5: Incorporate Universal Design for Learning.",
 "5-1. UDL accommodates diverse learning preferences.",
 "5-2. Incorporate varied instruction design modes.",
"5-3. Tie knowledge to real-world experiences.",
"Step 6: Incorporate experiential learning.",
 "6-1. Connect theory to real-world experiences.",
 "6-2. Use field-specific projects for application.",
f"6-3. Engage students in active learning activities for knowledge construction and discussion.",
f"6-4. Incorporate problem-solving exercises for interactive learning.",
"Step 7: Implement active training.",
 "7-1. Engage students in active learning.",
 "7-2. Use exercises, case studies, simulations.",
 "Step 8: Ensure measurable trainings.",
 "8-1. Course should have clear objectives.",
 "8-2. Measure objectives achievement effectively.",

]
prompt_course_presentation_title =[
 #Plan/Presentation
f"Episode 9-1: Write a sensational press release for this",
f"9-2 Make this more persuasive",
f"9-3 3 tweets about this Report:",

f"9-4 3 Instagram Post about this Report:",
f"9-5 Medium Post about this Report:",
f"9-6. LinkedIn Post about this Report:",
f"9-7. Organization email for request to do coaporation:",
]

# Assuming an average speaking speed of 150 words per minute
words_per_minute = 180

# Dialogue character variable
dialogue_character = " only two speaker whit name of So as first speaker by having medical doctor and climate change professional experience and the second person as radio speaker"

# Role variable
#role = ""
prompt_radio_script = [
f" As ChatGPT expert in the role of radio script wrtiter as {role}, suggest one Course Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

# Episode 1: "Understanding Climate Change"
f"As {role} in radio script writing, 1. Episode 1: Understanding Climate Change. Segment 1 (5 minutes): {dialogue_character}, discuss the basics of climate change, greenhouse gases, and the science behind global warming. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 2. Episode 1: Understanding Climate Change. Segment 2 (5 minutes): {dialogue_character}, provide real-life examples of climate change impacts, such as extreme weather events and sea-level rise. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 3. Episode 1: Understanding Climate Change. Segment 3 (5 minutes): {dialogue_character}, explain simple actions individuals can take to reduce their carbon footprint. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 2: "Climate Change and Health"
f"As  {role} in radio script writing, 4. Episode 2: Climate Change and Health. Segment 1 (5 minutes): {dialogue_character}, discuss the health impacts of climate change, including heat-related illnesses and the spread of diseases. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 5. Episode 2: Climate Change and Health. Segment 2 (5 minutes): {dialogue_character}, propose strategies for building climate-resilient healthcare systems. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 6. Episode 2: Climate Change and Health. Segment 3 (5 minutes): {dialogue_character}, offer tips for protecting personal health in a changing climate. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 3: "Sustainable Agriculture and Food Choices"
f"As  {role} in radio script writing, 7. Episode 3: Sustainable Agriculture and Food Choices. Segment 1 (5 minutes): {dialogue_character}, explain how climate change affects agriculture and food security. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 8. Episode 3: Sustainable Agriculture and Food Choices. Segment 2 (5 minutes): {dialogue_character}, showcase sustainable farming practices and local, eco-friendly food options. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 9. Episode 3: Sustainable Agriculture and Food Choices. Segment 3 (5 minutes): {dialogue_character}, provide tips for making sustainable food choices and reducing food waste. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 4: "Biodiversity and Ecosystems"
f"As  {role} in radio script writing, 10. Episode 4: Biodiversity and Ecosystems. Segment 1 (5 minutes): {dialogue_character}, discuss the importance of biodiversity in combating climate change. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 11. Episode 4: Biodiversity and Ecosystems. Segment 2 (5 minutes): {dialogue_character}, explore the impacts of climate change on ecosystems and wildlife. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 12. Episode 4: Biodiversity and Ecosystems. Segment 3 (5 minutes): {dialogue_character}, highlight conservation efforts and ways listeners can support biodiversity. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 5: "The Role of Renewable Energy"
f"As  {role} in radio script writing, 13. Episode 5: The Role of Renewable Energy. Segment 1 (5 minutes): {dialogue_character}, provide an overview of renewable energy sources and their importance in mitigating climate change. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 14. Episode 5: The Role of Renewable Energy. Segment 2 (5 minutes): {dialogue_character}, share success stories of communities or individuals transitioning to renewable energy. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 15. Episode 5: The Role of Renewable Energy. Segment 3 (5 minutes): {dialogue_character}, offer practical tips for incorporating renewable energy into daily life. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 6: "The Importance of Trees and Green Spaces"
f"As  {role} in radio script writing, 16. Episode 6: The Importance of Trees and Green Spaces. Segment 1 (5 minutes): {dialogue_character}, highlight the role of trees in carbon sequestration and air quality improvement. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 17. Episode 6: The Importance of Trees and Green Spaces. Segment 2 (5 minutes): {dialogue_character}, discuss community tree-planting initiatives and the benefits of urban green spaces. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 18. Episode 6: The Importance of Trees and Green Spaces. Segment 3 (5 minutes): {dialogue_character}, encourage listeners to participate in local tree-planting events and support green initiatives. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",

# Episode 7: "Consumerism and circular economy"
f"As  {role} in radio script writing, 19. Episode 7: Consumerism and circular economy. Segment 1 (5 minutes): {dialogue_character}, explore the specific impacts of consumerism on climate change. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 20. Episode 7: Consumerism and circular economy. Segment 2 (5 minutes): {dialogue_character}, explain the concept of the circular economy. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 21. Episode 7: Consumerism and circular economy. Segment 3 (5 minutes): {dialogue_character}, feature local initiatives and community-led projects. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",


# Episode 8: "Taking Action: Advocacy and Policy Changes”
f"As  {role} in radio script writing, 22. Episode 8: Taking Action: Advocacy and Policy Changes. Segment 1 (5 minutes): {dialogue_character}, profile successful climate change policies and initiatives. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 23. Episode 8: Taking Action: Advocacy and Policy Changes. Segment 2 (5 minutes): {dialogue_character}, discuss the importance of advocacy and policy changes in addressing climate change. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
f"As  {role} in radio script writing, 24. Episode 8: Taking Action: Advocacy and Policy Changes. Segment 3 (5 minutes): {dialogue_character}, suggest actionable steps to advocate for climate-friendly policies in their communities. TOPIC: {TOPIC}. DESCRIPTION: {PARAGRAPH}. Target Word Count: {5 * words_per_minute}.",
# End of the script
]
prompt_radio_script_presentation = [
# Plan/Presentation
  #f"Step 9: As ChatGPT {role} in radio broadcast publishing radio script draft via internet by the topic of:((( {TOPIC} )), in the project field of {PARAGRAPH}.",
  f"21:.As ChatGPT role {role} in newspaper field, Write a sensational press release for this radio script and perviuse content made in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"22.As ChatGPT role of ({role}), Make this radio script more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"23.As ChatGPT role of ({role}) in advertisment field, Write 3 tweeter post about this radio script, and this the perviuse contnet made?",
  f"24.As ChatGPT role of ({role}) in advertisment field, Write 3 Instagram post about this radio script,  and this the perviuse contnet made?",
  f"25.As ChatGPT role of ({role}) in weblog writer, Write 1 medium weblog post about this radio script, and this the perviuse contnet made?",
  f"26.As ChatGPT role of ({role}) in bussiness post writing, Write 1 LinkedIn post about this radio script, and this the perviuse contnet made?",
  f"27. As ChatGPT role of ({role}) write an email to related organization for introducing the opportunity of coaporation with us in this field by seeing the above report and the related LinkedIn, tweeter, Instagram, medium and the pdf file of this report ",

]


prompt_radio_script_title = [
    f" As ChatGPT expert in the role of radio script wrtiter as {role}, suggest one Course Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",

    # Episode 1: "Understanding Climate Change”
    "1-1. Basics of climate change and global warming.",
    "1-2. Real-life impacts like extreme weather events.",
    "1-3. Simple actions to reduce carbon footprint.",

    # Episode 2: "Climate Change and Health"
    "2-1. Health impacts, heat-related illnesses.",
    "2-2. Strategies for climate-resilient healthcare systems.",
    "2-3. Tips for personal health in changing climate.",

    # Episode 3: "Sustainable Agriculture and Food Choices"
    "3-1. Agriculture's impact on climate and food.",
    "3-2. Showcase sustainable farming and local food.",
    "3-3. Tips for sustainable food choices and waste.",

    # Episode 4: "Biodiversity and Ecosystems"
    "4-1. Importance of biodiversity in combating climate change.",
    "4-2. Explore impacts on ecosystems and wildlife.",
    "4-3. Highlight conservation efforts and support biodiversity.",

    # Episode 5: "The Role of Renewable Energy"
    "5-1. Overview of renewable energy sources.",
    "5-2. Success stories of renewable energy transition.",
    "5-3. Practical tips for incorporating renewable energy.",

    # Episode 6: "The Importance of Trees and Green Spaces"
    "6-1. Trees in carbon sequestration and air quality.",
    "6-2. Community tree-planting and urban green spaces.",
    "6-3. Encourage participation in local tree-planting events.",

    # Episode 7: "Consumerism and Circular Economy"
    "7-1. Impacts of consumerism on climate change.",
    "7-2. Circular economy concept explanation.",
    "7-3. Feature local initiatives addressing consumerism.",

    # Episode 8: "Taking Action: Advocacy and Policy Changes”
    "8-1. Profile successful climate policies and initiatives.",
    "8-2. Importance of advocacy in addressing climate change.",
    "8-3. Suggest actionable steps for climate-friendly policies.",
]
prompt_radio_script_presentation_title =[
  #Plan/Presentation

f"Episode 9-1: Write a sensational press release for this",
f"9-2 Make this more persuasive",
f"9-3 3 tweets about this Report:",

f"9-4 3 Instagram Post about this Report:",
f"9-5 Medium Post about this Report:",
f"9-6. LinkedIn Post about this Report:",
f"9-7. Organization email for request to do coaporation:",
]

# Assuming an average speaking speed of 150 words per minute
words_per_minute = 180

# Dialogue character variable
dialogue_character = " only two speaker whit name of So as first speaker by having medical doctor and climate change professional experience and the second person as radio speaker"
episode_Minute = 5

# Role variable

prompt_radio_script = [
f" As ChatGPT expert in the role of radio script wrtiter as {role}, suggest one Course Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

# Episode 1: "Understanding Community Resilience"
    f"As a {role} in radio script writing, 1-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, discuss the basics of community resilience, defining key concepts and principles. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 1-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, provide real-life examples of communities demonstrating resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 1-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, offer practical tips for individuals to contribute to building resilience in their communities. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 2: "Empowering Local Initiatives"
    f"As a {role} in radio script writing, 2-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, explore the importance of local initiatives in community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 2-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, showcase successful stories of communities implementing effective local initiatives. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 2-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, discuss ways individuals can get involved and support local initiatives for resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 3: "Building Social Connectivity"
    f"As a {role} in radio script writing, 3-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, emphasize the role of social connections in community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 3-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, share examples of communities fostering strong social ties. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 3-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, provide practical suggestions for enhancing social connectivity within communities. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 4: "Crisis Response and Preparedness"
    f"As a {role} in radio script writing, 4-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, discuss the importance of crisis response plans in community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 4-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, share examples of communities effectively handling crises. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 4-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, provide practical tips for communities to enhance crisis preparedness. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 5: "Environmental Sustainability Initiatives"
    f"As a {role} in radio script writing, 5-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, explore the intersection of environmental sustainability and community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 5-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, showcase successful environmental initiatives contributing to community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 5-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, discuss how individuals can participate in and support environmental sustainability efforts. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 6: "Economic Empowerment Strategies"
    f"As a {role} in radio script writing, 6-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, highlight the role of economic empowerment in community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 6-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, share examples of communities achieving economic resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 6-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, provide insights and tips for individuals to contribute to economic empowerment in their communities. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 7: "Education and Skill Development"
    f"As a {role} in radio script writing, 7-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, discuss the importance of education and skill development in enhancing community resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 7-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, share examples of communities successfully integrating education and skill development for resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 7-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, provide actionable steps for individuals to support education and skill development initiatives in their communities. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# Episode 8: "Fostering Inclusive Communities"
    f"As a {role} in radio script writing, 8-1. Segment 1 ({episode_Minute}/3): {dialogue_character}, explore the significance of inclusivity in building resilient communities. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 8-2. Segment 2 ({episode_Minute}/3): {dialogue_character}, share stories of communities fostering inclusivity and diversity. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
    f"As a {role} in radio script writing, 8-3. Segment 3 ({episode_Minute}/3): {dialogue_character}, provide practical tips for individuals to contribute to creating inclusive communities for enhanced resilience. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",

# End of the radio program
    f"As a {role} in radio script writing, 25. End of Radio Program. Summarize the key takeaways from the 8-episode series on {TOPIC}. Encourage listeners to share their thoughts and engage in community resilience initiatives. Based on this Topic: ({TOPIC}) and the description: ({PARAGRAPH}). Target Word Count: ({episode_Minute}/3)*{ words_per_minute}.",
]




prompt_radio_script_presentation = [
# Plan/Presentation
  #f"Step 9: As ChatGPT {role} in radio broadcast publishing radio script draft via internet by the topic of:((( {TOPIC} )), in the project field of {PARAGRAPH}.",
  f"21:.As ChatGPT role {role} in newspaper field, Write a sensational press release for this radio script and perviuse content made in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"22.As ChatGPT role of ({role}), Make this radio script more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"23.As ChatGPT role of ({role}) in advertisment field, Write 3 tweeter post about this radio script, and this the perviuse contnet made?",
  f"24.As ChatGPT role of ({role}) in advertisment field, Write 3 Instagram post about this radio script,  and this the perviuse contnet made?",
  f"25.As ChatGPT role of ({role}) in weblog writer, Write 1 medium weblog post about this radio script, and this the perviuse contnet made?",
  f"26.As ChatGPT role of ({role}) in bussiness post writing, Write 1 LinkedIn post about this radio script, and this the perviuse contnet made?",
  f"27. As ChatGPT role of ({role}) write an email to related organization for introducing the opportunity of coaporation with us in this field by seeing the above report and the related LinkedIn, tweeter, Instagram, medium and the pdf file of this report ",

]

prompt_radio_script_title = [
    # General Information
    "1. Create a title for an 8-episode radio program on community resilience.",

    # Episode 1: "Understanding Community Resilience"
    "1-1. Basics of community resilience, defining key concepts.",
    "1-2. Real-life examples of resilient communities.",
    "1-3. Practical tips for individuals to build resilience.",

    # Episode 2: "Empowering Local Initiatives"
    "2-1. Importance of local initiatives in resilience.",
    "2-2. Showcase successful stories of local initiatives.",
    "2-3. Ways individuals can support local initiatives.",

    # Episode 3: "Building Social Connectivity"
    "3-1. Emphasize social connections in resilience.",
    "3-2. Share examples of communities fostering social ties.",
    "3-3. Provide practical suggestions for enhancing social connectivity.",

    # Episode 4: "Crisis Response and Preparedness"
    "4-1. Importance of crisis response plans.",
    "4-2. Examples of communities handling crises.",
    "4-3. Practical tips for communities in crisis preparedness.",

    # Episode 5: "Environmental Sustainability Initiatives"
    "5-1. Explore environmental sustainability and resilience.",
    "5-2. Showcase successful environmental initiatives.",
    "5-3. Discuss how individuals can support sustainability efforts.",

    # Episode 6: "Economic Empowerment Strategies"
    "6-1. Highlight economic empowerment in resilience.",
    "6-2. Share examples of communities achieving economic resilience.",
    "6-3. Insights and tips for individuals to contribute to economic empowerment.",

    # Episode 7: "Education and Skill Development"
    "7-1. Importance of education and skill development in resilience.",
    "7-2. Examples of communities integrating education for resilience.",
    "7-3. Provide actionable steps for individuals to support education initiatives.",

    # Episode 8: "Fostering Inclusive Communities"
    "8-1. Explore the significance of inclusivity in resilience.",
    "8-2. Share stories of communities fostering inclusivity.",
    "8-3. Provide practical tips for individuals to contribute to inclusive communities.",

    # End of the radio program
    "9. Summarize key takeaways from the 8-episode series on community resilience. Encourage engagement.",
]

prompt_radio_script_presentation_title =[
  #Plan/Presentation

f"Episode 9-1: Write a sensational press release for this",
f"9-2 Make this more persuasive",
f"9-3 3 tweets about this Report:",

f"9-4 3 Instagram Post about this Report:",
f"9-5 Medium Post about this Report:",
f"9-6. LinkedIn Post about this Report:",
f"9-7. Organization email for request to do coaporation:",
]

#!pip install tensorflow #-contrib
#!pip uninstall tensorflow -y
#!pip3 install tensorflow==1.15.0
#!pip3 install tensorflow==1.14.0
#!pip3 install tensorflow==1.13.2

main_variables_0={}
prompt_save_var=[
f"Used value for this project",
f"Values are :\n {dvar_questions}",
f"Values are :\n {main_variables_0}",

]

prompt_save_var_title = [
f"Used value for this project",
f"Values are :\n ",
f"variables of main_variables_0 are:",
]

prompt_presentation = [
    # Plan/Presentation
    f"Step presentation: As ChatGPT {role}, based of perviuse chat in the category of :(category :{category}), publish a draft via internet by the topic of: ((( {TOPIC} ))), withr perviuse chat related to the category of :({category}).",
    f"21. As ChatGPT role {role},based of perviuse chat in the category of :(category: {category}), in the newspaper's field, Write a sensational press release and perviuse content made in this topic ({TOPIC}) and this field: '{PARAGRAPH}'",
    f"22. As ChatGPT role of ({role}), based of perviuse chat in the category of :(category:{category}), please create more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
    f"23. As ChatGPT role of ({role}) in advertisement field, Write 3 Twitter posts about this category of :({category}) report, by this  topic :({TOPIC}), and related previous chats and this description :({PARAGRAPH})?",
    f"24. As ChatGPT role of ({role}) in advertisement field, Write 3 Instagram posts about this category of :({category}) report, by this  topic :({TOPIC}), and related previous chats and this description :({PARAGRAPH})?",
    f"25. As ChatGPT role of ({role}) in weblogs Writing, Write 1medium posts about this category of :(category:{category}) report, by this topic :({TOPIC}), and related previous chats and this description :({PARAGRAPH})?",
    f"26. As ChatGPT role of ({role}) in advertisement field and bussiness post writing, Write linkedin post about this category of :(category:{category}) report, by this topic :({TOPIC}), and related previous chats and this description :({PARAGRAPH})?",
    f"27. As ChatGPT role of ({role}), and related perviuse chat the field of category of :(category :{category}), and topic of :({TOPIC}), write an email to the related organization for introducing the opportunity of cooperation with us in this field by seeing the above report and the related LinkedIn, Twitter, Instagram, medium, and the pdf file of this report",
]
prompts_x_factor = [
    f" As a ChatGPT playing {role}, define your Unique Selling Proposition (USP) in the context of '{TOPIC}'. What sets your brand apart in the {field_of_study} market, making it unique and compelling to customers? Provide a detailed description: ({creativity})",
    f" As a ChatGPT handling {role}, strategize ways to build defenses for long-term success in the {field_of_study} industry. Anticipate potential disruptions, especially those driven by technological advancements like AI, and outline plans for your business's resilience in the context of '{TOPIC}'. Elaborate: ({practical_skills})",
    f" In {role} role of ChatGPT, specifically focusing on {ROLE}, assess and refine the brand tone for your business in the {field_of_study} sector. How can you ensure a consistent and effective brand voice, especially when hiring marketing team members or agencies, considering the specific project '{specific_project}'? Explain: ({collaboration})",
    f" Taking on {role} role of ChatGPT as {ROLE}, investigate and address reasons why potential customers might not be converting into actual customers in the {field_of_study} domain, especially in the context of '{TOPIC}'. Analyze lost opportunities and propose actionable strategies to enhance customer conversion. Describe: ({learning_outcomes})",
    f" In your capacity as ChatGPT with {role} role of {ROLE}, optimize email campaigns for increased effectiveness in the {field_of_study} market, considering the specific project '{specific_project}'. Review your email copy from a conversion perspective, suggest improvements, and align them with your brand voice. Outline your plan: ({critical_thinking})",
    f" Assuming {role} role of ChatGPT as {ROLE}, apply the prompt to punch up your emails in the {field_of_study} context. How can you further enhance your email campaigns, making them more compelling and aligned with your brand voice, particularly considering '{specific_project}'? Provide a detailed description: ({purpose})",
]
# Consolidated prompt
se_cand_1_1_prompt = [
    f"1-1. We have generated reports addressing various aspects of {TOPIC} and are actively seeking collaboration with organizations or entities in the {RESEARCH_DOMAIN} domain. These reports highlight key findings and propose actions such as {ACTION}. Our recent work on anti-bullying initiatives and virtual courts in Iran's context aligns with the broader {IMPORTANT_THEMES} theme. We believe that cooperation with responsible organizations is crucial to making a positive impact. Can you recommend three organizations interested in this field or initiatives that align with our goals? Your insights on potential collaborators would greatly contribute to our efforts. Thank you!\n\n",
    # Prompt for creating the first email using the organization name from the prompt
    f"2-1. Subject: Exploring Collaboration on {TOPIC}\nDear [Organization 1],\n\nI hope this email finds you well. We recently generated a comprehensive report on {TOPIC} and are impressed by your organization's commitment to {RESEARCH_DOMAIN}. Our report outlines key findings and proposes actionable strategies, including {ACTION}. We believe that collaborating with esteemed organizations like yours is essential to driving positive change in this field. Would you be open to exploring potential collaboration or discussing our findings further?\n\nBest regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompt for creating the second email using the organization name from the prompt
    f"2-2. Subject: Exploring Collaboration on {TOPIC}\nDear [Organization 2],\n\nI trust this email reaches you in good health. We have recently conducted an in-depth analysis of {TOPIC} and are reaching out to organizations actively involved in {RESEARCH_DOMAIN}. Our report outlines actionable steps, such as {ACTION}, and emphasizes the importance of collaboration in achieving meaningful outcomes. We would be honored to discuss potential synergies with your organization. Are you available for a conversation or meeting in the coming weeks?\n\nWarm regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompt for creating the third email using the organization name from the prompt
    f"2-3. Subject: Exploring Collaboration on {TOPIC}\nDear [Organization 3],\n\nI trust you are well. We have compiled a comprehensive report on {TOPIC}, and in our search for impactful collaborations, your organization came to our attention due to its significant contributions to {RESEARCH_DOMAIN}. Our report suggests strategies like {ACTION} for positive change, and we are eager to explore potential collaborations with organizations sharing our vision. Would you be open to a discussion or meeting to explore synergies?\n\nKind regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompts for creating three LinkedIn posts using the emails as a block code float
    f"3-1. LinkedIn Post 1:\nExcited to explore collaboration with [Organization 1]! 🌐 Our recent report on {TOPIC} emphasizes key actions, including {ACTION}. Let's work together for positive change. #Collaboration #ResearchForChange\n\n```Subject: Exploring Collaboration on {TOPIC}\n one of the perviuse email prompt ```\n\n",
 ]

se_request_1_1_prompt = [
    f"1-1. We have conducted comprehensive research on {TOPIC} and are eager to explore collaborations within the {RESEARCH_DOMAIN} domain. Our findings suggest that collaboration with other organizations could significantly enhance our impact, especially in areas such as {IMPORTANT_THEMES}. We are currently in need of assistance in identifying potential collaborators who share our vision and goals. Could you recommend three organizations or initiatives that might be interested in partnering with us? Your guidance would be invaluable in our quest for meaningful collaboration. We are also open to discussing potential financial support for this collaboration. Thank you!\n\n",
    # Prompt for creating the first email using the organization name from the prompt
    f"2-1. Subject: Seeking Collaboration and Financial Support on {TOPIC}\nDear [Organization 1],\n\nI hope this message finds you well. Our team has been working diligently on a comprehensive study of {TOPIC}, and we believe that your organization's expertise and commitment to {RESEARCH_DOMAIN} could greatly enhance our research. We are looking for potential collaborators who can contribute to our goals, such as {ACTION}. We would greatly appreciate any recommendations or guidance you could provide on organizations that might be interested in partnering with us. Additionally, we are open to discussing potential financial support for this collaboration. Thank you for your time and consideration.\n\nBest regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompt for creating the second email using the organization name from the prompt
    f"2-2. Subject: Seeking Collaboration and Financial Support on {TOPIC}\nDear [Organization 2],\n\nI trust this email finds you in good health. Our research on {TOPIC} has led us to seek out organizations that are actively involved in {RESEARCH_DOMAIN}. We believe that collaboration could lead to significant advancements in our field. We are reaching out to you for any recommendations or insights on potential collaborators who might align with our objectives. Your assistance would be greatly appreciated. We are also open to discussing potential financial support for this collaboration. Thank you for your consideration.\n\nWarm regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompt for creating the third email using the organization name from the prompt
    f"2-3. Subject: Seeking Collaboration and Financial Support on {TOPIC}\nDear [Organization 3],\n\nI trust you are well. Our research on {TOPIC} has highlighted the importance of collaboration in achieving our goals. We are currently seeking assistance in identifying organizations that might be interested in partnering with us. Your expertise and insights could be invaluable in this process. Could you recommend any organizations or initiatives that might be a good fit for our collaboration? We are also open to discussing potential financial support for this collaboration. Thank you for your time and consideration.\n\nKind regards,\n[Your Name]\n[Your Position]\n[Your Contact Information]\n\n",
    # Prompts for creating three LinkedIn posts using the emails as a block code float
    f"3-1. LinkedIn Post 1:\nExcited to seek collaboration and discuss potential financial support with [Organization 1]! 🌐 Our research on {TOPIC} emphasizes the importance of teamwork. Let's work together for positive change. #Collaboration #ResearchForChange\n\n",
]

questions_prompt = [
f"Given the tour of the Star Exchange forum, can you provide insights on a specific challenge faced by users or administrators? Your response should be focused on a single problem or issue, researchable using primary and/or secondary sources, feasible to answer within the timeframe and practical constraints, specific enough to answer thoroughly, complex enough to develop the answer over the space of a detailed paragraph, and relevant to the community and/or society more broadly. Please describe the challenge in the context of a {TOPIC} and elaborate on it in a detailed {PARAGRAPH}.",
]
prompt_presentation  = prompts_x_factor + prompt_presentation + se_cand_1_1_prompt + se_request_1_1_prompt+ questions_prompt
prompt_presentation_topic = [
#Plan/Presentation
f"Episodes Presentation: A draft for publishing via internet:",
f"P-1. Write a sensational press release for this",
f"P-2. Make this more persuasive",
f"P-3. 3 tweets about this Report:",
f"P-4. 3 Instagram Post about this Report:",
f"P-5. Medium Post about this Report:",
f"P-6. LinkedIn Post about this Report:",
f"P-7. Organization email for request to do coaporation:",
]
prompts_x_factor_title = [
    f"Episodes X-Facort:\n X-1. Crafting a Unique Selling Proposition",
    "X-2. Building Long-Term Success Defenses",
    "X-3. Refining Brand Tone for Consistency",
    "X-4. Enhancing Customer Conversion Strategies",
    "X-5. Optimizing Email Campaign Effectiveness",
    "X-6. Applying Prompts to Enhance Email Campaigns",
]
# Consolidated prompt without specific variables
Section_Candidate_1_1_prompt_title = [
    # Section_Candidate 1: Reports on Various Topics, Seeking Collaboration
    "Section_Candidate 1-1: Reports on various topics, Seeking Collaboration",
    # Section_Candidate 1-1: Request for Organization Recommendations
    "Section_Candidate 1-1: Seeking recommendations for organizations.",
    # Section_Candidate 1-2: Email 1 to Organization 1
    "Section_Candidate 1-2: Email 1 to Organization 1 seeking collaboration.",
    # Section_Candidate 1-3: Email 2 to Organization 2
    "Section_Candidate 1-3: Email 2 to Organization 2 seeking collaboration.",
    # Section_Candidate 1-4: Email 3 to Organization 3
    "Section_Candidate 1-4: Email 3 to Organization 3 seeking collaboration.",
    # Section_Candidate 1-5: LinkedIn Post 1
    "Section_Candidate 1-5: LinkedIn Post 1 announcing collaboration with Organization 1.",
 ]
se_request_1_1_prompt_topic = [
"Collaboration sought for domain-specific topic. Support welcomed.",

"Your domain expertise valued. Open to discussions.",

"Involvement enhances research. Financial support offered.",

"Open to financial support and insights.",

"Excited for collaboration. Engaged and ready."
]


questions_prompt_title = [
"Stackexchange question for this report:",
]
prompt_presentation_topic = prompts_x_factor_title + prompt_presentation_topic + Section_Candidate_1_1_prompt_title +se_request_1_1_prompt_topic+ questions_prompt_title

prompt_party_chart= [
    f" As ChatGPT expert in the role of politics party construction script wrtiter as {role}, suggest one party chart Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

    f"1. Define the core mission and values of {TOPIC} party based on the provided {PARAGRAPH}. How do these values align with the {RESEARCH_DOMAIN} and {IMPORTANT_THEMES}?",
    f"2. Explain how the {TOPIC} party charter, as described in {PARAGRAPH}, embodies its commitment to democratic principles. How does this reflect the {THEORY1} and {THEORY2}?",
    f"3. Outline the eligibility criteria for joining {TOPIC} party as outlined in {PARAGRAPH}. How do these criteria ensure inclusivity and representation within the {RESEARCH_DOMAIN}?",
    f"4. Describe the rights and responsibilities of members within {TOPIC} party, as detailed in {PARAGRAPH}. How do these rights empower individuals to participate in {RESEARCH_QUESTIONS}?",
    f"5. Detail the hierarchical structure of {TOPIC} party, as mentioned in {PARAGRAPH}. How does this structure facilitate effective leadership and decision-making in {field_of_study}?",
    f"6. Explain how leaders are elected or appointed within {TOPIC} party, as indicated in {PARAGRAPH}. How does this process ensure accountability and transparency in {RESEARCH_DOMAIN}?",
    f"7. Articulate the policy positions and platform of {TOPIC} party as outlined in {PARAGRAPH}. How do these positions address key issues in {RESEARCH_DOMAIN} and {IMPORTANT_THEMES}?",
    f"8. Describe the primary, caucus, and convention systems used by {TOPIC} party for nominations, as detailed in {PARAGRAPH}. How do these systems promote engagement and involvement in {RESEARCH_DOMAIN}?",
    f"9. Explain the fundraising and financial management strategies employed by {TOPIC} party, as discussed in {PARAGRAPH}. How do these strategies support the party's goals in {field_of_study} and {IMPORTANT_THEMES}?",
    f"10. Discuss the rules and regulations governing campaign finance within {TOPIC} party, as outlined in {PARAGRAPH}. How do these regulations ensure transparency and integrity in {RESEARCH_DOMAIN}?",
    f"11. Describe the decision-making processes within {TOPIC} party, as elaborated in {PARAGRAPH}. How do these processes foster collaboration and cooperation in {field_of_study}?",
    f"12. Explain how meetings are conducted and votes are cast within {TOPIC} party, as detailed in {PARAGRAPH}. How do these procedures uphold democratic principles in {RESEARCH_DOMAIN}?",
    f"13. Outline the procedures for amending the {TOPIC} party charter, as outlined in {PARAGRAPH}. How do these procedures facilitate adaptation and evolution in {field_of_study}?",
    f"14. Describe the safeguards in place to ensure that amendments to the {TOPIC} party charter align with its core values, as mentioned in {PARAGRAPH}. How do these safeguards prevent deviation from the party's principles in {RESEARCH_DOMAIN}?",
    f"15. Explain how {TOPIC} party ensures compliance with relevant laws and regulations, as discussed in {PARAGRAPH}. How does this compliance uphold the integrity of the party in {RESEARCH_DOMAIN}?",
    f"16. Discuss the consequences of non-compliance with legal requirements for {TOPIC} party, as mentioned in {PARAGRAPH}. How do these consequences impact the party's reputation and effectiveness in {field_of_study}?",
    f"17. Describe the mechanisms for soliciting input and feedback from members and stakeholders within {TOPIC} party, as outlined in {PARAGRAPH}. How do these mechanisms promote inclusivity and participation in {RESEARCH_DOMAIN}?",
    f"18. Explain how {TOPIC} party incorporates feedback from consultations into its decision-making processes, as detailed in {PARAGRAPH}. How does this incorporation enhance the party's responsiveness and adaptability in {RESEARCH_QUESTIONS}?",
    f"19. Outline the process for reviewing and revising the {TOPIC} party charter, as described in {PARAGRAPH}. How does this process ensure the relevance and effectiveness of the charter in {RESEARCH_DOMAIN}?",
    f"20. Discuss the importance of consensus-building and compromise in finalizing the {TOPIC} party charter, as elaborated in {PARAGRAPH}. How does this consensus contribute to unity and cohesion within the party in {field_of_study}?",
    f"21. Describe how the finalized {TOPIC} party charter is disseminated to members, candidates, and the public, as outlined in {PARAGRAPH}. How does this dissemination promote transparency and accountability in {RESEARCH_DOMAIN}?",
    f"22. Discuss the role of the {TOPIC} party charter as a guiding document for members and supporters, as mentioned in {PARAGRAPH}. How does this charter inform decision-making and action in {field_of_study}?",
]

prompt_party_chart_title = [
    "0.party chart title",
    "1. Define mission and values of party.",
    "2. Explain democratic commitment reflected in charter.",
    "3. Outline membership criteria and rights.",
    "4. Describe members' rights and responsibilities.",
    "5. Detail party's hierarchical organizational structure.",
    "6. Explain process of electing/appointing leaders.",
    "7. Articulate policy positions and platform.",
    "8. Describe nomination systems for candidates.",
    "9. Explain fundraising and financial strategies.",
    "10. Discuss rules governing campaign finance.",
    "11. Describe decision-making processes within party.",
    "12. Explain meeting conduct and voting procedures.",
    "13. Outline procedures for amending charter.",
    "14. Describe safeguards for charter amendments.",
    "15. Explain compliance with relevant laws.",
    "16. Discuss consequences of legal non-compliance.",
    "17. Describe mechanisms for soliciting input.",
    "18. Explain incorporation of feedback into decisions.",
    "19. Outline process for reviewing charter.",
    "20. Discuss importance of consensus-building.",
    "21. Describe charter dissemination process.",
    "22. Discuss role of charter as guiding document.",
]

prompt_meeting_general = [
    f" As ChatGPT expert in the role of social meetings script wrtiter as {role}, suggest one meeting Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",
    f"Welcome all participants to the {TOPIC} meeting. Introduce yourself and state your role in the meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"Briefly mention the purpose of the {TOPIC} and its significance in the {RESEARCH_DOMAIN}. with more detailed description by this content: ({PARAGRAPH})",
    f"Share the agenda for the {TOPIC} meeting, highlighting the {RESEARCH_DOMAIN} topics to be discussed. with more detailed description by this content: ({PARAGRAPH})",
    f"Emphasize the importance of sticking to the agenda and time constraints for the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"Provide a brief overview of the {TOPIC} and its relevance to the {RESEARCH_DOMAIN} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"Invite participants to share their thoughts, ideas, or any updates related to {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"Facilitate a productive discussion, ensuring that everyone has an opportunity to contribute to the {RESEARCH_DOMAIN} discussion. with more detailed description by this content: ({PARAGRAPH})",
    f"Summarize the main points discussed and any decisions made regarding the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"Summarize the key takeaways from the {TOPIC} meeting, highlighting any actionable items or next steps for the {RESEARCH_DOMAIN}. with more detailed description by this content: ({PARAGRAPH})",
    f"Thank all participants for their contributions and engagement in the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"Provide any necessary closing remarks or announcements for the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"If there is time available, open the floor for questions from participants on the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"Thank everyone once again for their participation and time in the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"Confirm any important follow-up actions, deadlines, or future meeting dates for the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"End the {TOPIC} meeting on a positive note, expressing anticipation for future successful meetings. with more detailed description by this content: ({PARAGRAPH})"
]


prompt_meeting_general_title = [
     "1. Create a title for an  meeting program ",
    #  1. Introduction
    "Welcome all participants to the meeting. Introduce yourself and state your role in the meeting.",
    "Briefly mention the purpose of the meeting and its significance.",

    #  2. Agenda Review
    "Share the agenda for the meeting, highlighting the topics to be discussed.",
    "Emphasize the importance of sticking to the agenda and time constraints.",

    #  3. Main Points (Topic  1)
    "Provide a brief overview of the topic and its relevance to the meeting.",
    "Invite participants to share their thoughts, ideas, or any updates related to the topic.",
    "Facilitate a productive discussion, ensuring that everyone has an opportunity to contribute.",
    "Summarize the main points discussed and any decisions made.",

    #  4. Additional Topics (if applicable)
    # Repeat the steps for any additional topics on the agenda.

    #  5. Conclusion
    "Summarize the key takeaways from the meeting, highlighting any actionable items or next steps.",
    "Thank all participants for their contributions and engagement.",
    "Provide any necessary closing remarks or announcements.",

    #  6. Q&A Session (optional)
    "If there is time available, open the floor for questions from participants.",
    "Address the questions and ensure clarity on any unclear points.",

    #  7. Closing
    "Thank everyone once again for their participation and time.",
    "Confirm any important follow-up actions, deadlines, or future meeting dates.",
    "End the meeting on a positive note, expressing anticipation for future successful meetings."
]

prompt_meeting = [
    f" As ChatGPT expert in the role of social meetings script wrtiter as {role}, suggest one meeting Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",
    f"1. Welcome all participants to the {TOPIC} meeting. Introduce yourself and state your role in the meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"2. Briefly mention the purpose of the {TOPIC} and its significance in the {RESEARCH_DOMAIN}. with more detailed description by this content: ({PARAGRAPH})",
    f"3. Share the agenda for the {TOPIC} meeting, highlighting the {RESEARCH_DOMAIN} topics to be discussed. with more detailed description by this content: ({PARAGRAPH})",
    f"4. Emphasize the importance of sticking to the agenda and time constraints for the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"5. Provide a brief overview of the {TOPIC} and its relevance to the {RESEARCH_DOMAIN} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"6. Invite participants to share their thoughts, ideas, or any updates related to {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"7. Facilitate a productive discussion, ensuring that everyone has an opportunity to contribute to the {RESEARCH_DOMAIN} discussion. with more detailed description by this content: ({PARAGRAPH})",
    f"8. Summarize the main points discussed and any decisions made regarding the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"9. Summarize the key takeaways from the {TOPIC} meeting, highlighting any actionable items or next steps for the {RESEARCH_DOMAIN}. with more detailed description by this content: ({PARAGRAPH})",
    f"10. Thank all participants for their contributions and engagement in the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"11. Provide any necessary closing remarks or announcements for the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"12. If there is time available, open the floor for questions from participants on the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"13. Thank everyone once again for their participation and time in the {TOPIC} meeting. with more detailed description by this content: ({PARAGRAPH})",
    f"14. Confirm any important follow-up actions, deadlines, or future meeting dates for the {TOPIC}. with more detailed description by this content: ({PARAGRAPH})",
    f"15. End the {TOPIC} meeting on a positive note, expressing anticipation for future successful meetings. with more detailed description by this content: ({PARAGRAPH})",
    f"16. Acknowledge the challenges of facilitating difficult racial dialogues, including understanding one's own biases, creating safe conditions for expression, and navigating the complexities of racial tension. with more detailed description by this content: ({PARAGRAPH})",
    f"17. Highlight the importance of validating participants and encouraging open discussions, especially when it feels unsafe to do so. with more detailed description by this content: ({PARAGRAPH})",
    f"18. Discuss the significance of acknowledging personal biases and limitations in the dialogue, modeling truthfulness and openness to participants. with more detailed description by this content: ({PARAGRAPH})",
    f"19. Emphasize the role of creating conditions for successful outcomes, ensuring participants feel heard and understood, and addressing racial tension directly. with more detailed description by this content: ({PARAGRAPH})"
]
prompt_meeting_title = [
    "0. Create a title for an  meeting program ",
    "1. Welcome all participants to the meeting. Introduce yourself and state your role in the meeting.",
    "2. Briefly mention the purpose of the meeting and its significance in the research domain.",
    "3. Share the agenda for the meeting, highlighting the research domain topics to be discussed.",
    "4. Emphasize the importance of sticking to the agenda and time constraints for the meeting.",
    "5. Provide a brief overview of the topic and its relevance to the research domain meeting.",
    "6. Invite participants to share their thoughts, ideas, or any updates related to the topic.",
    "7. Facilitate a productive discussion, ensuring that everyone has an opportunity to contribute to the research domain discussion.",
    "8. Summarize the main points discussed and any decisions made regarding the topic.",
    "9. Summarize the key takeaways from the meeting, highlighting any actionable items or next steps for the research domain.",
    "10. Thank all participants for their contributions and engagement in the meeting.",
    "11. Provide any necessary closing remarks or announcements for the meeting.",
    "12. If there is time available, open the floor for questions from participants on the topic.",
    "13. Thank everyone once again for their participation and time in the meeting.",
    "14. Confirm any important follow-up actions, deadlines, or future meeting dates for the topic.",
    "15. End the meeting on a positive note, expressing anticipation for future successful meetings.",
    "16. Acknowledge the challenges of facilitating difficult racial dialogues, including understanding one's own biases, creating safe conditions for expression, and navigating the complexities of racial tension.",
    "17. Highlight the importance of validating participants and encouraging open discussions, especially when it feels unsafe to do so.",
    "18. Discuss the significance of acknowledging personal biases and limitations in the dialogue, modeling truthfulness and openness to participants.",
    "19. Emphasize the role of creating conditions for successful outcomes, ensuring participants feel heard and understood, and addressing racial tension directly."
]

# Define industries
industries = [
    "Celebrities and Public Figures",
    "Social Media Influencers",
    "Politicians and Political Figures",
    "Public Sector Professionals",
    "Companies and Brands",
    "Non-Profit Organizations"
]


# Initialize industry counter
i = 1
Prompt_cancel_culture_title = [
   f" As ChatGPT expert in the role of social cancel culture wrtiter as {role}, suggest one meeting Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",
]
# Print numbered sections for each industry
for industry in industries:
    print(f"Section {i}: {industry}")
    i += 1

    # Initialize prompt counter
    k = 1

    # Create new prompts for each industry based on the common variables
    new_prompts = [
        # Numbered prompts for each industry
        f"Section {i}-{k}. Understanding {industry}: Cancel culture impact",
        f"Section {i}-{k+1}. {industry}: Accountability vs. Punishment",
        f"Section {i}-{k+2}. {industry}: Productivity of Calling Out",
        f"Section {i}-{k+3}. {industry}: Agendas Behind Calling Out",
        f"Section {i}-{k+4}. {industry}: Reaction to Offensive Content",
        f"Section {i}-{k+5}. {industry}: Consequences and Empathy",
        f"Section {i}-{k+6}. {industry}: Action Plan for Cancel Culture",
        f"Section {i}-{k+7}. {industry}: Real-world Project Example",
        f"Section {i}-{k+8}. {industry}: Research Instruction",
        f"Section {i}-{k+9}. {industry}: Desired Output Format",
        f"Section {i}-{k+10}. {industry}: Role and Duration",
        f"Section {i}-{k+11}. {industry}: Communication Details",
        f"Section {i}-{k+12}. {industry}: Using OpenAI API",
        f"Section {i}-{k+13}. {industry}: Report Deadline",
        f"Section {i}-{k+14}. {industry}: Essential Skills Required",
        f"Section {i}-{k+15}. {industry}: Purpose and Learning Outcomes",
        f"Section {i}-{k+16}. {industry}: Course Content and Assessments",
        f"Section {i}-{k+17}. {industry}: Course Schedule and Sequencing",
        f"Section {i}-{k+18}. {industry}: Technology Requirements",
        f"Section {i}-{k+19}. {industry}: Target Audience and Field",
        f"Section {i}-{k+20}. {industry}: Specific Project Details"
    ]

    # Print the prompts for each industry
    for prompt in new_prompts:
        print(prompt)
        Prompt_cancel_culture_title.append(prompt)

    print()  # Empty line between industries

reminded_prompts = [
    f"1.Understanding {TOPIC} in {industry}: {PARAGRAPHS} This prompt provides an introductory overview of cancel culture within the {industry} industry, focusing on its definition, evolution, and relevance within the broader societal context.",
    f"2.{TOPIC_SENTENCE}: Accountability vs. Punishment in {RESEARCH_DOMAIN} for {industry} This prompt addresses the fundamental debate surrounding cancel culture within the {industry} industry, examining whether it primarily serves as a mechanism for holding individuals accountable or as a tool for punitive action.",
    f"3.Productivity of Calling Out in {RESEARCH_DOMAIN} for {industry}: {PARAGRAPH} Here, the prompt explores the efficacy of calling out behavior within the {industry} industry, analyzing its effectiveness in driving positive change or perpetuating a culture of negativity.",
    f"4.Agendas Behind Calling Out in {RESEARCH_DOMAIN} for {industry}: {PARAGRAPH} This prompt delves into the potential motives or hidden agendas behind instances of calling out within the {industry} industry, aiming to uncover any underlying biases or ulterior motives.",
    f"5.Reaction to Offensive Content in {RESEARCH_DOMAIN} for {industry}: {PARAGRAPH} By examining how the {industry} industry typically responds to offensive content or behavior, this prompt sheds light on prevailing attitudes and norms regarding what constitutes acceptable or unacceptable conduct.",
    f"6.Consequences and Empathy in {RESEARCH_DOMAIN} for {industry}: {PARAGRAPH} This prompt assesses the consequences of cancel culture within the {industry} industry, focusing on the level of empathy and understanding exhibited towards individuals facing cancellation or backlash.",
    f"7.Action Plan for {ACTION} in {RESEARCH_DOMAIN} for {industry}: {RESULT_PARAGRAPHS} Here, the prompt outlines a strategic action plan for addressing cancel culture within the {industry} industry, detailing potential steps and outcomes.",
    f"8.Project Example: {PROJECT_EXAMPLE} in {RESEARCH_DOMAIN} for {industry} by {PROJECT_MANAGER} This prompt provides a real-world example of how cancel culture manifests within the {industry} industry, showcasing a specific project or initiative led by a designated project manager.",
    f"9.Instruction for {TOPIC} in {industry}: {INSTRUCTION} This prompt offers guidance or instructions for conducting research or analysis on cancel culture within the {industry} industry, outlining key steps or methodologies.",
    f"10.Output Format for {OUTPUT_FORMAT} of {SPECIFIC_PROJECT_DETAILS} in {RESEARCH_DOMAIN} for {industry} Here, the prompt specifies the desired output format or deliverables for a particular research project or initiative within the {industry} industry, focusing on specific project details.",
    f"11.Role: {ROLE} in {RESEARCH_DOMAIN} for {industry} for {NUMBER_OF_DAYS_MONTHS_YEARS} This prompt delineates the role or responsibilities of individuals within the {industry} industry, along with the expected duration or timeframe for fulfilling these roles.",
    f"12.{X} in {RESEARCH_DOMAIN} for {industry}: {YOUR_EMAIL} This prompt highlights the importance of communication or collaboration within the {industry} industry, providing contact information for individuals involved in the project.",
    f"13.Using {OPENAI_API} for {TOPIC} in {RESEARCH_DOMAIN} for {industry}: {PROJECT_MANAGER} Here, the prompt explores the potential use of the OpenAI API for conducting research or analysis on cancel culture within the {industry} industry, with the project manager overseeing its implementation.",
    f"14.{REPORT} on {TOPIC} in {RESEARCH_DOMAIN} for {industry}: {DATE} This prompt outlines the creation of a report or documentation detailing research findings or insights on cancel culture within the {industry} industry, with a specified date for its completion.",
    f"15.Skills Required: {employability}, {practical_skills}, {creativity}, {critical_thinking} in {RESEARCH_DOMAIN} for {industry} This prompt identifies the essential skills or competencies needed to effectively navigate cancel culture within the {industry} industry, including employability skills, practical skills, creativity, and critical thinking.",
    f"16.Purpose and Learning Outcomes in {RESEARCH_DOMAIN} for {industry}: {purpose}, {learning_outcomes} Here, the prompt clarifies the overarching purpose and expected learning outcomes of engaging with cancel culture within the {industry} industry, providing a clear understanding of the intended objectives.",
    f"17.Course Content and Assessments in {RESEARCH_DOMAIN} for {industry}: {course_content}, {course_assessments} This prompt outlines the content and assessments associated with a course or educational program focused on cancel culture within the {industry} industry, detailing the topics covered and methods of evaluation.",
    f"18.Course Schedule and Sequencing in {RESEARCH_DOMAIN} for {industry}: {course_schedule}, {course_sequencing} This prompt presents the schedule and sequencing of a course or educational program on cancel culture within the {industry} industry, outlining the timeline and order of topics.",
    f"19.Technology Requirements and Prerequisites in {RESEARCH_DOMAIN} for {industry}: {technology_requirements}, {prerequisites} Here, the prompt specifies the technology requirements and prerequisites for engaging with cancel culture research or analysis within the {industry} industry, ensuring participants have the necessary tools and background knowledge.",
    f"20.Audience and Field of Study in {RESEARCH_DOMAIN} for {industry}: {audience}, {field_of_study} This prompt identifies the target audience and field of study for research or analysis on cancel culture within the {industry} industry, providing clarity on the intended recipients and disciplinary focus.",
    f"21.Specific Project Details in {RESEARCH_DOMAIN} for {industry}: {specific_project} This prompt provides specific details or parameters for a research project or initiative focused on cancel culture within the {industry} industry, outlining key requirements or objectives."
]
Prompt_cancel_culture=[
 "0. Create a title for an social cancel culture program.",
]
for industry in industries:
    for prompt in reminded_prompts:
        print(prompt)
        Prompt_cancel_culture.append(prompt)

#!pip install lxml==5.1.0
#!pip install lxml_html_clean

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer


from newspaper import Article
import os
import requests
import gpt_2_simple as gpt2
import tensorflow as tf

import nltk
nltk.download('punkt')


def extract_course_information(course_design_variables):
 course_data = {}

 # Retrieve course information from the web
 url = course_design_variables["url"]
 article = Article(url)
 article.download()
 article.parse()

 # Extract course title
 course_title = article.title if article.title else "Title not found on the page"
 course_data['course_title'] = course_title

 # Extract course description
 course_description = article.text if article.text else "Description not found on the page"
 course_data['course_description'] = course_description

 # Extract authors
 authors = ', '.join(article.authors) if article.authors else "Authors not found"
 course_data['authors'] = authors

 # Extract publish date
 publish_date = article.publish_date if article.publish_date else "Publish date not found"
 course_data['publish_date'] = publish_date

 # Extract keywords
 keywords = ', '.join(article.keywords) if article.keywords else "Keywords not found"
 course_data['keywords'] = keywords

 return course_data, article

# Example Usage
course_url = "https://uwex.wisconsin.edu/sustainable-management/masters/"
course_design_variables = {"url": course_url}

# Extract course information
course_data, article = extract_course_information(course_design_variables)

if False:
   # Print the extracted information
   print("Course Title: ", course_data['course_title'])
   print("Course Description: ", course_data['course_description'])
   print("Authors: ", course_data['authors'])
   print("Publish Date: ", course_data['publish_date'])
   print("Keywords: ", course_data['keywords'])

# Generate text with Sumy
#parser = PlaintextParser.from_string(course_data['course_description'], Tokenizer("english"))
#summarizer = LsaSummarizer()
#summary_sumy = summarizer(parser.document, 3)
#print("\nSumy Summary and remove the html content from this content :\n", summary_sumy)

import requests
from bs4 import BeautifulSoup
#from gpt_2_simple import gpt_2 as GPT2
#from gpt2_client import GPT2Client
#import tf_slim as slim

def extract_course_information(course_design_variables,gpt):
    #gpt = GPT2()
    gpt.generate = gpt.generate_batch_from_prompts()
    course_data = {}
    course_data['topic'] = gpt.generate(prompt=f"What is the topic of this course? {course_design_variables['topic']}", text=course_design_variables['course_description'])
    course_data['field_of_study'] = gpt.generate(prompt=f"What is the field of study of this course? {course_design_variables['field_of_study']}", text=course_design_variables['course_description'])
    course_data['audience'] = gpt.generate(prompt=f"Who is the target audience for this course? {course_design_variables['audience']}", text=course_design_variables['course_description'])
    course_data['specific_project'] = gpt.generate(prompt=f"What is the specific project or assignment for this course? {course_design_variables['specific_project']}", text=course_design_variables['course_description'])
    course_data['employability'] = gpt.generate(prompt=f"What are the employability or career benefits of this course? {course_design_variables['employability']}", text=course_design_variables['course_description'])
    course_data['practical_skills'] = gpt.generate(prompt=f"What practical skills will students learn in this course? {course_design_variables['practical_skills']}", text=course_design_variables['course_description'])
    course_data['creativity'] = gpt.generate(prompt=f"How does this course encourage creativity? {course_design_variables['creativity']}", text=course_design_variables['course_description'])
    course_data['critical_thinking'] = gpt.generate(prompt=f"How does this course develop critical thinking skills? {course_design_variables['critical_thinking']}", text=course_design_variables['course_description'])
    course_data['fun_and_enjoyment'] = gpt.generate(prompt=f"How does this course make learning engaging and enjoyable? {course_design_variables['fun_and_enjoyment']}", text=course_design_variables['course_description'])
    course_data['employee_guarantee'] = ""
    course_data['collaboration'] = gpt.generate(prompt=f"How does this course foster collaboration among students? {course_design_variables['collaboration']}", text=course_design_variables['course_description'])
    course_data['learning_outcomes'] = gpt.generate(prompt=f"What are the learning outcomes or goals of this course? {course_design_variables['learning_outcomes']}", text=course_design_variables['course_description'])
    course_data['purpose'] = gpt.generate(prompt=f"What is the purpose or objective of this course? {course_design_variables['purpose']}", text=course_design_variables['course_description'])
    course_data['learning_activities'] = gpt.generate(prompt=f"What are the learning activities or methods used in this course? {course_design_variables['learning_activities']}", text=course_design_variables['course_description'])
    course_data['course_content'] = gpt.generate(prompt=f"What are the main topics or subjects covered in this course? {course_design_variables['course_content']}", text=course_design_variables['course_description'])
    course_data['course_assessments'] = gpt.generate(prompt=f"How are students assessed in this course? {course_design_variables['course_assessments']}", text=course_design_variables['course_description'])
    course_data['course_schedule'] = gpt.generate(prompt=f"What is the schedule or timeline for this course? {course_design_variables['course_schedule']}", text=course_design_variables['course_description'])
    course_data['course_sequencing'] = gpt.generate(prompt=f"How is the course content organized or sequenced? {course_design_variables['course_sequencing']}", text=course_design_variables['course_description'])
    course_data['technology_requirements'] = gpt.generate(prompt=f"What technology or equipment is required for this course? {course_design_variables['technology_requirements']}", text=course_design_variables['course_description'])
    course_data['prerequisites'] = gpt.generate(prompt=f"What are the prerequisites or prior knowledge required for this course? {course_design_variables['prerequisites']}", text=course_design_variables['course_description'])

    return course_data

# Example Usage
course_url = "https://uwex.wisconsin.edu/sustainable-management/masters/" # @param {type:"string"} # Wrap the URL in quotes
response = requests.get(course_url)
soup = BeautifulSoup(response.content, 'html.parser')
course_description_element = soup.find('div', class_='course-description__content')

if course_description_element:
    course_description = course_description_element.text.strip()
else:
    course_description = "Description not found on the page"

# Dictionary of course design variables
course_design_variables = course_design_variables

#course_design_variables['course_description'] = summary_sumy

#gpt2 = GPT2Client('117M') # This could also be `345M`, `774M`, or `1558M`

#text = gpt2.generate_batch_from_prompts(prompts) # returns an array of generated text

#course_data = extract_course_information(course_design_variables,gpt2)
#prompts = generate_prompts(course_data)
#print(prompts)

from newspaper import Article
import os
import requests
import gpt_2_simple as gpt2
import tensorflow as tf



# Example Usage
course_url = "https://uwex.wisconsin.edu/sustainable-management/masters/" # @param {type:"string"} # Wrap the URL in quotes
response = requests.get(course_url)

def extract_course_information(course_design_variables):
 course_data = {}

 # Retrieve course information from the web
 url = course_design_variables["url"]
 article = Article(url)
 article.download()
 article.parse()

 # Extract course title
 course_title = article.title if article.title else "Title not found on the page"
 course_data['course_title'] = course_title

 # Extract course description
 course_description = article.text if article.text else "Description not found on the page"
 course_data['course_description'] = course_description

 return course_data

# Example Usage
course_url = "https://uwex.wisconsin.edu/sustainable-management/masters/"
course_design_variables = {"url": course_url}

# Extract course information
course_data = extract_course_information(course_design_variables)

# Print the extracted information
print("Course Title: ", course_data['course_title'])
print("Course Description: ", course_data['course_description'])

# Download the model if not already present

"""

#https://www.phind.com/search?cache=xqbhxgilysl4b8wqweih04eg

Based on the search results, it seems you are interested in using Google's Text-to-Speech API to generate a voice for each `.docx` report. Here's how you can do it:

First, install the necessary libraries:

```python
pip install python-docx google-cloud-texttospeech
```

Then, you can use the following code to read a `.docx` file and convert the text into speech:

```python
from docx import Document
from google.cloud import texttospeech
import os
import random
import slugify

folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"

def extract_course_information(course_design_variables):
 course_data = {}

 # Retrieve course information from the .docx file
 filename = course_design_variables["filename"]
 doc = Document(filename)
 full_text = []
 for para in doc.paragraphs:
    full_text.append(para.text)
 course_description = '\n'.join(full_text) if full_text else "Description not found in the file"
 course_data['course_description'] = course_description

 return course_data, doc

def generate_voice(course_data, TOPIC):
 # Convert the Sentence object to a string
 summary_sumy_str = course_data['course_description']

 # Initialize the Text-to-Speech client
 client = texttospeech.TextToSpeechClient()

 # Set the text input to be synthesized
 synthesis_input = texttospeech.SynthesisInput(text=summary_sumy_str)

 # Build the voice request
 voice = texttospeech.VoiceSelectionParams(
    language_code="en-US", ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
 )

 # Select the type of audio file you want returned
 audio_config = texttospeech.AudioConfig(
    audio_encoding=texttospeech.AudioEncoding.MP3
 )

 # Perform the text-to-speech request
 response = client.synthesize_speech(
    input=synthesis_input, voice=voice, audio_config=audio_config
 )

 # Write the response to the output file.
 TOPIC_S = slugify(TOPIC)
 Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"
 Sound_File = Sound_Folder +str(random.randint (0,1000))+".mp3"

 if not os.path.exists(Sound_Folder):
    os.makedirs(Sound_Folder)

 with open(Sound_File, "wb") as out:
    out.write(response.audio_content)

# Example Usage
course_filename = "path_to_your_file.docx"
course_design_variables = {"filename": course_filename}
TOPIC = "Your Topic"

# Extract course information
course_data, doc = extract_course_information(course_design_variables)

# Generate voice for the course
generate_voice(course_data, TOPIC)
```

In this modified script, `Document(filename)` opens the `.docx` file, and `'\n'.join(full_text)` combines all the text from the file into a single string. The rest of the script remains the same [Source 2](https://codelabs.developers.google.com/codelabs/cloud-text-speech-python3/), [Source 6](https://cloud.google.com/python/docs/reference/texttospeech/latest/google.cloud.texttospeech_v1.types.VoiceSelectionParams)."""



from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer

def extract_course_information(course_design_variables):
 course_data = {}

 # Retrieve course information from the .docx file
 filename = course_design_variables["filename"]
 doc = Document(filename)
 full_text = []
 for para in doc.paragraphs:
   full_text.append(para.text)
   course_description = '\n'.join(full_text) if full_text else "Description not found in the file"
   course_data['course_description'] = course_description

 # Parse the text and generate a summary
 parser = PlaintextParser.from_string(course_description, Tokenizer("english"))
 summarizer = LsaSummarizer()

 # Estimate the number of sentences needed for a 2-minute summary
 avg_speed = 150 # average words per minute
 est_num_sentences = int(2 * avg_speed) # 2 minutes in words
 summary = summarizer(parser.document, est_num_sentences)

 # Convert the Sentence object to a string
 summary_str = ' '.join([str(sentence) for sentence in summary])

 # Split the summary into parts
 course_parts = summary_str.split('\n')

 return course_parts, doc

from docx import Document
from google.cloud import texttospeech
import os
import random
import slugify

folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"



def generate_voice(course_data, TOPIC):
 # Convert the Sentence object to a string
 summary_sumy_str = course_data['course_description']

 # Initialize the Text-to-Speech client
 client = texttospeech.TextToSpeechClient()

 # Set the text input to be synthesized
 synthesis_input = texttospeech.SynthesisInput(text=summary_sumy_str)

 # Build the voice request
 voice = texttospeech.VoiceSelectionParams(
    language_code="en-US", ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
 )

 # Select the type of audio file you want returned
 audio_config = texttospeech.AudioConfig(
    audio_encoding=texttospeech.AudioEncoding.MP3
 )

 # Perform the text-to-speech request
 response = client.synthesize_speech(
    input=synthesis_input, voice=voice, audio_config=audio_config
 )

 # Write the response to the output file.
 TOPIC_S = slugify(TOPIC)
 Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"
 Sound_File = Sound_Folder +str(random.randint (0,1000))+".mp3"

 if not os.path.exists(Sound_Folder):
    os.makedirs(Sound_Folder)

 with open(Sound_File, "wb") as out:
    out.write(response.audio_content)

# Example Usage
course_filename = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/Title/Pitch_Deck_T_climate-change-_t.docx" # "path_to_your_file.docx"
course_design_variables = {"filename": course_filename}
#TOPIC = "Your Topic"

# Extract course information
#course_data, doc = extract_course_information(course_design_variables)

# Generate voice for the course
#generate_voice(course_data, TOPIC)

'''
!pip install pydub
!sudo apt-get install ffmpeg
!pip install python-slugify
!pip install langdetect
!pip install httpx==0.27.2
'''

from openai import OpenAI
from pydub import AudioSegment
from slugify import slugify
from langdetect import detect
import time
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
import nltk
from nltk.tokenize import sent_tokenize

import nltk
nltk.download('punkt')

from openai import RateLimitError
from backoff import on_exception, expo

client = OpenAI(
 api_key = openai_api
)
def retry_with_exponential_backoff(func, initial_delay: float = 1, exponential_base: float = 2, jitter: bool = True, max_retries: int = 15, errors: tuple = (RateLimitError,)):
  def wrapper(*args, **kwargs):
    num_retries = 0
    delay = initial_delay
    while True:
        try:
            return func(*args, **kwargs)
        except errors as e:
            num_retries += 1
            if num_retries > max_retries:
              raise Exception(f"Maximum number of retries ({max_retries}) exceeded.")
            delay *= exponential_base * (1 + jitter * random.random())
            time.sleep(delay)
        except Exception as e:
            raise e
  return wrapper

@retry_with_exponential_backoff
def generate_voice_openai(part):
 if not part:
    print("Warning: Empty input received.")
    return None
 response = client.audio.speech.create(
    voice="alloy",
    model="tts-1",
    input=part
 )
 return response

def sumerizing(doc):
  content = ""
  for para in doc.paragraphs:
    content += para.text + "\n"

  # Detect the language of the content
  try:
    language = detect(content)
    print(f"Detected language: {language}")
  except langdetect.lang_detect_exception.LangDetectException:
    print("Could not detect language.")

  parser = PlaintextParser.from_string(content , Tokenizer(language))
  summarizer = LsaSummarizer()
  summary_sumy = summarizer(parser.document, 3)
  sumerized_content = " ".join(str(sentence) for sentence in summary_sumy)
  print("\nSumy Summary and remove the html content from this content :\n", sumerized_content)
  return sumerized_content

def extract_course_information(course_design_variables):
  course_data = {}
  filename = course_design_variables["filename"]
  doc = Document(filename)
  full_text = []
  for para in doc.paragraphs:
    full_text.append(para.text)
  course_description = '\n'.join(full_text) if full_text else "Description not found in the file"
  course_data['course_description'] = course_description
  course_parts = [sent for para in full_text for sent in sent_tokenize(para)]
  sumerized_content= sumerizing(doc)
  return course_parts, doc,sumerized_content

def generate_voice(course_parts, TOPIC):
  TOPIC_S = slugify(TOPIC)
  Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"
  if not os.path.exists(Sound_Folder):
    os.makedirs(Sound_Folder)
  audio_files = []
  if True: #for i, part in enumerate(course_parts):
    #print (f'\n The {i}th part of main variable is :',part)
    #if not part:
       # continue
    response = generate_voice_openai(course_parts)
    Sound_File = Sound_Folder +str(course_parts[:10])+".mp3"
    response.stream_to_file(Sound_File)
    print ('\n Response for voice generation is made at : ', Sound_File)
    audio_files.append(Sound_File)
  combined_audio = AudioSegment.empty()
  for af in audio_files:
     combined_audio += AudioSegment.from_file(af)
  avg_speed = 150
  total_words = len(' '.join(course_parts).split())
  est_duration = total_words / avg_speed
  n = 5
  if est_duration < n:
    num_repetitions = int((n / est_duration) + 1)
    empty_audio = AudioSegment.silent(duration=len(combined_audio))
    extended_audio = empty_audio.overlay(combined_audio, times=num_repetitions)
    extended_audio.export(Sound_Folder+"extended.mp3", format='mp3')
  combined_audio.export(Sound_Folder+"combined.mp3", format='mp3')

course_filename = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/Title/Pitch_Deck_T_climate-change-_t.docx"
course_design_variables = {"filename": course_filename}
#course_parts, doc,sumerized_content = extract_course_information(course_design_variables)
#generate_voice(sumerized_content, TOPIC)













"""#Upload posts to linkedin 🔥🌹👇🙏🌀:"""

#!git clone https://github.com/So-AI-love/chatgpt-prompts-for-academic-writing

#%cd chatgpt-prompts-for-academic-writing

Topic = TOPIC
#TOPIC_0 = f"Analyze the current situation in the Islamic Republic of Iran and the challenges faced by resistance forces. And Identify effective strategies used by resistance movements to navigate challenging political environments."
#TOPIC_0 = f"Could you provide more insights into the challenges faced by the opposition groups in Iran and how they could overcome these challenges to effectively organize resistance against the Islamic Republic?"

Question=Topic
#PASSWORD =  # @param {type:"string"}
if not (Question == ""):

    TOPIC  = Question

else:
    TOPIC  = TOPIC_0

    print("Please Input your Mega IDs.")
# @markdown *After signing
print ('Your question is:',TOPIC)# has done successfully")

main_variables_0 = {
      'TOPIC': TOPIC,
      'RESEARCH_DOMAIN': RESEARCH_DOMAIN,
      'PARAGRAPH': PARAGRAPH,
      'PARAGRAPHS': PARAGRAPHS,
      'TOPIC_SENTENCE': TOPIC_SENTENCE,
      'LANGUAGE': LANGUAGE,
      'ABSTRACT_PARAGRAPH': ABSTRACT_PARAGRAPH,
      'BIBLIOGRAPHY': BIBLIOGRAPHY,
      'THEORY1': THEORY1,
      'THEORY2': THEORY2,
      'RESEARCH_QUESTIONS': RESEARCH_QUESTIONS,
      'ACTION': ACTION,
      'RESULT_PARAGRAPHS': RESULT_PARAGRAPHS,
      'DATE': DATE,
      'NUMBER_OF_DAYS_MONTHS_YEARS': NUMBER_OF_DAYS_MONTHS_YEARS,
      'role' : role,
      'category':f"{category}",
  }

# List of prompts for generating academic papers
prompts_Academic = [
f" As ChatGPT expert in the role of {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
# Improving Language
f"Write a counterargument to the following claim: '{PARAGRAPH}'",
f"Rewrite this in an academic voice: '{PARAGRAPH}'",
f"Expand these notes: '{PARAGRAPH}'",
f"Provide me a list of words and phrases which were repeatedly / more than 3 times used: '{PARAGRAPHS}'",
f"Provide me a list of synonyms for '{PARAGRAPH}' and evaluate them in the context of '{PARAGRAPH}'",
f"Act as a language expert, proofread my paper on '{TOPIC_SENTENCE}' while putting a focus on grammar and punctuation.",
f"In the context of '{RESEARCH_DOMAIN}' translate '{PARAGRAPH}' into the '{LANGUAGE}' language.",

  # Brainstorming
  f"Find a research topic for a PhD in the area of '{TOPIC}'",
  f"Write a detailed proposal on the following research topic. Make sure it is free from plagiarism. '{PARAGRAPH}'",
  f"Identify gaps in the literature on '{TOPIC_SENTENCE}'",
  f"Generate 10 academic research questions about '{PARAGRAPHS}'",
  f"Generate a list of research hypotheses related to '{TOPIC_SENTENCE}'",
  f"Identify potential areas for future research in the context of this '{TOPIC_SENTENCE}'",
  f"Suggest novel applications of '{TOPIC_SENTENCE}' within '{RESEARCH_DOMAIN}'",

  # Title/Topic Sentence
  f"Suggest 5 titles for the following abstract: '{ABSTRACT_PARAGRAPH}'",
  f"Write a topic sentence for this paragraph: '{PARAGRAPH}'",

  # Keywords
  f"Provide 5 keywords for this: '{PARAGRAPHS}'",

  # Abstract
  f"Generate an abstract for a scientific paper based on this information for: '{PARAGRAPHS}'",

  # Outline
  f"Generate an outline for '{TOPIC_SENTENCE}'",
  f"I want to write a journal article about '{TOPIC_SENTENCE}'. Give me an outline for the article that I can use as a starting point.",

  # Introduction
  f"Come up with an introduction for the following research topic: '{TOPIC_SENTENCE}'",

  # Literature Review
  f"Conduct a literature review on '{TOPIC_SENTENCE}' and provide review paper references",
  f"Provide me with references and links to papers in '{PARAGRAPH}'",
  f"Summarize the scholarly literature including in-text citations on '{PARAGRAPHS}'",
  f"Write this in standard Harvard referencing '{PARAGRAPH}'",
  f"Convert this '{BIBLIOGRAPHY}' from MLA to APA style.",
  f"Compare and contrast '{THEORY1}' and '{THEORY2}' in the context of '{RESEARCH_DOMAIN}'",

  # Methodology
   f"Create objectives and methodology for '{TOPIC_SENTENCE}'",
   f"Write a detailed methodology for the topic: '{TOPIC_SENTENCE}'",
   f"Analyze the strengths and weaknesses of this methodology: '{PARAGRAPHS}'",
   f"Write objectives for this study: '{TOPIC_SENTENCE}'",
   f"What are the limitations of using '{TOPIC_SENTENCE}' in '{RESEARCH_DOMAIN}'?",
   f"Create a recipe for the methods used in this '{PARAGRAPHS}'",
   f"Suggest interdisciplinary approaches to '{TOPIC_SENTENCE}'",
   f"Explain how qualitative/quantitative research methods can be used to address '{RESEARCH_QUESTIONS}'",
   f"Recommend best practices for data collection and analysis in '{TOPIC_SENTENCE}'",

   # Experiments
   f"Design an experiment that '{ACTION}'",

   # Results
   f"Write a result section for the following paragraphs. Please write this in the third person. '{PARAGRAPHS}'",

   # Discussion
   f"Discuss this results: '{RESULT_PARAGRAPHS}'",

   # Conclusion
   f"Generate a conclusion for this: '{PARAGRAPHS}'",
   f"Give recommendations and conclusion for: '{PARAGRAPHS}'",

   # Future Works
   f"Can you suggest 3 directions for future research on this topic: '{PARAGRAPH}'",

   # Plan/Presentation
   f"Develop a research plan for: '{TOPIC_SENTENCE}'",
   f"Write a schedule for completion in '{TOPIC_SENTENCE}' in NUMBER OF DAYS MONTHS YEARS which is '{NUMBER_OF_DAYS_MONTHS_YEARS}'",
   f"The deadline for the submission of the first draft is '{DATE}'. Give me a week-by-week breakdown so I can plan my writing better.",
   f"Write a sensational press release for this research: '{PARAGRAPHS}'",
   f"Make this more persuasive: '{PARAGRAPH}'",
   f"Write 3 tweets about this research? '{PARAGRAPHS}'",
]

prompt_Word_Topic_Academic = [
f" As ChatGPT expert in the role of {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",

  # Improving Language
  f"1. Write a counterargument to the following claim: ''",
  f"2. Rewrite this in an academic voice: ''",
  f"3. Expand these notes: ''",
  f"4. Provide me a list of words and phrases which were repeatedly / more than 3 times used: ''",
  f"5. Provide me a list of synonyms for '' and evaluate them in the context of ''",
  f"6. Act as a language expert, proofread my paper on '' while putting a focus on grammar and punctuation.",
  f"7. In the context of '' translate '' into the '' language.",

  # Brainstorming
  f"8. Find a research topic for a PhD in the area of ''",
  f"9. Write a detailed proposal on the following research topic. Make sure it is free from plagiarism. ''",
  f"10. Identify gaps in the literature on ''",
  f"11. Generate 10 academic research questions about ''",
  f"12. Generate a list of research hypotheses related to ''",
  f"13. Identify potential areas for future research in the context of this ''",
  f"14. Suggest novel applications of '' within ''",

  # Title/Topic Sentence
  f"15. Suggest 5 titles for the following abstract: ''",
  f"16. Write a topic sentence for this paragraph: ''",

  # Keywords
  f"17. Provide 5 keywords for this: ''",

  # Abstract
  f"18. Generate an abstract for a scientific paper based on this information for: ''",

  # Outline
  f"19. Generate an outline for ''",
  f"20. I want to write a journal article about ''. Give me an outline for the article that I can use as a starting point.",

  # Introduction
  f"21. Come up with an introduction for the following research topic: ''",

  # Literature Review
  f"22. Conduct a literature review on '' and provide review paper references",
  f"23. Provide me with references and links to papers in ''",
  f"24. Summarize the scholarly literature including in-text citations on ''",
  f"25. Write this in standard Harvard referencing ''",
  f"26. Convert this '' from MLA to APA style.",
  f"27. Compare and contrast '' and '' in the context of ''",

  # Methodology
  f"28. Create objectives and methodology for ''",
  f"29. Write a detailed methodology for the topic: ''",
  f"30. Analyze the strengths and weaknesses of this methodology: ''",
  f"31. Write objectives for this study: ''",
  f"32. What are the limitations of using '' in ''?",
  f"33. Create a recipe for the methods used in this ''",
  f"34. Suggest interdisciplinary approaches to ''",
  f"35. Explain how qualitative/quantitative research methods can be used to address ''",
  f"36. Recommend best practices for data collection and analysis in ''",

  # Experiments
  f"37. Design an experiment that ''",

  # Results
  f"38. Write a result section for the following paragraphs. Please write this in the third person. ''",

  # Discussion
  f"39. Discuss this results: ''",

  # Conclusion
  f"40. Generate a conclusion for this: ''",
  f"41. Give recommendations and conclusion for: ''",

  # Future Works
  f"42. Can you suggest 3 directions for future research on this topic: ''",

  # Plan/Presentation
  f"43. Develop a research plan for: ''",
  f"44. Write a schedule for completion in '' in NUMBER OF DAYS MONTHS YEARS which is ''",
  f"45. The deadline for the submission of the first draft is ''. Give me a week-by-week breakdown so I can plan my writing better.",
  f"46. Write a sensational press release for this research: ''",
  f"47. Make this more persuasive: ''",
  f"48. Write 3 tweets about this research? ''",
]

"""#Goal adding 🙏👇🌸"""

#TOPIC_0 = f"Analyze the current situation in the Islamic Republic of Iran and the challenges faced by resistance forces. And Identify effective strategies used by resistance movements to navigate challenging political environments."
#TOPIC_0 = f"Could you provide more insights into the challenges faced by the opposition groups in Iran and how they could overcome these challenges to effectively organize resistance against the Islamic Republic?"

Question=Topic
#PASSWORD =  # @param {type:"string"}
if not (Question == ""):

    TOPIC  = Question

else:
    TOPIC  = TOPIC_0

    print("Please Input your Mega IDs.")
# @markdown *After signing
print ('Your question is:',TOPIC)# has done successfully")
main_variables_0 = {
   'TOPIC': TOPIC,
   'PARAGRAPH':PARAGRAPH,
    'role':role
}

prompts = [
# Understanding the Issue
f"What are the key aspects of {main_variables_0['TOPIC']} that need to be addressed?",

# Mind Mapping
f"Create a mind map of the main elements of {main_variables_0['TOPIC']} and how they are interconnected.",

# Affinity Diagramming
f"Write down ideas on sticky notes about how to improve {main_variables_0['TOPIC']}. Then, group these ideas based on common themes.",

# Round-Robin Brainstorming
f"Take turns sharing ideas on how to improve {main_variables_0['TOPIC']}. Make sure everyone has a chance to contribute.",

# Reverse Brainstorming
f"Think of ways to create the problem in {main_variables_0['TOPIC']}. This will help you understand how to solve it.",

# SCAMPER
f"Apply the SCAMPER method to existing solutions or situations in {main_variables_0['TOPIC']}. This will spark new ideas.",

# Cross-Functional Brainstorming
f"Assemble a diverse group of people from various backgrounds and disciplines to tackle {main_variables_0['TOPIC']}. This will ensure a more rounded and innovative solution.",

# Future Backwards
f"Envision a future state where {main_variables_0['TOPIC']} has been solved successfully. Starting from this endpoint, work backward to identify the series of events and decisions that led to that future."
]

#TOPIC_0 = "task to investigate various gaming groups in Iran, following the Mahsa Movement in the second year. The gaming groups being investigated include the dark solidarity group, the dark trilogy, the dark quadrilogy, the regular people, the bright solidarity group, and the bright trilogy. The aim is to gather information about each group, analyze their characteristics, objectives, and any associated psychological syndromes. This information will then be presented in a table for easier understanding and comparison." # Replace this with your topic
#RESEARCH_DOMAIN = "Environmental startup field" # Replace this with your research domain

global docx_path,Pdf_Dir,prompt_Word_Topic

if not (Question == ""):

    TOPIC  = Question

else:
    TOPIC  = TOPIC_0

main_variables_0 = {
   'TOPIC': TOPIC,
   'RESEARCH_DOMAIN' : RESEARCH_DOMAIN,
   'PARAGRAPH':PARAGRAPH
}

TOPIC = f"{main_variables_0['TOPIC']}"
RESEARCH_DOMAIN = "{RESEARCH_DOMAIN}"

prompts_old = [
  f"For the {TOPIC} of Business Overview, provide a detailed description of your business, including its location, legal structure, owners, vision, mission, and history.",
  f"For the {TOPIC} of Market Analysis, provide information about your target market, market size, growth potential, competitors, market trends, and regulatory environment.",
  f"For the {TOPIC} of Products and Services, describe your products and services in detail.",
  f"For the {TOPIC} of Marketing and Sales Strategies, outline your marketing, sales, pricing, and customer retention strategies.",
  f"For the {TOPIC} of Operations Plan, describe daily business activities, individuals responsible, tools and equipment required, inventory, cost, and any other special requirements.",
  f"For the {TOPIC} of Management Team, describe the founders, key executives, senior management, their educational and professional background, compensation plan, business hierarchy, and business advisors/consultants.",
  f"For the {TOPIC} of Financial Plan, provide a thorough understanding of operational costs, net profit, and financing to estimate revenue projections.",
  f"For the {TOPIC} of Executive Summary, provide an overview of the entire business plan. This is usually written after the entire plan is ready.",
  f"For the {TOPIC} of Appendix, provide additional information supporting your business plan’s main content."
]

prompts_old_2 = [
f"suggest one Business Plans repost Title based of This Topic :({TOPIC}) and the description:({PARAGRAPH}."
 f"Provide a detailed description of your business, including its location, legal structure, owners, vision, mission, and history. This is for the {TOPIC} of Business Overview. More Description about the Topic is show at here: {PARAGRAPH}",
 f"Provide information about your target market, market size, growth potential, competitors, market trends, and regulatory environment. This is for the {TOPIC} of Market Analysis.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Describe your products and services in detail. This is for the {TOPIC} of Products and Services.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Outline your marketing, sales, pricing, and customer retention strategies. This is for the {TOPIC} of Marketing and Sales Strategies.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Describe daily business activities, individuals responsible, tools and equipment required, inventory, cost, and any other special requirements. This is for the {TOPIC} of Operations Plan.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Describe the founders, key executives, senior management, their educational and professional background, compensation plan, business hierarchy, and business advisors/consultants. This is for the {TOPIC} of Management Team.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Provide a thorough understanding of operational costs, net profit, and financing to estimate revenue projections. This is for the {TOPIC} of Financial Plan.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Provide an overview of the entire business plan. This is usually written after the entire plan is ready. This is for the {TOPIC} of Executive Summary.More Description about the Topic is show at here: {PARAGRAPH}",
 f"Provide additional information supporting your business plan’s main content. This is for the {TOPIC} of Appendix.More Description about the Topic is show at here: {PARAGRAPH}"
f"Provide additional information about SWOT for supporting your business plan’s main content. This is for the {TOPIC} of Appendix.More Description about the Topic is show at here: {PARAGRAPH}"

]

prompt_Word_Topic_old_2 = [
   f"suggest one Business Plans repost Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}."
   "Provide business overview details",
   "Describe target market information",
   "Detail products and services",
   "Outline marketing, sales strategies",
   "Describe daily business activities",
   "Detail management team",
   "Understand operational costs, profit",
   "Provide business plan overview",
   "Support business plan with additional info"
   " SWOT Analysis "
]

#https://www.phind.com/search? cache=dmmj0id2em6rm8lo88sqhm6o
prompts_old_3 = [
  f"suggest one Business Plans repost Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",

  f"1. **Executive Summary**: Provide a concise summary of the business, its goals, and the market it operates in. This is for the {TOPIC} of Executive Summary. More Description about the Topic is show at here: {PARAGRAPH}",
  f"2. **Company Description**: Provide a detailed description of the company, its mission, vision, and the problem it aims to solve. This is for the {TOPIC} of Company Description. More Description about the Topic is show at here: {PARAGRAPH}",
  f"3. **Market Analysis**: Provide a comprehensive PESTEL analysis for the company, including Political, Economic, Sociocultural, Technological, Environmental, and Legal factors. This is for the {TOPIC} of Market Analysis. More Description about the Topic is show at here: {PARAGRAPH}",
  f"4. **Organization and Management**: Describe the company's organizational structure, its team, and their roles and responsibilities. This is for the {TOPIC} of Organization and Management. More Description about the Topic is show at here: {PARAGRAPH}",
  f"5. **Service or Product Line**: Describe the services or products offered by the company. This is for the {TOPIC} of Service or Product Line. More Description about the Topic is show at here: {PARAGRAPH}",
  f"6. **Marketing and Sales Strategy**: Outline the strategies for marketing and sales, including the target audience, user stories, suitable business strategies, and marketing platforms. This is for the {TOPIC} of Marketing and Sales Strategy. More Description about the Topic is show at here: {PARAGRAPH}",
  f"7. **Funding Request**: Detail the amount of funding needed, how it will be used, and the expected return on investment. This is for the {TOPIC} of Funding Request. More Description about the Topic is show at here: {PARAGRAPH}",
  f"8. **Financial Projections**: Provide financial forecasts for the next few years, including revenue, costs, and profitability. This is for the {TOPIC} of Financial Projections. More Description about the Topic is show at here: {PARAGRAPH}",
  f"9. **Appendix**: Include any additional information that supports the business plan, such as legal documents, contracts, or market research data. This is for the {TOPIC} of Appendix. More Description about the Topic is show at here: {PARAGRAPH}",
  f"10. **Industry Insight**: Provide a detailed industry insight for the business plan. This is for the {TOPIC} of Industry Insight. More Description about the Topic is show at here: {PARAGRAPH}",
  f"11. **SWOT Analysis**: Conduct a SWOT analysis for the business plan. This is for the {TOPIC} of SWOT Analysis. More Description about the Topic is show at here: {PARAGRAPH}",
  f"12. **Target Audience and User Stories**: Identify the target audience and user stories for the business plan. This is for the {TOPIC} of Target Audience and User Stories. More Description about the Topic is show at here: {PARAGRAPH}",
  f"13. **Suitable Business Strategies**: Provide suitable business strategies for the business plan. This is for the {TOPIC} of Suitable Business Strategies. More Description about the Topic is show at here: {PARAGRAPH}",
  f"14. **Business Frameworks**: Provide business frameworks for the business plan. This is for the {TOPIC} of Business Frameworks. More Description about the Topic is show at here: {PARAGRAPH}",
  f"15. **Requirements Analysis**: Conduct a requirements analysis for the business plan. This is for the {TOPIC} of Requirements Analysis. More Description about the Topic is show at here: {PARAGRAPH}",
  f"16. **Additional Revenue Streams**: Identify additional revenue streams for the business plan. This is for the {TOPIC} of Additional Revenue Streams. More Description about the Topic is show at here: {PARAGRAPH}",
  f"17. **Marketing Strategy and Brand Awareness**: Provide a marketing strategy and brand awareness for the business plan. This is for the {TOPIC} of Marketing Strategy and Brand Awareness. More Description about the Topic is show at here: {PARAGRAPH}",
  f"18. **Branding Suggestions**: Provide branding suggestions for the business plan. This is for the {TOPIC} of Branding Suggestions. More Description about the Topic is show at here: {PARAGRAPH}",
  f"19. **Recommended Marketing Platforms**: Recommend marketing platforms for the business plan. This is for the {TOPIC} of Recommended Marketing Platforms. More Description about the Topic is show at here: {PARAGRAPH}",
  f"20. **Game-Changing Idea**: Provide a game-changing idea for the business plan. This is for the {TOPIC} of Game-Changing Idea. More Description about the Topic is show at here: {PARAGRAPH}",
  f"21. **Porter's Five Forces Analysis**: Conduct a Porter's Five Forces analysis for the business plan. This is for the {TOPIC} of Porter's Five Forces Analysis. More Description about the Topic is show at here: {PARAGRAPH}",
  f"22. **CATWOE Analysis**: Provide a CATWOE analysis for the business plan. This is for the {TOPIC} of CATWOE Analysis. More Description about the Topic is show at here: {PARAGRAPH}",
]

prompts_business_plan = [
    f"suggest one Business Plans repost Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
    f"1. **Executive Summary** (As a {role}): In this section, provide a concise summary of the business highlighting its unique value proposition, target market, and projected growth. Describe the company's goals, mission, and the market landscape it operates in. This is for the {TOPIC} of Executive Summary. More Description about the Topic is shown here: {PARAGRAPH}",
    f"2. **Company Description** (As a {role}): Detail the company's history, its founding principles, values, and the problem it addresses. Explain the company's vision, its core competencies, and how it stands out in the market. This is for the {TOPIC} of Company Description. More Description about the Topic is shown here: {PARAGRAPH}",
    f"3. **Market Analysis** (As a {role}): Conduct an in-depth PESTEL analysis covering Political, Economic, Sociocultural, Technological, Environmental, and Legal factors. Provide insights into market trends, potential risks, and opportunities. This is for the {TOPIC} of Market Analysis. More Description about the Topic is shown here: {PARAGRAPH}",
    f"4. **Organization and Management** (As a {role}): Outline the company's organizational structure, key personnel, their roles, and responsibilities. Explain how the team contributes to the company's success. This is for the {TOPIC} of Organization and Management. More Description about the Topic is shown here: {PARAGRAPH}",
    f"5. **Service or Product Line** (As a {role}): Elaborate on the services or products offered by the company. Highlight their unique features, benefits, and how they fulfill market needs. This is for the {TOPIC} of Service or Product Line. More Description about the Topic is shown here: {PARAGRAPH}",
    f"6. **Marketing and Sales Strategy** (As a {role}): Explain the strategies for marketing and sales, target audience identification, user stories, and chosen marketing platforms. This is for the {TOPIC} of Marketing and Sales Strategy. More Description about the Topic is shown here: {PARAGRAPH}",
    f"7. **Funding Request** (As a {role}): Specify the funding amount required, the allocation plan, and the anticipated return on investment. Justify the funding request based on growth projections. This is for the {TOPIC} of Funding Request. More Description about the Topic is shown here: {PARAGRAPH}",
    f"8. **Financial Projections** (As a {role}): Present detailed financial forecasts covering revenue, costs, and profitability for the upcoming years. Base projections on market analysis and business strategies. This is for the {TOPIC} of Financial Projections. More Description about the Topic is shown here: {PARAGRAPH}",
    f"9. **Appendix** (As a {role}): Include supporting documents like legal papers, contracts, and additional market research data that strengthen the business plan. This is for the {TOPIC} of Appendix. More Description about the Topic is shown here: {PARAGRAPH}",
    f"10. **Industry Insight** (As a {role}): Provide a comprehensive analysis of the industry, including current trends, competitive landscape, and future predictions. This is for the {TOPIC} of Industry Insight. More Description about the Topic is shown here: {PARAGRAPH}",
    f"11. **SWOT Analysis** (As a {role}): Perform a SWOT analysis, highlighting the company's strengths, weaknesses, opportunities, and threats. This is for the {TOPIC} of SWOT Analysis. More Description about the Topic is shown here: {PARAGRAPH}",
    f"12. **Target Audience and User Stories** (As a {role}): Identify the target audience demographics and behaviors. Create user stories illustrating their needs and experiences. This is for the {TOPIC} of Target Audience and User Stories. More Description about the Topic is shown here: {PARAGRAPH}",
    f"13. **Suitable Business Strategies** (As a {role}): Present specific business strategies tailored to the company's objectives, market conditions, and competitive positioning. This is for the {TOPIC} of Suitable Business Strategies. More Description about the Topic is shown here: {PARAGRAPH}",
    f"14. **Business Frameworks** (As a {role}): Propose relevant business frameworks or methodologies to guide the company's operations and decision-making. This is for the {TOPIC} of Business Frameworks. More Description about the Topic is shown here: {PARAGRAPH}",
    # 14-1. **SWOT Analysis**:
    f"Identify strengths, weaknesses, opportunities, and threats affecting the {TOPIC} business plan. This is for the {TOPIC} of SWOT Analysis. More Description about the Topic is shown here: {PARAGRAPH} The role of ChatGPT is to assist in generating insights and strategies.",
    # 14-2. **Porter's Five Forces**:
    f"Analyze industry competitiveness to understand market dynamics and potential competitors in the context of {TOPIC}. This is for the {TOPIC} of Porter's Five Forces Analysis. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT's role is to provide a comprehensive analysis of market forces.",
    # 14-3. **Value Chain Analysis**:
    f"Break down activities to enhance value creation and operational efficiency for the {TOPIC} business plan. This is for the {TOPIC} of Value Chain Analysis. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT will help in identifying areas of value creation and optimization.",
    # 14-4. **Business Model Canvas**:
    f"Visualize and communicate the business model clearly for the {TOPIC} stakeholders. This is for the {TOPIC} of Business Model Canvas. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT's role is to aid in presenting a comprehensive business model.",
    # 14-5. **Ansoff Matrix**:
    f"Determine growth strategies for market penetration, development, and diversification tailored to {TOPIC}. This is for the {TOPIC} of Ansoff Matrix. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT will assist in identifying growth strategies for the business.",
    # 14-6. **PESTEL Analysis**:
    f"Assess political, economic, social, technological, environmental, and legal factors impacting the {TOPIC} business plan. This is for the {TOPIC} of PESTEL Analysis. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT's role is to analyze external factors affecting the business environment.",
    # 14-7. **Balanced Scorecard**:
    f"Monitor performance against strategic objectives and adjust the {TOPIC} business plan accordingly. This is for the {TOPIC} of Balanced Scorecard. More Description about the Topic is shown here: {PARAGRAPH} ChatGPT's role is to assist in monitoring and aligning strategies with objectives.",
    f"15. **Requirements Analysis** (As a {role}): Detail the requirements necessary for successful implementation of the business plan, including resources, technology, and workforce. This is for the {TOPIC} of Requirements Analysis. More Description about the Topic is shown here: {PARAGRAPH}",
    f"16. **Additional Revenue Streams** (As a {role}): Identify and explore potential additional revenue streams or business diversification opportunities. This is for the {TOPIC} of Additional Revenue Streams. More Description about the Topic is shown here: {PARAGRAPH}",
    f"17. **Marketing Strategy and Brand Awareness** (As a {role}): Develop a comprehensive marketing strategy focusing on brand awareness, positioning, and customer acquisition. This is for the {TOPIC} of Marketing Strategy and Brand Awareness. More Description about the Topic is shown here: {PARAGRAPH}",
    f"18. **Branding Suggestions** (As a {role}): Provide recommendations for branding strategies, including visual elements, messaging, and brand personality. This is for the {TOPIC} of Branding Suggestions. More Description about the Topic is shown here: {PARAGRAPH}",
    f"19. **Recommended Marketing Platforms** (As a {role}): Recommend specific marketing platforms or channels suitable for the target audience and business objectives. This is for the {TOPIC} of Recommended Marketing Platforms. More Description about the Topic is shown here: {PARAGRAPH}",
    f"20. **Game-Changing Idea** (As a {role}): Present an innovative idea or strategy that could revolutionize the industry or significantly impact the company's growth. This is for the {TOPIC} of Game-Changing Idea. More Description about the Topic is shown here: {PARAGRAPH}",
    f"21. **Porter's Five Forces Analysis** (As a {role}): Conduct a thorough Porter's Five Forces analysis to evaluate the competitive forces within the industry. Assess factors affecting profitability and market attractiveness. This is for the {TOPIC} of Porter's Five Forces Analysis. More Description about the Topic is shown here: {PARAGRAPH}",
    f"22. **CATWOE Analysis** (As a {role}): Perform a comprehensive CATWOE analysis considering Customers, Actors, Transformation, Worldview, Owners, and Environmental Constraints. Analyze the impacts on the business strategy and operations. This is for the {TOPIC} of CATWOE Analysis. More Description about the Topic is shown here: {PARAGRAPH}",
]
prompts_business_plan_presentation = [
  # Plan/Presentation
  #f"Step 9: As ChatGPT {role} in Business  plan publishing course design draft via internet by the topic of:((( {course_design_variables['topic']} )), in the project field of {course_design_variables['specific_project']}.",
  #f"Step 9: As ChatGPT {role} in financial  model publishing FINANCIAL model design draft via internet by the topic of:((({TOPIC} )), in the project field of ({PARAGRAPH}).",
  f"24.As ChatGPT role of ({role}), Make this business  plan report more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"25.As ChatGPT role of ({role}) in advertisment field, Write 3 tweeter post about this Bussness plan , and this the perviuse contnet made?",
  f"26.As ChatGPT role of ({role}) in advertisment field, Write 3 Instagram post about this Bussiness plan, ", # and this the perviuse contnet made?",
  f"27.As ChatGPT role of ({role}) in weblog writer, Write 1 medium weblog post about this Bussness Plan , ", #and this the perviuse contnet made?",
  f"28.As ChatGPT role of ({role}) in bussiness post writing, Write 1 LinkedIn post about this business plan, ", #and this the perviuse contnet made?",
  f"29. As ChatGPT role of ({role}) write an email to related organization for introducing the opportunity of coaporation with us in this field by seeing the above report and the related LinkedIn, tweeter, Instagram, medium and the pdf file of this report ",


]


prompt_Word_Topic_business_plan = [
f"suggest one Business Plans repost Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
"1. Executive Summary: Business overview",
"2. Company Description: Company identity",
"3. Market Analysis: External factors",
"4. Organization: Organizational structure",
"5. Products/Services: Services/Products",
"6. Marketing Strategy: Marketing strategies",
"7. Funding: Funding details",
"8. Financial Projections: Financial forecasts",
"9. Appendix: Additional information",
"10. Industry: Industry overview",
"11. SWOT: Strengths, Weaknesses, Opportunities, Threats",
"12. Target Audience: Target audience and user stories",
"13. Business Strategies: Business strategies",
"14. Frameworks: Business frameworks",
"14-1. **SWOT Analysis**: Identify strengths, weaknesses, opportunities, and threats. Business insights provided.",
"14-2. **Porter's Five Forces**: Analyze industry competitiveness, understand potential competitors.",
"14-3. **Value Chain Analysis**: Enhance value creation, improve operational efficiency.",
"14-4. **Business Model Canvas**: Visualize and communicate business model clearly.",
"14-5. **Ansoff Matrix**: Determine growth strategies for market penetration.",
"14-6. **PESTEL Analysis**: Assess political, economic, social factors impacting.",
"14-7. **Balanced Scorecard**: Monitor performance, align strategies with objectives.",
"15. Requirements: Requirements analysis",
"16. Revenue: Additional revenue",
"17. Marketing: Marketing and branding",
"18. Branding: Branding suggestions",
"19. Marketing Platforms: Recommended marketing platforms",
"20. Idea: Game-changing idea",
"21. Porter's Five Forces: Porter's Five Forces analysis",
"22. CATWOE: CATWOE analysis",
]
prompts_business_plan_presentation_title= [
#Plan/Presentation
#f"Episode 9-1: Write a sensational press release for this",
f"23.Make this more persuasive",
f"24. 3 tweets about this Report:",

f"25. 3 Instagram Post about this Report:",
f"25. Medium Post about this Report:",
f"27. LinkedIn Post about this Report:",
f"28. Organization email for request to do coaporation:",
]

#https://www.phind.com/search?cache=mn7fgo273k158vv941hewfxg
#TOPIC_0 = "task to investigate various gaming groups in Iran, following the Mahsa Movement in the second year. The gaming groups being investigated include the dark solidarity group, the dark trilogy, the dark quadrilogy, the regular people, the bright solidarity group, and the bright trilogy. The aim is to gather information about each group, analyze their characteristics, objectives, and any associated psychological syndromes. This information will then be presented in a table for easier understanding and comparison." # Replace this with your topic
#RESEARCH_DOMAIN = "Environmental startup field" # Replace this with your research domain

global docx_path,Pdf_Dir

if not (Question == ""):

    TOPIC  = Question

else:
    TOPIC  = TOPIC_0

main_variables_0 = {
   'TOPIC': TOPIC,
   'RESEARCH_DOMAIN' : RESEARCH_DOMAIN,
   'PARAGRAPH':PARAGRAPH,
}

TOPIC = f"{main_variables_0['TOPIC']}"
RESEARCH_DOMAIN = "{RESEARCH_DOMAIN}"


prompts_finantial = [
f"suggest one financial model report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
f"1. Do what for the '{TOPIC}' with this description: '{PARAGRAPH}'?, also use word system format as bolding and ...",
f"1. Critique the business model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"2. Calculate the startup costs for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"2. Critique the startup costs for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"3. Track the revenue for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"3. Critique the revenue tracking for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"4. Review the projections for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"4. Critique the projections for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"5. Generate a detailed financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system formats as bolding and ...",
f"5. Critique the detailed financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"6. Analyze the financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"6. Critique the financial model analysis for the '{TOPIC}' with this description: '{PARAGRAPH}'.also use word system format as bolding and ...",
f"7. Adjust the financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"7. Critique the adjustments made to the financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"8. Finalize the financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
f"8. Critique the finalized financial model for the '{TOPIC}' with this description: '{PARAGRAPH}'. also use word system format as bolding and ...",
]
prompts_finantial_presentation = [
  # Plan/Presentation
  f"Step 9: As ChatGPT  role in financial  model publishing FINANCIAL model design draft via internet by the topic of:((({TOPIC} )), in the project field of ({PARAGRAPH}).",
  f"21:.As ChatGPT role role in newspaper field, Write a sensational press release for this Financial Model and perviuse content made ", #in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"22.As ChatGPT role of ({role}), Make this financial  model more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"23.As ChatGPT role of ({role}) in advertisment field, Write 3 tweeter post about this Financial Model , and this the perviuse contnet made?",
  f"24.As ChatGPT role of ({role}) in advertisment field, Write 3 Instagram post about this Financial Model , ", # and this the perviuse contnet made?",
  f"25.As ChatGPT role of ({role}) in weblog writer, Write 1 medium weblog post about this Financial Model , ", #and this the perviuse contnet made?",
  f"26.As ChatGPT role of ({role}) in bussiness post writing, Write 1 LinkedIn post about this Financial Model , ", #and this the perviuse contnet made?",
  f"27. As ChatGPT role of ({role}) write an email to related organization for introducing the opportunity of coaporation with us in this field by seeing the above report and the related LinkedIn, tweeter, Instagram, medium and the pdf file of this report ",


]
#https://www.phind.com/search?cache=fbhlj5n08cwpl4y42l99w8sq
prompt_Word_Topic_finantial = [
  f"suggest one financial model report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
  "1. Determine tasks for topic.",
  "2. Critique business model.",
  "3. Calculate startup costs.",
  "4. Critique startup costs.",
  "5. Track revenue.",
  "6. Critique revenue tracking.",
  "7. Review projections.",
  "8. Critique projections.",
  "9. Generate detailed financial model.",
  "10. Critique financial model.",
  "11. Analyze financial model.",
  "12. Critique analysis.",
  "13. Adjust financial model.",
  "14. Critique adjustments.",
  "15. Finalize financial model.",
  "16. Critique finalized model.",
]
prompts_finantial_presentation_title= [
#Plan/Presentation
f"Episode last: Write a sensational press release for this",
f"L1. Make this more persuasive",
f"L2. 3 tweets about this Report:",

f"L3. 3 Instagram Post about this Report:",
f"L4. Medium Post about this Report:",
f"L5. LinkedIn Post about this Report:",
f"L6. Organization email for request to do coaporation:",
]

#TOPIC_0 = "task to investigate various gaming groups in Iran, following the Mahsa Movement in the second year. The gaming groups being investigated include the dark solidarity group, the dark trilogy, the dark quadrilogy, the regular people, the bright solidarity group, and the bright trilogy. The aim is to gather information about each group, analyze their characteristics, objectives, and any associated psychological syndromes. This information will then be presented in a table for easier understanding and comparison." # Replace this with your topic
#RESEARCH_DOMAIN = "Making Pitch deck file for the TOPIC "

if not (Question == ""):
   TOPIC = Question
else:
   TOPIC = TOPIC_0

main_variables_0 = {
  'TOPIC': TOPIC,
  'RESEARCH_DOMAIN' : RESEARCH_DOMAIN,
  'PARAGRAPH':PARAGRAPH,
}

prompts_pitch_0 = [
f"suggest one pitch deck  report Title in less than 15 word, based of This Topic :({main_variables_0['TOPIC']}) and the description:({main_variables_0['PARAGRAPH']}).",
f"1.What are the key aspects of {main_variables_0['TOPIC']} that need to be addressed in the context of {main_variables_0['PARAGRAPH']}?",
f"2.Create a mind map of the main elements of {main_variables_0['TOPIC']} and how they are interconnected in the context of {main_variables_0['PARAGRAPH']}.",
f"3.Write down ideas on sticky notes about how to improve {main_variables_0['TOPIC']} in the context of {main_variables_0['PARAGRAPH']}. Then, group these ideas based on common themes.",
f"4.Take turns sharing ideas on how to improve {main_variables_0['TOPIC']} in the context of {main_variables_0['PARAGRAPH']}. Make sure everyone has a chance to contribute.",
f"5.Think of ways to create the problem in {main_variables_0['TOPIC']} in the context of {main_variables_0['PARAGRAPH']}. This will help you understand how to solve it.",
f"6.Apply the SCAMPER method to existing solutions or situations in {main_variables_0['TOPIC']} in the context of {main_variables_0['PARAGRAPH']}. This will spark new ideas.",
f"7.Assemble a diverse group of people from various backgrounds and disciplines to tackle {main_variables_0['TOPIC']} in the context of {main_variables_0['PARAGRAPH']}. This will ensure a more rounded and innovative solution.",
f"8.Envision a future state where {main_variables_0['TOPIC']} has been solved successfully in the context of {main_variables_0['PARAGRAPH']}. Starting from this endpoint, work backward to identify the series of events and decisions that led to that future.",
]

prompt_Word_Topic_pitch_0 = [
  f"suggest one pitch deck report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
  f"1. Identify key aspects of startup pitch deck.",
  f"2. Create a mind map of startup elements.",
  f"3. Brainstorm ideas for startup improvement.",
  f"4. Share ideas for startup improvement.",
  f"5. Identify startup problems for solutions.",
  f"6. Apply SCAMPER method to startup.",
  f"7. Assemble diverse team for startup.",
  f"8. Envision successful startup future.",
]

# Define the variables

# Create the corrected 19-line ChatGPT prompt as a list
prompts_pitch = [
  f"suggest one pitch deck  report Title in less than 15 word, based of This Topic :({main_variables_0['TOPIC']}) and the description:({main_variables_0['PARAGRAPH']}).",
  f"1. Introduction: {TOPIC} and its mission. {PARAGRAPH}",
  f"2. Problem Statement: Identify challenges and pain points in content creation without AI. Explain why current methods are insufficient. {PARAGRAPH}",
  f"3. Solution: Present {TOPIC} as the solution. Emphasize unique value proposition and benefits. {PARAGRAPH}",
  f"4. Market Opportunity: Showcase the market demand for AI in content creation. Identify the target audience and potential market size. {PARAGRAPH}",
  f"5. Product Overview: Detail features and functionalities of {TOPIC}. Explain how it works and its relevance to content creators. {PARAGRAPH}",
  f"6. Competitive Landscape: Analyze competitors and highlight what sets {TOPIC} apart. Showcase any proprietary technology or unique approaches. {PARAGRAPH}",
  f"7. Business Model: Clearly outline your revenue model for {TOPIC}. Specify how you plan to monetize the guide (e.g., subscription, one-time purchase). {PARAGRAPH}",
  f"8. Traction and Milestones: Share any achievements, milestones, or user metrics for {TOPIC}. Highlight partnerships or collaborations. {PARAGRAPH}",
  f"9. Market Positioning: Define {TOPIC}'s position in the market. Explain how you plan to capture and maintain market share. {PARAGRAPH}",
  f"10. Financial Projections: Present financial forecasts, including revenue projections and expenses for {TOPIC}. Provide a clear understanding of the return on investment. {PARAGRAPH}",
  f"11. Use of Funds: Outline how you plan to use the funding you're seeking for {TOPIC}. Break down the allocation of funds across key areas. {PARAGRAPH}",
  f"12. Team: Introduce the founding team members and their expertise for {TOPIC}. Highlight relevant experience and skills. {PARAGRAPH}",
  f"13. Demo or Product Showcase: If possible, include a demonstration of {TOPIC}. Showcase its functionality and ease of use. {PARAGRAPH}",
  f"14. User Testimonials or Case Studies: Include feedback from users who have tested or used {TOPIC}. Present any case studies demonstrating the guide's effectiveness. {PARAGRAPH}",
  f"15. Market Trends and Future Outlook: Discuss relevant trends in AI and content creation for {TOPIC}. Highlight how {TOPIC} aligns with the future direction of the industry. {PARAGRAPH}",
  f"16. Risks and Mitigations: Address potential risks associated with your business for {TOPIC}. Provide strategies and plans to mitigate these risks. {PARAGRAPH}",
  f"17. Ask/Call to Action: Clearly state what you are seeking from potential investors or partners for {TOPIC}. Specify the amount of funding you are looking for. {PARAGRAPH}",
  f"18. Contact Information: Provide contact details for further inquiries for {TOPIC}. Include social media handles and a website link. {PARAGRAPH}",
  f"19. Appendix: Include any additional supporting materials, such as charts, graphs, or detailed market research for {TOPIC}. {PARAGRAPH}",
]
prompts_pitch_presentation = [
  # Plan/Presentation
  f"20.Write a sensational press release for this Pitch Deck in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"21.Make this Pitch Deck Plan more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"22.Write 3 tweets about this Pitch Deck in this topic ({TOPIC}), and this description? Description :((('{PARAGRAPH}')))"


]

# Create the corrected 19-line ChatGPT prompt as a list
prompt_Word_Topic_pitch = [
f"suggest one pitch deck  report Title in less than 15 word, based of This Topic :({main_variables_0['TOPIC']}) and the description:({main_variables_0['PARAGRAPH']}).",f"1. Introduction: Overview of AI-content guide and mission.",
 f"2. Problem Statement: Identify challenges in AI-free content creation.",
 f"3. Solution: Present AI-content guide as solution.",
 f"4. Market Opportunity: Showcase demand and potential market size.",
 f"5. Product Overview: Describe features of AI-content guide.",
 f"6. Competitive Landscape: Analyze competitors and unique aspects.",
 f"7. Business Model: Outline revenue model and monetization strategy.",
 f"8. Traction and Milestones: Share achievements and user metrics.",
 f"9. Market Positioning: Define market position and growth strategy.",
 f"10. Financial Projections: Present financial forecasts.",
 f"11. Use of Funds: Outline fund usage and key areas.",
 f"12. Team: Introduce team members and their expertise.",
 f"13. Demo or Product Showcase: Showcase product functionality.",
 f"14. User Testimonials or Case Studies: Include user feedback.",
 f"15. Market Trends and Future Outlook: Discuss industry trends and alignment.",
 f"16. Risks and Mitigations: Address potential risks and mitigation plans.",
 f"17. Ask/Call to Action: State what you seek from investors.",
 f"18. Contact Information: Provide contact details.",
 f"19. Appendix: Include additional supporting materials.",
]
prompts_pitch_presentation_title =[
f"20. Write a sensational press release for this Pitch Deck:",
  f"21. Make this more persuasive",
  f"22. Write 3 tweets about this Pitch Deck? ",
]

#TOPIC_0 = "task to investigate various gaming groups in Iran, following the Mahsa Movement in the second year. The gaming groups being investigated include the dark solidarity group, the dark trilogy, the dark quadrilogy, the regular people, the bright solidarity group, and the bright trilogy. The aim is to gather information about each group, analyze their characteristics, objectives, and any associated psychological syndromes. This information will then be presented in a table for easier understanding and comparison." # Replace this with your topic
#RESEARCH_DOMAIN = "Making Pitch deck file for the TOPIC "

if not (Question == ""):
   TOPIC = Question
else:
   TOPIC = TOPIC_0

main_variables_0 = {
  'TOPIC': TOPIC,
  'RESEARCH_DOMAIN' : RESEARCH_DOMAIN,
  'PARAGRAPH':PARAGRAPH,
}

prompts_game_theory_1= [
f"suggest one Game Theory report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
f"1. Define the game structure for {TOPIC}: Identify the players, their strategies, and the possible outcomes of the game.",
f"2. Represent the game for {TOPIC}: This can be done using a matrix or a tree. In the matrix representation, each cell represents a possible outcome of the game.",
f"3. Analyze the game for {TOPIC}: Determine the best strategies for each player, the Nash equilibrium, and the potential outcomes of the game.",
f"4. Make decisions based on the analysis for {TOPIC}: Use the results of the analysis to determine the best course of action for each player.",
f"5. Implement the game for {TOPIC}: Write the code that simulates the game. This could involve creating a payoff matrix or a game tree, and writing functions to determine the best strategies and the Nash equilibrium.",
f"6. Test the game for {TOPIC}: Run the game simulation and check if the results are as expected. This could involve checking if the Nash equilibrium is correct, or if the best strategies lead to the desired outcomes.",
f"7. Optimize the game for {TOPIC}: If the results are not as expected, modify the game structure or the strategies, and run the simulation again.",
f"8. Document the game for {TOPIC}: Write a report or a paper that explains the game, the results, and the conclusions.",
f"9. Share the game for {TOPIC}: Share the results with others, and get feedback on the game.",
f"10. Update the game for {TOPIC}: Based on the feedback, update the game structure or the strategies, and run the simulation again.",
]



prompt_Word_Topic_game_theory_1 = [
  f"suggest one Game Theory report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
  "1.Define the game structure",
  "2.Represent the game",
  "3.Analyze the game",
  "4.Make decisions based on the analysis",
  "5.Implement the game",
  "6.Test the game",
  "7.Optimize the game",
  "8.Document the game",
  "9.Share the game",
  "10.Update the game",
]

# List of prompts for generating academic papers

Previous_CONTENT = '{Previous_CONTENT}'
prompts_Academic_proposal_critique= [
f" As ChatGPT expert in the role of {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
  f"Critically evaluate the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'. Discuss any potential issues, limitations, or controversies in the ideas expressed.",
  f"Identify the key points in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Explain the context of the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Summarize the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Identify the research methodology used in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Analyze the data collection and analysis methods used in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Identify the research questions in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Evaluate the conclusions drawn in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Identify the limitations of the research in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
  f"Identify any controversies or debates related to the research in the following content related to the topic '{TOPIC}': '{Previous_CONTENT}'.",
]
prompts_Academic_proposal_critique_presentation=[
# Plan/Presentation
  f".Write a sensational press release for this research in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f".Make this research Plan more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f".Write 3 tweets about this research in this topic ({TOPIC}), and this description? Description :((('{PARAGRAPH}')))"


]

prompt_Word_Topic_Academic_proposal_critique = [
f" As ChatGPT expert in the role of {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
f"1. Critically evaluate the following content related to the topic '': ''. Discuss any potential issues, limitations, or controversies in the ideas expressed.",
 f"2. Identify the key points in the following content related to the topic '': ''.",
 f"3. Explain the context of the following content related to the topic '': ''.",
 f"4. Summarize the following content related to the topic '': ''.",
 f"5. Identify the research methodology used in the following content related to the topic '': ''.",
 f"6. Analyze the data collection and analysis methods used in the following content related to the topic '': ''.",
 f"7. Identify the research questions in the following content related to the topic '': ''.",
 f"8. Evaluate the conclusions drawn in the following content related to the topic '': ''.",
 f"9. Identify the limitations of the research in the following content related to the topic '': ''.",
 f"10. Identify any controversies or debates related to the research in the following content related to the topic '': ''.",
]
prompts_Academic_proposal_critique_presentation_title =[
#Plan/Presentation
f"11. Write a sensational press release for this Research",
f"12. Make this more persuasive",
f"13. Write 3 tweets about this Research?",

]

#TOPIC_0 = "task to investigate various gaming groups in Iran, following the Mahsa Movement in the second year. The gaming groups being investigated include the dark solidarity group, the dark trilogy, the dark quadrilogy, the regular people, the bright solidarity group, and the bright trilogy. The aim is to gather information about each group, analyze their characteristics, objectives, and any associated psychological syndromes. This information will then be presented in a table for easier understanding and comparison." # Replace this with your topic
#RESEARCH_DOMAIN = "Game Theory in psychology  field" # Replace this with your research domain

global docx_path,Pdf_Dir

if not (Question == ""):

    TOPIC  = Question

else:
    TOPIC  = TOPIC_0

main_variables_0 = {
   'TOPIC': TOPIC,
   'RESEARCH_DOMAIN' : RESEARCH_DOMAIN
}

prompt_6Hat_Brainstorm = [
f"0. Suggest one Title less than 10 word for a report for 6 hat brainstorming game structure for {TOPIC}: Identify the players, their strategies, and the possible outcomes of the game.",
f"1. Define the game structure for {TOPIC}: Identify the players, their strategies, and the possible outcomes of the game.",
f"2. Represent the game for {TOPIC}: This can be done using a matrix or a tree. In the matrix representation, each cell represents a possible outcome of the game.",
f"3. Analyze the game for {TOPIC}: Determine the best strategies for each player, the Nash equilibrium, and the potential outcomes of the game.",
f"4. Make decisions based on the analysis for {TOPIC}: Use the results of the analysis to determine the best course of action for each player.",
f"5. Implement the game for {TOPIC}: Write the code that simulates the game. This could involve creating a payoff matrix or a game tree, and writing functions to determine the best strategies and the Nash equilibrium.",
f"6. Test the game for {TOPIC}: Run the game simulation and check if the results are as expected. This could involve checking if the Nash equilibrium is correct, or if the best strategies lead to the desired outcomes.",
f"7. Optimize the game for {TOPIC}: If the results are not as expected, modify the game structure or the strategies, and run the simulation again.",
f"8. Document the game for {TOPIC}: Write a report or a paper that explains the game, the results, and the conclusions.",
f"9. Share the game for {TOPIC}: Share the results with others, and get feedback on the game.",
f"10. Update the game for {TOPIC}: Based on the feedback, update the game structure or the strategies, and run the simulation again.",
]
prompt_6Hat_Brainstorm_presentation = [
# Plan/Presentation
  f"11.Write a sensational press release for this research in this 6 hat brainstorming ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"12.Make this 6 hat brain storming more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"13.Write 3 tweets about this 6 hat brainstorming in this topic ({TOPIC}), and this description? Description :((('{PARAGRAPH}')))"

]

prompt_Word_Topic_6Hat_Brainstorm = [
f" Suggest one Title less than 10 word for a report for 6 hat brainstorming game structure for {TOPIC}: Identify the players, their strategies, and the possible outcomes of the game.",
"1. Define game structure.",
"2. Represent the game.",
"3. Analyze the game.",
"4. Make decisions based on analysis.",
"5. Implement the game.",
"6. Test the game.",
"7. Optimize the game.",
"8. Document the game.",
"9. Share the game.",
"10. Update the game.",
]
prompt_6Hat_Brainstorm_presentation_title =[
#Plan/Presentation
f"11. Write a sensational press release for this brainstorm",
f"12. Make this more persuasive",
f"13. Write 3 tweets about this brainstorm?",

]

prompts_chatdev = [
f'0. Suggest one Title less than 10 word for a project tile for the topic which is :({TOPIC}) and description which is :({PARAGRAPH}). so you suggesting to to creat some code for doing this topic snd description as one project',
f'if possible consider some ChatGPT project for creating the code for a project like chatdev which is available  at here :( https://github.com/OpenBMB/ChatDev )   to creat one prompt for the topic which is :({TOPIC}) and description  which is :({PARAGRAPH}). so you suggesting to to creat some code for doing this topic and description as one project',
]

prompts_Topic_chatdev = [
f'0. Suggest one Title less than 10 word for a project tile for the topic which is :({TOPIC}) and description  which is :({PARAGRAPH}). so you suggesting to to creat some code for doing this topic snd description as one project',
f'Suggested prompt for ChatDev code Writing Project:',
 ]

prompts_Psychology = [
   f" 0. As a ChatGP {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

    f"1. As a ChatGP {role}, Identify the problem in the relationship related to the topic: {TOPIC}.\nDescription of the situation: {PARAGRAPH}",
    f"2. As a ChatGP {role}, Define the objective you want to achieve by addressing the problem related to: {TOPIC}.",
    f"3. As a ChatGP {role}, Gather all relevant information about the problem related to: {TOPIC}.\nDescription of the situation: {PARAGRAPH}",
    f"4. As a ChatGP {role}, Analyze the collected data to understand the root cause of the problem related to: {TOPIC}.\nDescription of the situation: {PARAGRAPH}",
    f"5. As a ChatGP {role}, Based on the analysis, generate potential solutions to address the problem related to: {TOPIC}.",
    f"6. As a ChatGP {role}, Create a detailed action plan to implement the chosen solution for the problem related to: {TOPIC}.",
    f"7. As a ChatGP {role}, Evaluate the effectiveness of the implemented solution for the problem related to: {TOPIC}.",
]
prompts_Psychology_presentqtion =[
# Plan/Presentation
  f"8.Write a sensational press release for this psychology report in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"9.Make this psychology  report more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"10.Write 3 tweets about this psychology report in this topic ({TOPIC}), and this description? Description :((('{PARAGRAPH}')))"

]

prompt_Word_Topic_Psychology = [
    f" 0.As a ChatGP {role}, suggest one report Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}).",

    "1. Identify the problem in the relationship related to the topic.",
    "2. Define the objective you want to achieve by addressing the problem.",
    "3. Gather all relevant information about the problem.",
    "4. Analyze the collected data to understand the root cause of the problem.",
    "5. Based on the analysis, generate potential solutions to address the problem.",
    "6. Create a detailed action plan to implement the chosen solution for the problem.",
    "7. Evaluate the effectiveness of the implemented solution for the problem.",
]
prompt_Word_Topic_Psychology_presentation_title=[
    #Plan/Presentation
f"8. Write a sensational press release for this Psychology Report",
f"9. Make this more persuasive",
f"10. Write 3 tweets about this Psychology Report?",

]

#https://www.phind.com/search?cache=rg4qjuf21n0wdb6i8yq24fsm



prompts_story = [
 f"0. As ChatGPT role: {role}, suggest a novel title in less than 15 words, based on the topic {TOPIC} and the description:({PARAGRAPH}).",
 f"1. As ChatGPT role: {role}, determine genre and subgenre based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"2. As ChatGPT role: {role}, develop story premise based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"3. As ChatGPT role: {role}, expand premise into blurb based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"4. As ChatGPT role: {role}, create outline from blurb based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"5. As ChatGPT role: {role}, develop style prompt based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"6. As ChatGPT role: {role}, use ChatGPT for introduction based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"7. As ChatGPT role: {role}, write scenes with ChatGPT based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"8. As ChatGPT role: {role}, redirect ChatGPT if needed based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"9. As ChatGPT role: {role}, regenerate content if unsatisfied based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"10. As ChatGPT role: {role}, reuse prompt space for consistency based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"11. As ChatGPT role: {role}, track major story actions based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"12. As ChatGPT role: {role}, review novel for consistency based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"13. As ChatGPT role: {role}, edit novel with ChatGPT based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"14. As ChatGPT role: {role}, write character dramatic life change story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"15. As ChatGPT role: {role}, start story with character secret based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"16. As ChatGPT role: {role}, write secret reader story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"17. As ChatGPT role: {role}, write innocent symbolizes darker story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"18. As ChatGPT role: {role}, write discrimination experience story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"19. As ChatGPT role: {role}, write cover up mistake story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"20. As ChatGPT role: {role}, write stormy night story based on the topic {TOPIC} and the description:({PARAGRAPH})",
 f"21. As ChatGPT role: {role}, write villain protagonist story based on the topic {TOPIC} and the description:({PARAGRAPH})",
]
prompts_story_presentation=[
# Plan/Presentation
  f"22.As ChatGPT role {role} in newspaper field, Write a sensational press release for this story and perviuse  content made ", #in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"23.As ChatGPT role {role}, Make this story more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"24.As ChatGPT role {role} in advertisment field, Write 3 tweeter post about this story, and this the perviuse contnet made?",
  f"25.As ChatGPT role {role} in advertisment field, Write 3 Instagram post about this story, ", # and this the perviuse contnet made?",
  f"26.As ChatGPT role {role} in weblog writer, Write 1 medium weblog post about this story, ", #and this the perviuse contnet made?",
  f"27.As ChatGPT role {role} in bussiness post writing, Write 1 LinkedIn post about this story, ", #and this the perviuse contnet made?",

]

prompts_story_topic = [

f"0. As ChatGPT role: {role}, suggest a novel title in less than 15 words, based on the topic {TOPIC} and the description:({PARAGRAPH}).",

 "1. Determine genre and subgenre",
 "2. Develop story premise",
 "3. Expand premise into blurb",
 "4. Create outline from blurb",
 "5. Develop style prompt",
 "6. Use ChatGPT for introduction",
 "7. Write scenes with ChatGPT",
 "8. Redirect ChatGPT if needed",
 "9. Regenerate content if unsatisfied",
 "10. Reuse prompt space for consistency",
 "11. Track major story actions",
 "12. Review novel for consistency",
 "13. Edit novel with ChatGPT",
 "14. Write character dramatic life change story",
 "15. Start story with character secret",
 "16. Write secret reader story",
 "17. Write innocent symbolizes darker story",
 "18. Write discrimination experience story",
 "19. Write cover up mistake story",
 "20. Write stormy night story",
 "21. Write villain protagonist story",
]
prompts_story_topic_presentation_title =[
  #Plan/Presentation
f"22. Write a sensational press release for this Story",
f"23. Make this more persuasive",
f"24. 3 tweets about this Story Report:",

f"25. 3 Instagram Post about this Story Report:",
f"26. Medium Post about this Story Report:",
f"27. LinkedIn Post about this Story Report:",

]



#@title .
#TOPIC = f"Understanding the Cycle of Domestic Violence against iranian women: The Influence of changes in the type of violence that continues in the aftermath of violence"
#TOPIC =f"stop the WarDark Triad and Light Triad in the Middle East: A Critical Examination of their Influence and Impact on Iran"+TOPIC

#TOPIC = f"If possible read this post ( https://www.geeky-gadgets.com/chatgpt-brainstorming-prompts/ ) and suggest  one python block code 10 prompt in the for on ( prompt=[The suggested prompt based of [var1] ). The prompt must have 10 line and at least three necessary value like TOPIC , FIELD_SUDY,and the third vale is your optional . Also you can have more variable or prompt for doing this post main goal which is brainstorming for one topic based of ChatGPT promptimg. This would be ChatGPT cheat sheet prompting."
TOPIC = main_variables_0.get('TOPIC', 'Default Value')
print ('TOPIC IS :', TOPIC)
TOPIC_SENTENCE = Topic
LANGUAGE = 'English'
main_variables_0 = {
      'TOPIC': f"{Topic}",
      'RESEARCH_DOMAIN': f"{RESEARCH_DOMAIN}",
      'PARAGRAPH': f"{PARAGRAPH}",
      'PARAGRAPHS': f"{PARAGRAPH}" , # f"{PARAGRAPHS}",
      'TOPIC_SENTENCE': TOPIC_SENTENCE,
      'LANGUAGE': LANGUAGE,
      'ABSTRACT_PARAGRAPH': ABSTRACT_PARAGRAPH,
      'BIBLIOGRAPHY': BIBLIOGRAPHY,
      'THEORY1': THEORY1,
      'THEORY2': THEORY2,
      'RESEARCH_QUESTIONS': RESEARCH_QUESTIONS,
      'ACTION': ACTION,
      'RESULT_PARAGRAPHS': RESULT_PARAGRAPHS,
      'DATE': DATE,
      'NUMBER_OF_DAYS_MONTHS_YEARS': NUMBER_OF_DAYS_MONTHS_YEARS,
      'role' : f"{role}"
  }





main_variables_0 = {
     'TOPIC': f"{TOPIC}",
     'RESEARCH_DOMAIN': f"{RESEARCH_DOMAIN}",
     'PARAGRAPH': f"{PARAGRAPH}",
     'PARAGRAPHS': f"{PARAGRAPHS}",
     'TOPIC_SENTENCE': f"{TOPIC_SENTENCE}",
     'LANGUAGE': f"{LANGUAGE}",
     'ABSTRACT_PARAGRAPH': f"{ABSTRACT_PARAGRAPH}",
     'BIBLIOGRAPHY': f"{BIBLIOGRAPHY}",
     'THEORY1': f"{THEORY1}",
     'THEORY2': f"{THEORY2}",
     'RESEARCH_QUESTIONS': f"{RESEARCH_QUESTIONS}",
     'ACTION': f"{ACTION}",
     'RESULT_PARAGRAPHS': f"{RESULT_PARAGRAPHS}",
     'DATE': f"{DATE}",
     'NUMBER_OF_DAYS_MONTHS_YEARS': f"{NUMBER_OF_DAYS_MONTHS_YEARS}",
     'role': f"{role}",
     'project_example': f"{project_example}",
     'context': f"{context}",
     'instruction': f"{instruction}",
     'output_format': f"{output_format}",
     'specific_project_details': f"{specific_project_details}",
     'X': f"{X}",
     'project_manager': f"{project_manager}",
     'report': f"{report}",
     'important_themes': f"{important_themes}",
     'project_name': f"{project_name}",
     'stakeholder': f"{stakeholder}",
     'resistant_stakeholder': f"{resistant_stakeholder}",
     'task': f"{task}",
     'Your_Email': f"{Your_Email}",
     'category':f"{category}",
}


prompts_project_management = [
   f"0. As ChatGPT role: {role}, suggest a Project Management title in less than 15 words, based on the topic {TOPIC} and the description:({PARAGRAPH}).",

   f"1. Come up with questions to ask during the meeting to start the project based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}).",
   f"2. I need your assistance in designing a project risk assessment template based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}).",
   f"3. Please provide a handoff and project conclusion checklist based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}).",
   f"4. As a project manager {role}, I am responsible for launching a new e-commerce website {project_example}. The project based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) is planned to span over 6 months and involves multiple departments like design, development, and marketing {context}. Please generate a comprehensive project plan that includes objectives, business case, scope, timeline, stakeholders, and success metrics {instruction} in a table format {output_format}.",
   f"5. Generate a project timeline with milestones, start dates, end dates, objectives, tasks, and responsible parties for launching X project. Please provide and suggest milestones, their start and end dates, objectives, tasks, and the responsible party for each milestone in a table format.",
   f"6. Identify potential risks associated with {specific_project_details} and suggest mitigation strategies.",
   f"7. We are doing a project based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) to do {X} and the below are the risks we have identified, is there anything that we have missed?",
   f"8. Draft a project update email for stakeholders of {X} highlighting key achievements, current challenges, and next steps.",
   f"9. Outline the key points from {report}. based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) Focus on any mention of {important_themes} that you would like to specifically have as the main focus.",
   f"10.based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) Please simulate the dialogue and provide step by step guidance to help me {project_manager} best prepare when dealing with a resistant stakeholder. Context: I want to launch a new project {X} and a key stakeholder fails to see why it's important. Please provide pointers with potential concern and rationale presented in a table format? I want the rationale column to include 2-3 bullets each for talking points.",
   f"11.based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) What other information do you need to complete this task?",
   f"12.based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) Can you break that down a little further into more specific, step-by-step assignments?",
   f"13.based on the topic {TOPIC} and the description:({PARAGRAPH} and {specific_project_details}) Analyze the resource requirements for {project_name} given the current scope and provide recommendations for optimal resource allocation.",
]
prompts_project_management_presentation =[
# Plan/Presentation
  f"14.Write a sensational press release for this Project  Management and perviuse  contnet made" , #in this topic ({TOPIC}) and this field : '{PARAGRAPH}'",
  f"15.Make this Project Management more persuasive in this topic ({TOPIC}) and this description: '{PARAGRAPH}'",
  f"16.Write 3 tweeter post about this  Project Management, and this the perviuse contnet made?",
  f"17.Write 3 Instagram post about this  Project Management, ", # and this the perviuse contnet made?",
  f"18.Write 1 medium weblog post about this  Project Management, ", #and this the perviuse contnet made?",
  f"19.Write 1 LinkedIn post about this  Project Management, ", #and this the perviuse contnet made?",

]

prompts_project_management_title = [
  f"0. As ChatGPT role: {role}, suggest a Project Management title in less than 15 words, based on the topic {TOPIC} and the description:({PARAGRAPH}).",

  "1. Come up with questions to ask during the meeting to start the project.",
  "2. Design a project risk assessment template.",
  "3. Provide a handoff and project conclusion checklist.",
  "4. Create a comprehensive project plan for launching a new e-commerce website that spans over 6 months and involves multiple departments.",
  "5. Generate a project timeline with milestones, start dates, end dates, objectives, tasks, and responsible parties.",
  "6. Identify potential risks in the project and suggest mitigation strategies.",
  "7. Review the identified risks in the project and check if any risks have been overlooked.",
  "8. Draft a project update email for stakeholders highlighting key achievements, current challenges, and next steps.",
  "9. Outline the key points from a report focusing on certain themes.",
  "10. Simulate the dialogue and provide step by step guidance to prepare when dealing with a resistant stakeholder.",
  "11. Ask for additional information required to complete a particular task.",
  "12. Request a more detailed breakdown of a task into specific, step-by-step assignments.",
  "13. Analyze the resource requirements for a project given its current scope and provide recommendations for optimal resource allocation.",
]
prompts_project_management_title_presentation_title=[
#Plan/Presentation
f". Write a sensational press release for this report",
f". Make this more persuasive",
f". 3 tweets about thi Report:",

f". 3 Instagram Post about this Report:",
f". Medium Post about this Report:",
f". LinkedIn Post about this Report:",


]

print ('\n main variable is :', main_variables_0)
folder_chatGPT = "/content/ChatGPT_academic_paper"
#openai_api_0 = "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"
#openai_api = "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"
global TOPIC_CLASS,gdrive_fpath


class TOPIC_CLASS:
    def __init__(self):
        self.category = {
        "perviuse_try_numner" : 0,
        "perviuse_content" : ['fist step'],
        "topic" : f"{TOPIC}",
        "name" : "",
        "main_variables" : main_variables_0,
        }

    def saving(self,topic,category):

       self.Topic_Name = topic
       self.Topic_Name_abr = self.Topic_Name[:5]
       self.save_folder_dest = gdrive_fpath +f"{Topic_Name_abr}"+"_T/"+category.replace(' ','_')

TP= TOPIC_CLASS()
#TOPIC = f" "

"""#Text to image codes:"""

#!pip install git+https://github.com/openai/glide-text2im



"""class ImageGenerator:
   def __init__(self, prompt="", batch_size=1, guidance_scale=3.0, upsample_temp=0.997):
       self.prompt = prompt
       self.batch_size = batch_size
       self.guidance_scale = guidance_scale
       self.upsample_temp = upsample_temp

       self.has_cuda = th.cuda.is_available()
       self.device = th.device('cpu' if not self.has_cuda else 'cuda')

       # Create base model.
       self.options = model_and_diffusion_defaults()
       self.options['use_fp16'] = self.has_cuda
       self.options['timestep_respacing'] = '100' # use 100 diffusion steps for fast sampling
       self.model, self.diffusion = create_model_and_diffusion(**self.options)
       self.model.eval()
       if self.has_cuda:
           self.model.convert_to_fp16()
       self.model.to(self.device)
       self.model.load_state_dict(load_checkpoint('base', self.device))

       # Create upsampler model.
       self.options_up = model_and_diffusion_defaults_upsampler()
       self.options_up['use_fp16'] = self.has_cuda
       self.options_up['timestep_respacing'] = 'fast27' # use 27 diffusion steps for very fast sampling
       self.model_up, self.diffusion_up = create_model_and_diffusion(**self.options_up)
       self.model_up.eval()
       if self.has_cuda:
           self.model_up.convert_to_fp16()
       self.model_up.to(self.device)
       self.model_up.load_state_dict(load_checkpoint('upsample', self.device))

   def show_images(self, batch: th.Tensor):
       ''' Display a batch of images inline. '''
       scaled = ((batch + 1)*127.5).round().clamp(0,255).to(th.uint8).cpu()
       reshaped = scaled.permute(2, 0, 3, 1).reshape([batch.shape[2], -1, 3])
       display(Image.fromarray(reshaped.numpy()))

   def generate_image(self):
       # Create the text tokens to feed to the model.
       tokens = self.model.tokenizer.encode(self.prompt)
       tokens, mask = self.model.tokenizer.padded_tokens_and_mask(
           tokens, self.options['text_ctx']
       )

       # Create the classifier-free guidance tokens (empty)
       full_batch_size = self.batch_size * 2
       uncond_tokens, uncond_mask = self.model.tokenizer.padded_tokens_and_mask(
           [], self.options['text_ctx']
       )

       # Pack the tokens together into model kwargs.
       model_kwargs = dict(
           tokens=th.tensor(
               [tokens] * self.batch_size + [uncond_tokens] * self.batch_size, device=self.device
           ),
           mask=th.tensor(
               [mask] * self.batch_size + [uncond_mask] * self.batch_size,
               dtype=th.bool,
               device=self.device,
           ),
       )

       # Create a classifier-free guidance sampling function
       def model_fn(x_t, ts, **kwargs):
          half = x_t[: len(x_t) // 2]
          combined = th.cat([half, half], dim=0)
          model_out = self.model(combined, ts, **kwargs)
          eps, rest = model_out[:, :3], model_out[:, 3:]
          cond_eps, uncond_eps = th.split(eps, len(eps) // 2, dim=0)
          half_eps = uncond_eps + self.guidance_scale * (cond_eps - uncond_eps)
          eps = th.cat([half_eps, half_eps], dim=0)
          return th.cat([eps, rest], dim=1)

         # Sample from the base model.
       self.model.del_cache()
       samples = self.diffusion.p_sample_loop(
          model_fn,
          (full_batch_size, 3, self.options["image_size"], self.options["image_size"]),
          device=self.device,
          clip_denoised=True,
          progress=True,
          model_kwargs=model_kwargs,
          cond_fn=None,
      )[:self.batch_size]
      self.model.del_cache()

      # Show the output
      self.show_images(samples)
      # Upsample the 64x64 samples
      tokens = self.model_up.tokenizer.encode(self.prompt)
      tokens, mask = self.model_up.tokenizer.padded_tokens_and_mask(
           tokens, self.options_up['text_ctx']
       )

       # Create the model conditioning dict.
       model_kwargs = dict(
           # Low-res image to upsample.
           low_res=((samples+1)*127.5).round()/127.5 - 1,

           # Text tokens
           tokens=th.tensor(
               [tokens] * self.batch_size, device=self.device
           ),
           mask=th.tensor(
               [mask] * self.batch_size,
               dtype=th.bool,
               device=self.device,
           ),
       )


      # Sample from the base model.
       self.model_up.del_cache()
      up_shape = (self.batch_size, 3, self.options_up["image_size"], self.options_up["image_size"])
      up_samples = self.diffusion_up.ddim_sample_loop(
          self.model_up,
          up_shape,
          noise=th.randn(up_shape, device=self.device) * self.upsample_temp,
          device=self.device,
          clip_denoised=True,
          progress=True,
          model_kwargs=model_kwargs,
            cond_fn=None,
      )[:self.batch_size]
      self.model_up.del_cache()

      # Show the output
      self.show_images(up_samples)
generator = ImageGenerator("Your prompt here")
generator.generate_image()
"""

from google.colab import drive
import os
import subprocess
from docx import Document
from django.utils.text import slugify

def text_to_image(content,prompt,doc,p,save_patch):
  image_prompt = prompt # f"creat image for the : prompt ((({prompt})) which made this content :((({content}))) and consider this is the official repost"
  negative_prompt = "low quality, bad quality, no text in picture and verbal content"
  #image = pipeline(image_prompt).images[0] #"An image of a squirrel in Picasso style").images[0]
  image = pipeline(prompt = image_prompt, negative_prompt=negative_prompt,prior_guidance_scale =1.0, height=768, width=768).images[0]
  print ('\n image_prompt is: ',image_prompt)
  image
  path = save_patch+f"_"+str(slugify(prompt[:15]))+".png"
  image.save(path)
  p = doc.add_picture(path)
  return doc, image
#doc = Document()
# Add the generated text to the document
#p = doc.add_paragraph("test\n\n") #prompt_my)

#doc,image = text_to_image(doc,f"Repost_Type_Title For: "+"prompt_my",doc,p,folder_path)
#doc.save(folder_path+'/image.docx')
#image

"""class ImageGenerator:
   def __init__(self, prompt="", batch_size=1, guidance_scale=3.0, upsample_temp=0.997):
       self.prompt = prompt
       self.batch_size = batch_size
       self.guidance_scale = guidance_scale
       self.upsample_temp = upsample_temp

       self.has_cuda = th.cuda.is_available()
       self.device = th.device('cpu' if not self.has_cuda else 'cuda')

       # Create base model.
       self.options = model_and_diffusion_defaults()
       self.options['use_fp16'] = self.has_cuda
       self.options['timestep_respacing'] = '100' # use 100 diffusion steps for fast sampling
       self.model, self.diffusion = create_model_and_diffusion(**self.options)
       self.model.eval()
       if self.has_cuda:
           self.model.convert_to_fp16()
       self.model.to(self.device)
       self.model.load_state_dict(load_checkpoint('base', self.device))

       # Create upsampler model.
       self.options_up = model_and_diffusion_defaults_upsampler()
       self.options_up['use_fp16'] = self.has_cuda
       self.options_up['timestep_respacing'] = 'fast27' # use 27 diffusion steps for very fast sampling
       self.model_up, self.diffusion_up = create_model_and_diffusion(**self.options_up)
       self.model_up.eval()
       if self.has_cuda:
           self.model_up.convert_to_fp16()
       self.model_up.to(self.device)
       self.model_up.load_state_dict(load_checkpoint('upsample', self.device))

   def show_images(self, batch: th.Tensor):
       ''' Display a batch of images inline. '''
       scaled = ((batch + 1)*127.5).round().clamp(0,255).to(th.uint8).cpu()
       reshaped = scaled.permute(2, 0, 3, 1).reshape([batch.shape[2], -1, 3])
       display(Image.fromarray(reshaped.numpy()))
      
   def generate_image(self):
      # Create the text tokens to feed to the model.
      tokens = self.model.tokenizer.encode(self.prompt)
      tokens, mask = self.model.tokenizer.padded_tokens_and_mask(
          tokens, self.options['text_ctx']
      )

      # Create the classifier-free guidance tokens (empty)
      full_batch_size = self.batch_size * 2
      uncond_tokens, uncond_mask = self.model.tokenizer.padded_tokens_and_mask(
          [], self.options['text_ctx']
      )

      # Pack the tokens together into model kwargs.
      model_kwargs = dict(
          tokens=th.tensor(
              [tokens] * self.batch_size + [uncond_tokens] * self.batch_size, device=self.device
          ),
          mask=th.tensor(
              [mask] * self.batch_size + [uncond_mask] * self.batch_size,
              dtype=th.bool,
              device=self.device,
          ),
      )

      # Create a classifier-free guidance sampling function
   def model_fn(x_t, ts, **kwargs):
         half = x_t[: len(x_t) // 2]
         combined = th.cat([half, half], dim=0)
         model_out = self.model(combined, ts, **kwargs)
         eps, rest = model_out[:, :3], model_out[:, 3:]
         cond_eps, uncond_eps = th.split(eps, len(eps) // 2, dim=0)
         half_eps = uncond_eps + self.guidance_scale * (cond_eps - uncond_eps)
         eps = th.cat([half_eps, half_eps], dim=0)
         return th.cat([eps, rest], dim=1)

        # Sample from the base model.
   self.model.del_cache()
   samples = self.diffusion.p_sample_loop(
         model_fn,
         (full_batch_size, 3, self.options ["image_size"], self.options ["image_size"]),
         device=self.device,
         clip_denoised=True,
         progress=True,
         model_kwargs=model_kwargs,
         cond_fn=None,
   )[:self.batch_size]
   self.model.del_cache()

   # Show the output
   self.show_images(samples)
   # Upsample the 64x64 samples
   tokens = self.model_up.tokenizer.encode(self.prompt)
   tokens, mask = self.model_up.tokenizer.padded_tokens_and_mask(
          tokens, self.options_up['text_ctx']
   )
   
       # Create the model conditioning dict.
      model_kwargs = dict(
           # Low-res image to upsample.
           low_res=((samples+1)*127.5).round()/127.5 - 1,

           # Text tokens
           tokens=th.tensor(
               [tokens] * self.batch_size, device=self.device
           ),
           mask=th.tensor(
               [mask] * self.batch_size,
               dtype=th.bool,
               device=self.device,
           ),
       )


      # Sample from the base model.
     self.model_up.del_cache()
     up_shape = (self.batch_size, 3, self.options_up["image_size"], self.options_up["image_size"])
     up_samples = self.diffusion_up.ddim_sample_loop(
          self.model_up,
          up_shape,
          noise=th.randn(up_shape, device=self.device) * self.upsample_temp,
          device=self.device,
          clip_denoised=True,
          progress=True,
          model_kwargs=model_kwargs,
            cond_fn=None,
     )[:self.batch_size]
     self.model_up.del_cache()

      # Show the output
     self.show_images(up_samples)
generator = ImageGenerator("Your prompt here")
generator.generate_image()
"""

from google.colab import drive
import os
import subprocess
from docx import Document
from django.utils.text import slugify
import cv2
import numpy as np
import torch
from torchvision.transforms import ToTensor

# Set the max_split_size_mb environment variable
os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "max_split_size_mb:8"

def process_data_0(input, output_size=(512, 512), scale_factors=(2, 2)):
  if input.ndimension() == 4 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')
  elif input.ndimension() == 5 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')

  del input
  torch.cuda.empty_cache()

  output = output.cpu().numpy()
  output = np.transpose(output, (1, 2, 0))
  output = output * 255
  return output

def process_data(input, output_size=(512, 512), scale_factors=(2, 2)):
  output = None # Initialize output to None
  if input.ndimension() == 4 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')
  elif input.ndimension() == 5 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')

  del input
  torch.cuda.empty_cache()

  if output is not None:
      output = output.cpu().numpy() # Move to CPU and convert to numpy
      output = np.transpose(output, (1, 2, 0)) # Change the order of dimensions
      output = output * 255 # Scale the values to [0, 255]
  return output
def text_to_image_4(content, prompt, doc, p, save_path):
  image_prompt = prompt
  negative_prompt = "low quality, bad quality"
  image = pipeline(prompt=image_prompt, negative_prompt=negative_prompt, prior_guidance_scale=1.0, height=768, width=768).images[0]
  print('\n image_prompt is: ', image_prompt)

  # Convert the PIL.Image object to a PyTorch tensor
  image = ToTensor()(image)

  processed_image = process_data(image)

  del image
  torch.cuda.empty_cache()

  path = save_path + "_" + str(slugify(prompt[:15])) + ".png"
  cv2.imwrite(path, processed_image)

  p = doc.add_picture(path)
  return doc, image

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])

def process_data(input, output_size=(512, 512), scale_factors=(2, 2)):
  output = None # Initialize output to None
  if input.ndimension() == 4 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')
  elif input.ndimension() == 5 and mode == "nearest":
      output = torch.nn.functional.interpolate(input, size=output_size, mode='nearest')

  del input
  torch.cuda.empty_cache()

  if output is not None:
      output = output.cpu().numpy() # Move to CPU and convert to numpy
      output = np.transpose(output, (1, 2, 0)) # Change the order of dimensions
      output = output * 255 # Scale the values to [0, 255]
  return output


def text_to_image_3(content, prompt, doc, p, save_path):
 image_prompt = prompt
 negative_prompt = "low quality, bad quality"
 image = pipeline(prompt=image_prompt, negative_prompt=negative_prompt, prior_guidance_scale=1.0, height=768, width=768).images[0]
 print('\n image_prompt is: ', image_prompt)

 # Convert the PIL.Image object to a PyTorch tensor
 image = ToTensor()(image)

 processed_image = process_data(image)

 # Check if processed_image is not empty
 if True : #processed_image is not None and not np.all(processed_image == 0):
     path = save_path + "_" + str(slugify(prompt[:15])) + ".png"
     cv2.imwrite(path, processed_image)

     p = doc.add_picture(path)
 else:
     print("Warning: processed_image is empty or contains only zeros.")

 return doc, image

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])

import os
from torchvision.transforms import ToTensor
import cv2
import numpy as np
from urllib.parse import quote

def slugify(text):
   return quote(text, safe='')


def text_to_image_1(content, prompt, doc, p, save_path):
   image_prompt = prompt
   negative_prompt = "low quality, bad quality"
   image = pipeline(prompt=image_prompt, negative_prompt=negative_prompt, prior_guidance_scale=1.0, height=768, width=768).images[0]
   print('\n image_prompt is: ', image_prompt)

   # Convert the PIL.Image object to a PyTorch tensor
   image = ToTensor()(image)

   processed_image = process_data(image)

   # Check if processed_image is not empty
   if processed_image is not None and not np.all(processed_image == 0):
       # Ensure the directory exists
       os.makedirs(os.path.dirname(save_path), exist_ok=True)

       path = save_path + "_" + str(slugify(prompt[:15])) + ".png"
       success = cv2.imwrite(path, processed_image)
       if not success:
           print("Failed to save image")
       else:
           p = doc.add_picture(path)
   else:
       print("Warning: processed_image is empty or contains only zeros.")

   return doc, image

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])

# Set the max_split_size_mb environment variable
os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "max_split_size_mb:1"
def text_to_image_2(content, prompt, doc, p, save_path):
 image_prompt = prompt
 negative_prompt = "low quality, bad quality"
 image = pipeline(prompt=image_prompt, negative_prompt=negative_prompt, prior_guidance_scale=1.0, height=768, width=768).images[0]
 print('\n image_prompt is: ', image_prompt)

 # Convert the PIL.Image object to a PyTorch tensor
 image = ToTensor()(image)

 processed_image = process_data(image)

 # Check if processed_image is not empty
 if processed_image is not None and not np.all(processed_image == 0):
     path = save_path + "_" + str(slugify(prompt[:15])) + ".png"
     cv2.imwrite(path, processed_image)

     p = doc.add_picture(path)
 else:
     print("Warning: processed_image is empty or contains only zeros.")

 return doc, image

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])

import requests
from urllib.request import urlopen
from PIL import Image

def text_to_image_openai(content, prompt, doc, p, save_path):
 image_prompt = prompt
 negative_prompt = "negative prompts so are low quality, bad quality"
 print('\n image_prompt is: ', image_prompt)

 # Generate the image using OpenAI API
 response = client.images.generate(
   model="dall-e-2",
   prompt= image_prompt+negative_prompt,
   size="1024x1024",
   quality="standard",
   n=1)

 image_url = response.data[0].url

 # Download the image from the URL
 try:
   url = urlopen(image_url)
   f = Image.open(url)
   f.verify() # verify that it is, in fact an image
 except Exception as e:
   print(f"Failed to open the image: {e}")
   return doc, None

 # Save the image
 path = save_path + "_" + str(slugify(prompt[:15])) + ".png"
 f.save(path)

 # Display the image
 f.show()

 # Add the image to the document
 p = doc.add_picture(path)
 return doc, image

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])

"""#Funstions for saving as PDF and DOCX :
👇🌱
"""

#!sudo apt-get update
#!sudo apt-get install libreoffice
#!sudo apt-get install abiword
#!sudo apt install libreoffice-writer

import subprocess

def convert_docx_to_pdf0(docx_path, pdf_path):
  subprocess.call(['abiword', '--to=pdf', docx_path, '--to-dir', pdf_path])

def convert_docx_to_pdf(docx_path, pdf_path):
 command = ['libreoffice', '--headless', '--convert-to', 'pdf', '--outdir', pdf_path, docx_path]
 subprocess.call(command)

from docx import Document

def add_text_with_bold(paragraph, text,p):
   parts = text.split('**')
   #doc.style('normal')
   #p.style = doc.styles['Normal']

   for i in range(len(parts)):
       if i % 2 == 0:
           p.add_run(parts[i])
       else:
           run = p.add_run(parts[i])
           run.bold = True

   return paragraph

#add_text_with_bold(doc, 'This is some **bold** text',p)

from google.colab import drive
import os
import subprocess
from docx import Document
from django.utils.text import slugify


def save_academic_paper(topic, prompt_my):
  global docx_path,Pdf_Dir

  # Define the path to the folder in Google Drive
  folder_path = r"/content/drive/My Drive/ChatGPT_Paper_wrting/Bussiness_Plane/"

  # Mount Google Drive
  if not os.path.isdir('/content/drive'):
   # If not, mount the drive
     drive.mount('/content/drive')
  else:
     print("Drive is already mounted.")

  Pdf_Dir= r"/content/drive/My Drive/ChatGPT_Paper_wrting/Bussiness_Plane/"
  docx_path= f"{folder_path}"+"FM"+f"{topic}.docx"
  # Check if the folder exists
  if not os.path.exists(folder_path):
  # If the folder doesn't exist, create it
    os.mkdir(folder_path)


  # Replace spaces in the topic with underscores
  #topic = topic[:12].replace(" ", "_")
  topic = slugify(topic)

  # Define the path to the DOCX file in the folder


  # Check if the DOCX file exists
  if os.path.isfile(docx_path):
    # If the DOCX file exists, open it

    #docx_path = f"{folder_path}{topic}.docx"#+str(random.randint(0,9))+".docx"
    doc = Document(docx_path)
  else:

    #docx_path = f"{folder_path}{topic}.docx"
    #print(docx_path)
     # If the DOCX file doesn't exist, create a new Document object
    doc = Document()

  # Add the generated text to the document
  #doc.add_paragraph(prompt_my)
  doc = add_text_with_bold(doc,0,prompt_my)
  # Save the document
  doc.save(docx_path)

  # Convert the DOCX file to a PDF
  convert_docx_to_pdf(docx_path,Pdf_Dir)
  return docx_path,Pdf_Dir

from google.colab import drive
import os , random
import subprocess
from docx import Document
from django.utils.text import slugify
from docx.shared import Pt

  # Mount Google Drive
if not os.path.isdir('/content/drive'):
   # If not, mount the drive
     drive.mount('/content/drive')
else:
     print("Drive is already mounted.")


def save_academic_paper_with_prompt_Tile(topic, prompt_my,image_prompt,contnet,try_number, category,make_photo,folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"):
  global Pdf_Dir,docx_path
  Repost_Type_Title = category
  Repost_Type = category.replace(' ','_')


  # Define the path to the folder in Google Drive
  #folder_path = r"/content/drive/My Drive/ChatGPT_Paper_wrting/"+f"{Repost_Type}/Title/"
  #folder_path = r"/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"+f"{topic}/{Repost_Type}/Title/"
  folder_path=folder_path+f"{topic}/{Repost_Type}/Title/"

  Pdf_Dir = folder_path# r"/content/drive/My Drive/ChatGPT_Paper_wrting/{Repost_Type}/Title/"

  topic = slugify(topic[:21])

  if try_number == 0 :
       docx_path= f"{folder_path}"+f"{Repost_Type}_T_"+f"{topic}.docx"
       if os.path.isfile(docx_path):
          try:
             pass #os.remove (docx_path.replace('docx','pdf'))
             pass #os.remove (docx_path)#

          except:
             print ("the file for saving Exist and some error happened")

       topic = topic+str(random.randint(0,100))#os.remove(docx_path)
       docx_path= f"{folder_path}"+f"{Repost_Type}_T_"+f"{topic}.docx"


  # Check if the folder exists
  if not os.path.exists(folder_path):
  # If the folder doesn't exist, create it
    os.makedirs(folder_path)


  # Replace spaces in the topic with underscores
  #topic = topic[:12].replace(" ", "_")
  #topic = slugify(topic)

  # Define the path to the DOCX file in the folder

  # Check if the DOCX file exists
  if os.path.isfile(docx_path):

    if try_number == 0 :

       if os.path.isfile(docx_path):
          try:
             pass #os.remove (docx_path.replace('docx','pdf'))
             pass #os.remove (docx_path)#

          except:
             print ("the file for saving Exist and some error happened")

       #topic = topic+str(random.randint(0,100))#os.remove(docx_path)
       #docx_path= f"{folder_path}"+f"{Repost_Type}_T_"+f"{topic}.docx"

       doc = Document()
       # Add the generated text to the document
       p = doc.add_paragraph() #prompt_my)
       # Add the generated text to the document
       # Add the generated text to the document
       p.style = doc.styles['Title']

       p = add_text_with_bold(doc, f"{Repost_Type_Title} For: "+prompt_my,p)
       p.style = doc.styles['Title']


       # Check if CUDA is available
       try:
          if torch.cuda.is_available() and make_photo:
             doc,image = text_to_image(contnet,f"{Repost_Type_Title} For: "+image_prompt,doc,p,folder_path)
          elif make_photo:

             doc,image = text_to_image_openai(doc,f"{Repost_Type_Title} For: "+image_prompt,doc,p,folder_path)
       except errors as e:

          print ('failed in running the Image creating by this error :',e)
    else :

    # If the DOCX file exists, open it

    #docx_path = f"{folder_path}{topic}.docx"#+str(random.randint(0,9))+".docx"
       doc = Document(docx_path)


    # Add the generated text to the document
    p = doc.add_paragraph() #prompt_my)
    # Add the generated text to the document
    # Add the generated text to the document
    p.style = doc.styles['Subtitle']

    font = p.style.font
    font.name = 'Arial'
    font.size = Pt(15)
    p = add_text_with_bold(doc,prompt_my,p)

    # Check if CUDA is available
    try:
          if torch.cuda.is_available() and make_photo:
             doc,image = text_to_image(contnet,f"{Repost_Type_Title} For: "+image_prompt,doc,p,folder_path)
          elif make_photo:

             doc,image = text_to_image_openai(doc,f"{Repost_Type_Title} For: "+image_prompt,doc,p,folder_path)
    except errors as e:

          print ('failed in running the Image creating by this error :',e)

    #p.style = doc.styles['Subtitle']

  else:
    #docx_path = f"{folder_path}{topic}.docx"
    #print(docx_path)
     # If the DOCX file doesn't exist, create a new Document object
    doc = Document()

    # Add the generated text to the document
    p = doc.add_paragraph() #prompt_my)
    # Add the generated text to the document
    # Add the generated text to the document
    p.style = doc.styles['Title']


    p = add_text_with_bold(doc, f"{Repost_Type_Title} For: "+prompt_my,p)
    p.style = doc.styles['Title']
    #doc,image = text_to_image(contnet,f"{Repost_Type_Title} For: "+prompt_my,doc,p,folder_path)


  # Save the document
  doc.save(docx_path)

  # Revert the style of the paragraph back to 'Normal'
  p = doc.add_paragraph()#contnet)
  p.style = doc.styles['Normal']

  p = add_text_with_bold(doc,contnet,p)

  # Save the document
  doc.save(docx_path)

  # Convert the DOCX file to a PDF
  convert_docx_to_pdf(docx_path,Pdf_Dir)
  print ( f'report made for this category of {category} in the folder of {docx_path}')

  return docx_path,Pdf_Dir

def save_academic_paper_with_prompt(topic, prompt_my,image_prompt,contnet,try_number,category, make_photo,folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"):
  global docx_path_prompt,Pdf_Dir

  Repost_Type_Title = category
  Repost_Type = category.replace(' ','_')

  # Define the path to the folder in Google Drive
  #folder_path = r"/content/drive/My Drive/ChatGPT_Paper_wrting/"+f"{Repost_Type}/Prompt/"
  #folder_path = r"/content/drive/My Drive/ChatGPT_Paper_wrting/"+f"All_Reports/{topic}/{Repost_Type}/Prompt/"
  folder_path=folder_path+f"{topic}/{Repost_Type}/Prompt/"

  Pdf_Dir = folder_path# r"/content/drive/My Drive/ChatGPT_Paper_wrting/"+f"{Repost_Type}/Prompt/"
  topic = slugify(topic[:21])
  docx_path_prompt= f"{folder_path}"+f"{Repost_Type}_PR_"+f"{topic}.docx"


  # Check if the folder exists
  if not os.path.exists(folder_path):
  # If the folder doesn't exist, create it
    os.makedirs(folder_path)


  # Replace spaces in the topic with underscores
  #topic = topic[:12].replace(" ", "_")
  #topic = slugify(topic)

  # Define the path to the DOCX file in the folder


    # If the DOCX file exists, open it
  if try_number == 0 :
       try:
          os.remove(docx_path_prompt)
          os.romove (docx_path_prompt.replace('docx','pdf'))
       except:
          pass

  # Check if the DOCX file exists
  if os.path.isfile(docx_path_prompt):
    # If the DOCX file exists, open it
        #docx_path = f"{folder_path}{topic}.docx"#+str(random.randint(0,9))+".docx"
    if try_number == 0 :

       topic = topic+str(random.randint(0,100))#os.remove(docx_path)
       docx_path_prompt= f"{folder_path}"+f"{Repost_Type}_PR_"+f"{topic}.docx"
       if os.path.isfile(docx_path):
          try:
             os.remove (docx_path_prompt.replace('docx','pdf'))
             os.remove (docx_path_prompt)#

          except errors as e:

             print ("the file for saving Exist and some error happened")
       doc = Document()
       # Add the generated text to the document
       p = doc.add_paragraph()#prompt_my)
       # Add the generated text to the document
       # Add the generated text to the document
       p.style = doc.styles['Title']
       p = add_text_with_bold(doc,f"{Repost_Type_Title} For: "+ prompt_my,p)

       p.style = doc.styles['Title']



    else :

    # If the DOCX file exists, open it

    #docx_path = f"{folder_path}{topic}.docx"#+str(random.randint(0,9))+".docx"
       doc = Document(docx_path_prompt)




    # Add the generated text to the document
    p = doc.add_paragraph(prompt_my)
    # Add the generated text to the document
    # Add the generated text to the document
    p.style = doc.styles['Subtitle']

    font = p.style.font
    font.name = 'Arial'
    font.size = Pt(15)
    p = add_text_with_bold(doc,prompt_my,p)
    p.style = doc.styles['Subtitle']

  else:

    #docx_path = f"{folder_path}{topic}.docx"
    #print(docx_path)
     # If the DOCX file doesn't exist, create a new Document object
    doc = Document()

    # Add the generated text to the document
    p = doc.add_paragraph()#prompt_my)
    # Add the generated text to the document
    # Add the generated text to the document
    p.style = doc.styles['Title']
    p = add_text_with_bold(doc,f"{Repost_Type_Title} For: "+ prompt_my,p)

    p.style = doc.styles['Title']

  #p = add_text_with_bold(doc,prompt_my,p)  # Save the document
  doc.save(docx_path_prompt)

  # Revert the style of the paragraph back to 'Normal'
  p = doc.add_paragraph()#contnet)
  p.style = doc.styles['Normal']

  p = add_text_with_bold(doc,contnet,p) # Save the document
  doc.save(docx_path_prompt)

  # Convert the DOCX file to a PDF
  #convert_docx_to_pdf(docx_path,Pdf_Dir)
  print ( f'report made for this category of {category} in the folder of {docx_path_prompt}')
  return docx_path_prompt,Pdf_Dir

#save_academic_paper_with_prompt_Tile('title','**prmpt_mt** is ','contetn',0)
#save_academic_paper_with_prompt('title','**prmpt_mt**','content ',0)

"""# @title
# conect to [Mega.z](https://mega.nz/) cloud for storage files based ot this page:

https://colab.research.google.com/github/sudo-ken/Mega-to-Google-Drive/blob/master/Transfer_files_from_Mega_to_Google_Drive.ipynb#scrollTo=Vgh1xlQYGZCO
"""

# Commented out IPython magic to ensure Python compatibility.


os.chdir('/content/')
'''
# %cd '/content/'
# !git clone https://github.com/jeroenmeulenaar/python3-mega.git
# !(cd python3-mega; pip install urlobject pycrypto)

# import os
# os.chdir('python3-mega')
# from mega import Mega
# os.chdir('../')
# m = Mega.from_ephemeral()

# !git clone https://github.com/odwyersoftware/mega.py
# %cd mega.py
# !python setup.py install
# %cd '/content/'

!rm -rf '/content/yoloOnGoogleColab'
#!git clone https://github.com/CAR-Driving/yoloOnGoogleColab
'''

#@title
# @markdown <center><h3>Input Your Mega ID</h3></center><br>
from functools import wraps
import errno
import os
import signal
import subprocess
import shlex


class TimeoutError(Exception):
    pass


def timeout(seconds=10, error_message=os.strerror(errno.ETIME)):
    def decorator(func):
        def _handle_timeout(signum, frame):
            raise TimeoutError(error_message)

        def wrapper(*args, **kwargs):
            signal.signal(signal.SIGALRM, _handle_timeout)
            signal.alarm(seconds)
            try:
                result = func(*args, **kwargs)
            finally:
                signal.alarm(0)
            return result

        return wraps(func)(wrapper)

    return decorator


if not os.path.exists("/root/.ipython/ocr.py"):
    from subprocess import run
    from shlex import split

    shellCmd = "wget -qq https://raw.githubusercontent.com/biplobsd/OneClickRun/master/res/ocr.py \
                    -O /root/.ipython/ocr.py"
    run(split(shellCmd))
from ocr import runSh

@timeout(10)
def runShT(args):
    return runSh(args, output=True)


# MEGAcmd installing
if not os.path.exists("/usr/bin/mega-cmd"):
    print("Installing MEGA ...")
    runSh('sudo apt-get -y update')
    runSh('sudo apt-get -y install libmms0 libc-ares2 libc6 libcrypto++6 libgcc1 libmediainfo0v5 libpcre3 libpcrecpp0v5 libssl1.1 libstdc++6 libzen0v5 zlib1g apt-transport-https')
    runSh('sudo curl -sL -o /var/cache/apt/archives/MEGAcmd.deb https://mega.nz/linux/MEGAsync/Debian_9.0/amd64/megacmd-Debian_9.0_amd64.deb', output=True)
    runSh('sudo dpkg -i /var/cache/apt/archives/MEGAcmd.deb', output=True)
    print("MEGA is installed.")
else:
    runShT(f"pkill mega-cmd")

# INPUT YOUR MEGA ID

USERNAME = 'kayeyoc231@llubed.com'  # @param {type:"string"}
PASSWORD = "ss123456"  # @param {type:"string"}
if not (USERNAME == "" or PASSWORD == ""):
    try:
        runShT(f"mega-login {USERNAME} {PASSWORD}")
        print ("megazn login has done successfully")
    except TimeoutError:
        runSh('mega-whoami', output=True)
else:
    print("Please Input your Mega IDs.")
# @markdown *After signing in, use the above cell(Main Cell) to transfer files from Mega to GDrive using the transfer quota of your Mega Pro Account*

# Commented out IPython magic to ensure Python compatibility.


os.chdir('/content/ChatGPT_academic_paper')
'''
#!rm -rf '/content/ChatGPT_academic_paper'
!mkdir '/content/ChatGPT_academic_paper'
# %cd '/content/ChatGPT_academic_paper'
!echo 't' >> t.txt
'''

from subprocess import Popen, PIPE
import shlex
import errno, os

from subprocess import Popen, PIPE
import shlex
from ocr import runSh
import re
from distutils.dir_util import copy_tree

# copy subdirectory example
fromDirectory = '/content/ChatGPT_academic_paper/'
toDirectory = '/content/gdrive/My Drive/yolo_car_database/'

runSh('mega-cd /' )
runSh(' mega-mkdir ChatGPT_academic_paper ')
runSh(' mega-ls ')
runSh('mega-cd ChatGPT_academic_paper ')

# copy_tree(fromDirectory, toDirectory)
def uplaod_mega_nz(root,cloude='mega',title1=''):
  if (cloude=='mega'):
  #  from mega import Mega
  #  mega = Mega()
  #  email = 'woraqofa@ivyandmarj.com'
  #  password = 'feripas800@wgraj.com'
  #  m = mega.login(email, password)
  #  # login using a temporary anonymous account
  #  m = mega.login()
  #  quota = m.get_quota()
  #  # specify unit output kilo, mega, gig, else bytes will output
  #  space = m.get_storage_space(kilo=True)
  #  m.create_folder('yolo_car_database/'+title1+'/')
  #  folder = m.find('yolo_car_database/'+title1+'/')
   # m.upload('myfile.doc', folder[0])
  #  run_command('mega-cd ~ && mega-mkdir Yolo_car_database && mega-cd Yolo_car_database && mega-put '+ root+'/* . ')

   runSh('mega-cd ChatGPT_academic_paper' + title1 + '/')
   runSh('mega-put '+ root+' . ')
   runSh(' mega-ls')

   for path, subdirs, files in os.walk( root):
      for name in files:
        print (files)
          # m.upload(os.path.join(path, name), folder[0])
   # public_exported_web_link = m.export('myfile.doc')
   # public_exported_web_link = m.export('my_mega_folder/my_sub_folder_to_share')

  if (cloude=='google_drive'):
     run_command('mkdir '+root+'/')
     for path, subdirs, files in os.walk( root):
      for name in files:
        # print ('cp -r "'+os.path.join(path, name)+'" '+'"/content/gdrive/My Drive/ChatGPT_academic_paper/' + title1 + '/"')
        # print (os.path.join(path, change_name(name)))
        # os.rename(os.path.join(path, name), os.path.join(path, change_name(name)))
        run_command('cp -r  "'+os.path.join(path, name)+'" '+'"/content/gdrive/My Drive/ChatGPT_academic_paper/' + title1 + '/"')
     try:
        copy_tree(root,'/content/gdrive/My Drive/ChatGPT_academic_paper/' + title1 + '/')
     except OSError as e: # this would be "except OSError, e:" before Python 2.6
        if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            # raise #
            i=0
def change_file_name(root):
  for path, subdirs, files in os.walk( root):
      for name in files:
        print ('filename is: "'+os.path.join(path, name))
        print (os.path.join(path, change_name(name)))
        os.rename(os.path.join(path, name), os.path.join(path, change_name(name)))

def run_command(cmd):
    with Popen(shlex.split(cmd), stdout=PIPE, bufsize=1, universal_newlines=False) as p:
        while True:
            line = p.stdout.readline()
            if not line:
                break
            print(line)
        exit_code = p.poll()
    return exit_code
def change_name(name):
    name_file = ''.join(name)
    name_file = name_file.replace(" ", "_")
    name_file = name_file.replace("'", "_")
    name_file = name_file.replace("\n", "")
    name_file = name_file.replace("\t", "")
    name_file = name_file.replace("!", "")
    name_file = name_file.replace("-", "")
    name_file = name_file.replace("$", "")
    name_file = re.sub(r'[\\/*?:"<>|]',"",name_file)
    return name_file
def MegaZN_upload_file(command):
    # command_title=re.split('([^a-zA-Z0-9])',command)
    command_title_1 = re.split('([^a-zA-Z0-9])', command)
    command_title = ''.join(command_title_1)
    command_title=change_name(command_title)


    # call_args = ' youtube-dl --match-title ' + ' "'+command_title_1[0]+ '" ' + '"ytsearch10":'+'"'+command+ '" '+"--external-downloader-args   '-ss 00:00:03 -t 00:03:08' --write-info-json --write-annotation --write-thumbnail --write-sub -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/mp4'"
    #call_args = ' youtube-dl --match-title ' + ' "'+command_title_1[0]+ '" ' + '"ytsearch100":'+'"'+command+ '" '+"--playlist-end 3  --external-downloader-args   '-ss 00:00:03 -t 00:03:08' --write-info-json --write-annotation --write-thumbnail --write-sub -f 'best[ext=mp4,height<=1080]+best[filesize<100M]' "

    # call_args = call_args.split() # because call takes a list of strings
    # print (call_args)
    # call(call_args)
    # os.chdir("/content/yolo_car_database")
    # run_command('cd "/content/yolo_car_database"')
    # run_command(call_args)
    # os.system("cp --recursive '/content/yolo_car_database' '/content/gdrive/My Drive/yolo_car_databe")
    # os.system('pwd && ls ')
    # copy_tree(fromDirectory, toDirectory)
    # p = Popen(shlex.split(call_args), bufsize=1, universal_newlines=True)
    run_command('mkdir /content/ChatGPT_academic_paper/'+command_title)

    os.chdir( '/content/ChatGPT_academic_paper/'+command_title+'/')
    #run_command(call_args)
    # copy_tree('/content/yolo_car_database/'+command_title+'/', '/content/gdrive/My Drive/yolo_car_database/'+command_title+'/')
    change_file_name('/content/ChatGPT_academic_paper/'+command_title+'/')
    uplaod_mega_nz('/content/ChatGPT_academic_paper/'+command_title+'/','mega',command_title)
    try:
        # call(call_args)
        # run_command('mkdir /content/yolo_car_database/'+command_title)
        # os.chdir( '/content/yolo_car_database/'+command_title+'/')
        # run_command(call_args)
        # copy_tree('/content/yolo_car_database/'+command_title+'/', toDirectory)

        # print (call_args)
        pp=0

    except OSError as e: # this would be "except OSError, e:" before Python 2.6
        if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            raise # re-raise exception if a different error occurred

    # return p.poll()

# !wget https://github.com/spectrico/car-make-model-classifier-yolo3-python/blob/master/labels.txt

i=0
#for line in open('/content/yoloOnGoogleColab/car_type_label.txt','r').readlines():
    #print (line)
    #try:
      #Youtube_download_video(line)

    #except OSError as e: # this would be "except OSError, e:" before Python 2.6
        #if e.errno != errno.ENOENT: # errno.ENOENT = no such file or directory
            #i=1 # re-raise exception if a different error occurred
    #i=i+1
# !cp '/content/yolo_car_database' "gdrive/My Drive/yolo_car_databe"

os.chdir('/content/')
#!pwd
#%cd '/content/'
from google.colab import drive
import os
import subprocess
from docx import Document
from django.utils.text import slugify

# Mount Google Drive
#drive.mount('/content/drive')

def save_academic_paper_with_prompt_megazn(topic, prompt_my,contnet, category):
  # Define the path to the folder in Google Drive
  folder_path = r"/content/ChatGPT_academic_paper/"

  Pdf_Dir= r"/content/ChatGPT_academic_paper/"
  docx_path= f"{folder_path}{topic}.docx"
  # Check if the folder exists
  if not os.path.exists(folder_path):
  # If the folder doesn't exist, create it
    os.mkdir(folder_path)


  # Replace spaces in the topic with underscores
  #topic = topic[:12].replace(" ", "_")
  topic = slugify(topic)

  # Define the path to the DOCX file in the folder


  # Check if the DOCX file exists
  if os.path.isfile(docx_path):
    # If the DOCX file exists, open it

    #docx_path = f"{folder_path}{topic}.docx"#+str(random.randint(0,9))+".docx"
    doc = Document(docx_path)
  else:

    #docx_path = f"{folder_path}{topic}.docx"
    #print(docx_path)
     # If the DOCX file doesn't exist, create a new Document object
    doc = Document()

  # Add the generated text to the document
  p = doc.add_paragraph(prompt_my)
  # Add the generated text to the document
  # Add the generated text to the document
  p.style = doc.styles['Heading 2']

  # Save the document
  doc.save(docx_path)

  # Revert the style of the paragraph back to 'Normal'
  p = doc.add_paragraph(contnet)
  p.style = doc.styles['Normal']

  # Save the document
  doc.save(docx_path)

  # Convert the DOCX file to a PDF
  convert_docx_to_pdf(docx_path,Pdf_Dir)

  os.chdir(folder_path)

    # copy_tree('/content/yolo_car_database/'+command_title+'/', '/content/gdrive/My Drive/yolo_car_database/'+command_title+'/')

  uplaod_mega_nz('/content/ChatGPT_Paper_wrting/')
  uplaod_mega_nz('/content/ChatGPT_Paper_wrting/','google_drive')
  return docx_path,Pdf_Dir

#save_academic_paper("Persian_"+'topic','\n**'+'choice_translated_prompt'+'**\n'+"choice_translated")
topic = TOPIC[:20].replace(" ", "_")
topic = slugify(TOPIC[:-5])
docx_path = f"{topic}.docx"

print(docx_path)

"""#Running the ChatDev codes based of prompt: 👇🌹🔥🐢🌱"""

import importlib.util
import pkg_resources
from pkg_resources import DistributionNotFound, VersionConflict
import pip
import os


import subprocess

def runSh_(command):
   result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)

   if result.returncode != 0:
       print(f"Error: {result.stderr}")
   else:
       print(f"Output: {result.stdout}")

   return result.stdout

def runSh(command):
  result = subprocess.run(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, text=True)

  if result.returncode != 0:
      print(f"Error: {result.stderr}")
  else:
      print(f"Output: {result.stdout}")

  return result.stdout, result.stderr
def check_and_install_requirements(requirements_file_path='', additional_modules=[]):
   # If a requirements file path is provided, check and install the requirements
   if requirements_file_path:
     # Ensure the file exists
     if not os.path.isfile(requirements_file_path):
         print(f"The file {requirements_file_path} does not exist.")
         return

     # Parse the requirements file
     with open(requirements_file_path, 'r') as file:
         requirements = file.readlines()

     # Iterate over each requirement
     for requirement in requirements:
         package_name = requirement.strip() # remove leading/trailing white spaces

         # Check if the package is installed
         package_name_1 = package_name.split('=')
         print( '\n Modules are :',package_name, 'and module_1 is :',f'{package_name_1[0]}' )

         spec = importlib.util.find_spec(package_name_1[0])
         if spec is None:
             print(f"{package_name} is not installed. Installing...")

             # Install the package
             pip.main(['install', package_name])
         else:
             print(f"{package_name} is installed.")

   # Iterate over each additional module
   for module in additional_modules:
     # Check if the module is installed
     print( '\n Modules are :',module)

   # Iterate over each additional module
   for module in additional_modules:
     # Check if the module is installed
     module_1 = module.split('=')
     print( '\n Modules are :',module, 'and module_1 is :',f'{module_1[0]}' )
     spec = importlib.util.find_spec(f'{module_1[0]} ')
     if spec is None:
         print(f"{module} is not installed. Installing...")

         # Install the module
         #pip.main(['install', f"{module}"])
         runSh(f'python3 -m pip install {module} ')
     else:
         print(f"{module} is installed.")

#check_and_install_requirements('', ['module1', 'module2'])

#check_and_install_requirements('path/to/requirements.txt', ['module1', 'module2'])

from subprocess import Popen, PIPE
import os, glob, shutil
import glob



class ChatDev_Run():


   def copy_folder_to_destination(self,src_folder, dst_folder,folder_name):
      src_folder = os.path.abspath(src_folder)
      dst_folder = os.path.abspath(dst_folder)
      for folder in glob.glob(f'{src_folder}/*{folder_name}*/**/**/**', recursive=True):
         if os.path.isdir(folder):
           dst_folder_path = os.path.join(dst_folder, os.path.relpath(folder, src_folder))
           shutil.copytree(folder, dst_folder_path,dirs_exist_ok=True)



   def ChatDev_Doit (self,Prompt,Topic_Name,dst,save_results_Dir):

       #Current_Dir = os.getcwd()
       #dst = '/content/drive/MyDrive/ChatGPT_Paper_wrting/ChatDev_projec/'

       #Check Chat dev is installed or not
       if not os.path.exists(dst):
          os.makedirs(dst)

       os.chdir(dst)
       new_destination = dst+'/ChatDev/'
       if not os.path.exists(new_destination):
          runSh('git clone https://github.com/OpenBMB/ChatDev.git')
          #os.makedirs(new_destination)
       os.chdir(new_destination)

       #check_and_install_requirements('',[ 'colorama==0.1.6',"openai==0.28.0" ,'tiktoken', 'tenacity'])

       #check_and_install_requirements(f'{new_destination}/requirements.txt')


       runSh('python3 -m pip install colorama==0.1.6 openai==0.28.0 tiktoken tenacity')

       runSh('python3 -m pip install -r requirements.txt')

       os.environ['OPENAI_API_KEY'] = openai_api
       #Prompt = Prompt.replace('\n', ' ')
       #Topic_Name = Topic_Name.replace('\n',' ')

       os.chdir(new_destination)
       try :
          Prompt = Prompt.replace('"""',"'''").replace('\n', '\\n')

       except:
          print("""Prompt = Prompt.replace('"""',"'''").replace('\n', '\\n'))""")

       try :
          Topic_Name = Topic_Name.replace('"""',"'''").replace('\n', '\\n')

       except:
          print("""Topic_Name = Topic_Name.replace('"""',"'''").replace('\n', '\\n')""")

       print("python3 run.py --task "+ f""" {Prompt}"""+" --name "+ f'"""{Topic_Name}"""')

       #runSh("python3 run.py --task "+ f'"{Prompt}"'+" --name "+ f'"{Topic_Name}"')
       Result, Error = runSh("python3 run.py --task "+ f"""{Prompt}'"""+" --name "+ f"""'{Topic_Name}'""" ) #+ ' --path '+ f'{new_destination}' )
       print(f"Result: {Result}")
       print(f"Error: {Error}")

       root = f'{new_destination}/WareHouse/'

       self.copy_folder_to_destination(root,save_results_Dir,Topic_Name)


       #runSh(f"cp -r '{new_destination}/WareHouse/' '{save_results_Dir}'")

       return Result, Error



   def run_command_1(self,cmd):
      with Popen(shlex.split(cmd), stdout=PIPE, bufsize=1, universal_newlines=False) as p:
        while True:
            line = p.stdout.readline()
            if not line:
                break
            print(line)
        exit_code = p.poll()
      return exit_code

#Current_Dir = os.getcwd()
#dst = '/content/drive/MyDrive/ChatGPT_Paper_wrting/ChatDev_projec/'

#Results , Error = ChatDev_Run().ChatDev_Doit(f'as a programer do action {ACTION} for this project example for {PROJECT_EXAMPLE} which is por this topic {TOPIC} ',f'{TOPIC}', dst,Current_Dir)
#print ( 'Results', Results)

"""#Download and upload vidoe form the internet and put it on YouTube 🦋🌹🌀🙏🌺 :"""

#!pip install pillar-youtube-upload

#https://github.com/pillargg/youtube-upload


# Video options
options = {
    "title" : "Example title", # The video title
    "description" : "Example description", # The video description
    "tags" : ["tag1", "tag2", "tag3"],
    "categoryId" : "22",
    "privacyStatus" : "private", # Video privacy. Can either be "public", "private", or "unlisted"
    "kids" : False, # Specifies if the Video if for kids or not. Defaults to False.
    "thumbnailLink" : "https://cdn.havecamerawilltravel.com/photographer/files/2020/01/youtube-logo-new-1068x510.jpg" # Optional. Specifies video thumbnail.
}

# upload video
#uploader.upload(file_path, options)

"""#I have tried to update the prompt by ChatGPT itself 👇👇"""

def extract_main_variables(prompts, variable):
   main_variables= main_variables_0
   for prompt in prompts:
       variables = re.findall(r'\{(\w+)\}', prompt)
       for var in variables:
           if var == 'TOPIC':
               main_variables[var] = variable
           else:
               main_variables[var] = None

   return main_variables

def extract_main_variables(prompts, variable_para, var_content):
    main_variables = main_variables_0

    new_prompt = prompts[:]  # Create a deep copy of prompts

    for i, prompt in enumerate(prompts):
        for var in variable_para:
            if var == variable_para :
                main_variables[var] = var_content
                new_prompt[i] = prompt.replace(var, var_content)
        for var, value in main_variables.items():
             if var == variable_para:
                main_variables[var] = var_content
                new_prompt[i] = new_prompt[i].replace('{'+var+'}', "{"+f"{var}"+'}'+f" which is :{var_content}")#f"{{{variable}}}")


    return main_variables, new_prompt
#TOPIC='my test topic'
main_variables, prompt_new = extract_main_variables(prompts, 'TOPIC', TOPIC)
print (" topic is :", TOPIC)
print("main variable is :", main_variables)
print("new_prompt is :", prompt_new)
prompts= prompt_new
print("prompt is :", prompts)

import re

def generate_prompt_from_response(previous_response, main_variables):
   # Customize this logic based on your needs
   # For simplicity, let's use the last 50 characters of the response as the new prompt
   new_prompt = previous_response[-50:]

   # Replace the main variables in the new prompt
   for var, value in main_variables.items():
       if value is not None:
           new_prompt = new_prompt.replace(value, f"{{{var}}}")

   return new_prompt

# Example usage
#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"  #f" the dark triad in psychology and it's relation with {goal}"
#TOPIC = f"Understanding the Cycle of Domestic Violence against iranian women: The Influence of Economic Power"

prompts_1 = [
f"Find a research topic for a PhD in the area of '{TOPIC}'",

]
#prompts_2 = [
#   "I need to find information on renewable energy for a research paper that will be 1,500 words and must include eight sources.",
#   "The research paper should cover the latest advancements in renewable energy technology."
#]

#main_variables,prompt_new = extract_main_variables(prompts,'TOPIC',TOPIC)
#print(main_variables)

#previous_response = "Previous GPT response"
#new_prompt = generate_prompt_from_response(previous_response, main_variables)
#print(new_prompt)
#print ( prompts)

"""#Updating the prompt by ChatGPT:👇👇"""

import tiktoken

def num_tokens_from_string(string: str, encoding_name: str) -> int:
    """Returns the number of tokens in a text string."""
    encoding = tiktoken.get_encoding(encoding_name)
    num_tokens = len(encoding.encode(string))
    return num_tokens

num_tokens_from_string("tiktoken is great!", "cl100k_base")

def generate_prompt_update_0(prompt, previous_content, main_variables):
   model_engine = "text-davinci-003"
   max_tokens = 2048

   # Replace the TOPIC variable in the prompt
   for var, value in main_variables.items():
       if var == 'TOPIC' and value is not None:
           prompt = prompt.replace(f"{{{var}}}", value)

   # Construct the instruction for updating the prompt
   instruction = f"Given the previous content:\n\n{previous_content}\n\nUpdate the prompt: {prompt}"

   # Create the completion with the instruction
   completion = client.completions.create(
       model=model_engine,
       prompt=instruction,
       max_tokens=max_tokens,
       temperature=0.3,
       n=1,
       frequency_penalty=0,
   )

   # Extract and return the updated prompt from the response
   updated_prompt = completion.choices[0].text.strip()
   return updated_prompt

from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=20, max_time=600)
def generate_prompt_update_a1(prompt_my):
  model_engine = "text-davinci-003"
  max_tokens = 2048

  completion = client.completions.create(
      model="gpt-3.5-turbo-instruct",
      #model="curie"
      prompt=prompt_my,
      max_tokens=2048,
      temperature=0.3,
      n=1,
      frequency_penalty=0,
  )
  return completion

import random
import time
import openai
from openai import RateLimitError
import os
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

client = OpenAI(
   # defaults to os.environ.get("OPENAI_API_KEY")
   api_key = openai_api# "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",
)
def retry_with_exponential_backoff(
   func,
   initial_delay: float = 1,
   exponential_base: float = 2,
   jitter: bool = True,
   max_retries: int = 15,
   errors: tuple = (RateLimitError,),
):
   """Retry a function with exponential backoff."""
   def wrapper(*args, **kwargs):
       # Initialize variables
       num_retries = 0
       delay = initial_delay
       # Loop until a successful response or max_retries is hit or an exception is raised
       while True:
           try:
               return func(*args, **kwargs)
           # Retry on specified errors
           except errors as e:
               # Increment retries
               num_retries += 1
               # Check if max retries has been reached
               if num_retries > max_retries:
                  raise Exception(
                      f"Maximum number of retries ({max_retries}) exceeded."
                  )
               # Increment the delay
               delay *= exponential_base * (1 + jitter * random.random())
               # Sleep for the delay
               #time.sleep(delay)
           # Raise exceptions for any errors not specified
           except Exception as e:
               raise e
   return wrapper
from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=20, max_time=600)

@retry_with_exponential_backoff
def generate_prompt_update(prompt_my):
   model_engine = "text-davinci-003"
   max_tokens = 2048
   print(f"{num_tokens_from_string(prompt_my,model)} prompt tokens counted by num_tokens_from_messages().")

   completion = client.completions.create(
     model="gpt-3.5-turbo-instruct",
     prompt=prompt_my,
     max_tokens=500,
     temperature=0.1,
     n=1,
     frequency_penalty=0,
   )
   return completion


@retry_with_exponential_backoff
def generate_academic_paper(prompt_my):
   model_engine = "text-davinci-003"
   max_tokens = 2048
   print(f"{num_tokens_from_string(prompt_my,model)} prompt tokens counted by num_tokens_from_messages().")


   completion = client.completion.create(
     #model="gpt-3.5-turbo-instruct",
     model="gpt-3.5-turbo-1106",
     prompt=prompt_my,
     max_tokens=2048,
     temperature=0.3,
     n=1,
     frequency_penalty=0,
   )
   return completion

import time
def generate_content(prompts, variables, TOPIC, perviuse_content=""):
  # Generate content for each variable
  variable_contents = {}


  main_variables = main_variables_0
  for prompt in prompts:
      for var in variables:
          if var in prompt:
              print(f"\n---prompt is ----\n{prompt}")
              #prompt_my = f"Generate content for the variable '{var}' in the context of the topic '{TOPIC}'. Please consider the result must be in less than 10 words. The prompt is '{prompt}'. Also the more information for understanding better content is '{perviuse_content}'"

              prompt_my = f"Generate content for the variable '{var}' in the context of the topic '{TOPIC}'. Please consider the result must be sumerized and as variable for chatgpt academic phd writer assistance. The prompt is '{prompt}'. Also the more information for understanding better content is '{perviuse_content}'"
              content = generate_prompt_update_a1(prompt_my)
              for choice in content.choices:
                print("\n Result is :"+choice.text)
                variable_contents[var] = choice.text
              print(f"variable_contents[{var}] is: {variable_contents[var]}")

              time.sleep(random.randint(22, 40))

  # Replace the variables in the prompts with the generated content
  prompt_new = []
  for prompt in prompts:
      for var, content in variable_contents.items():
          prompt = prompt.replace(f"{{{var}}}", variable_contents[var])
      prompt_new.append(prompt)
      print("\n --- Updated prompt is :\n"+str(prompt_new))
  return prompt_new

# Define main variables
#TOPIC = "strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"

# List of variables
variables = ["RESEARCH_DOMAIN", "PARAGRAPH", "PARAGRAPHS", "TOPIC_SENTENCE", "LANGUAGE", "ABSTRACT_PARAGRAPH", "BIBLIOGRAPHY", "THEORY1", "THEORY2", "RESEARCH_QUESTIONS", "ACTION", "RESULT_PARAGRAPHS", "DATE", "NUMBER_OF_DAYS_MONTHS_YEARS"]

# List of prompts
#prompts = ["prompt1", "prompt2", "prompt3"] # replace with your actual prompts
#perviuse_content= "test"
# Call the function and store the returned prompts
#updated_prompts = generate_content(prompts, variables, TOPIC, perviuse_content)
#print("Updated Prompts:", updated_prompts)

import time
def generate_content_2(prompts, variables, TOPIC, perviuse_content=""):
  # Generate content for each variable
  variable_contents = {}
  main_variables = main_variables_0
  for prompt in prompts:
      for var in variables:
          if var in prompt:
              print(f"\n---prompt is ----\n{prompt}")
              prompt_my = f"Generate content for the variable '{var}' in the context of the topic '{TOPIC}'. Please consider the result must be in less than 10 words. The prompt is '{prompt}'. Also the more information for understanding better content is '{perviuse_content}'"
              content = generate_prompt_update_a1(prompt_my)
              for choice in content.choices:
                print("\n Result is :"+choice.text)
                variable_contents[var] = choice.text
              print(f"variable_contents[{var}] is: {variable_contents[var]}")

              #time.sleep(random.randint(22, 40))

  main_variables, prompt_new = extract_main_variables(prompts, var, variable_contents[var])

  print("main variable is :", main_variables)
  print("new_prompt is :", prompt_new)
  prompts= prompt_new

  # Replace the variables in the prompts with the generated content
  prompt_new = []
  for prompt in prompts:
      for var, content in variable_contents.items():
          prompt = prompt.replace(f"{{{var}}}", variable_contents[var])
      prompt_new.append(prompt)
      print("\n --- Updated prompt is :\n"+str(prompt_new))
  return prompt_new,main_variables

# Define main variables
#TOPIC = "strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"

# List of variables
variables = ["RESEARCH_DOMAIN", "PARAGRAPH", "PARAGRAPHS", "TOPIC_SENTENCE", "LANGUAGE", "ABSTRACT_PARAGRAPH", "BIBLIOGRAPHY", "THEORY1", "THEORY2", "RESEARCH_QUESTIONS", "ACTION", "RESULT_PARAGRAPHS", "DATE", "NUMBER_OF_DAYS_MONTHS_YEARS"]

# List of prompts
#prompts = ["prompt1", "prompt2", "prompt3"] # replace with your actual prompts
#perviuse_content= "test"
# Call the function and s uptore the returned prompts
#updated_prompts = generate_content(prompts, variables, TOPIC, perviuse_content)
#print("Updated Prompts:", updated_prompts)

# Import the necessary libraries and set up the API key
#!pip install openai
import json
#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality" #f" the dark triad in psychology and it's relation with {goal}"
#TOPIC = f"Understanding the Cycle of Domestic Violence against iranian women: The Influence of Economic Power"


#topic = f"The Importance of Focusing on Waste Collection in a Waste-Filled World"
import openai
import os
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

#client = OpenAI(
   # defaults to os.environ.get("OPENAI_API_KEY")
   #api_key = "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",
#)
#openai.api_key = os.getenv('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')
# Define the prompts
prompts3 = [
f"Find a research topic for a PhD in the area of '{topic}'",
f"Write a detailed proposal on the following research '{topic}'. Make Sure it is free from plagiarism. ",
f"Identify gaps in the literature on '{topic}'",
"Generate 10 academic research questions about Perviuse action",
f"Generate a list of research hypotheses related to '{topic}'"
]

from googletrans import Translator

# Create a Translator object
translator = Translator()

from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=20, max_time=600)
def generate_academic_paper_a0(prompt_my):
  model_engine = "text-davinci-003"
  max_tokens = 2048

  completion = client.completions.create(
      model="gpt-3.5-turbo-instruct",
      prompt=prompt_my,
      max_tokens=2048,
      temperature=0.3,
      n=1,
      frequency_penalty=0,
  )
  return completion

#!pip install groq
#!pip install exa_py

from groq import Groq
from exa_py import Exa

import os

# Set the max_split_size_mb environment variable
os.environ["EXA_API_KEY"] = "870ed4c9-8932-4f86-ae3f-ead03a16167c"
os.environ["GROQ_API_KEY"] = "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"


#"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"
#"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"

# Declare the exa search API
exa = Exa(api_key=os.getenv("EXA_API_KEY"))

# Define your API Model and key
client_free = Groq(api_key=os.getenv("GROQ_API_KEY"))
utilized_model = "llama-3.2-3b-preview" #"llama3-70b-8192"

highlights_options = {
    "num_sentences": 7,  # Length of highlights
    "highlights_per_url": 1,  # Get the best highlight for each URL
}

def call_llm(prompt):
    search_response = exa.search_and_contents(query=prompt, highlights=highlights_options, num_results=3, use_autoprompt=True)
    info = [sr.highlights[0] for sr in search_response.results]

    system_prompt = "You are a Business proposal generator. Read the provided contexts and, if relevant, use them to answer the user's question."
    user_prompt = prompt # f"Sources: {info}\nQuestion: {prompt}"

    completion = client_free.chat.completions.create(
        model=utilized_model,
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_prompt},
        ]
    )
    return completion.choices[0].message.content

import time,random
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

client = OpenAI(
   # defaults to os.environ.get("OPENAI_API_KEY")
   api_key = openai_api#"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",
)


global k
k=0

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer

#ChatGPT image prompt creating
def image_prompting(contnet,prompt):
    # Generate text with Sumy
    parser = PlaintextParser.from_string(contnet, Tokenizer("english"))
    summarizer = LsaSummarizer()
    summary_sumy = summarizer(parser.document, 3)
    print("\nSumy Summary and remove the html content from this content :\n", summary_sumy)
    prompt_my = f"As report logo designer suggest the text to image prompt in the context of the topic '{TOPIC}', in less one paragraph, for the this part of the report :({summary_sumy})"
    image_prompt = generate_prompt_update_a1(prompt_my)
    image_prompt = image_prompt.choices[0].text.strip()
    print("\n Image Prompt Result is :",image_prompt)
    return image_prompt

def update_prompt (prompt, main_variables):
        # Replace variables in the prompt with corresponding values from main_variables
        for variable, value in main_variables.items():
          if variable in prompt:
            print ( '\n variable is :', variable,' \n and value is :', value)
            prompt = prompt.replace("{"+variable+"}", value)
            prompt = prompt.replace(f"{{{variable}}}", value)

            print ( '\n Prompt new us :', prompt)
        return prompt


def generate_papers_0(prompts, perviuse_content, perviuse_try_numner,prompt_Word_Topic_0, category='First',main_variables= main_variables_0, make_photo = False):
  choice_text_all=[]
  global prompt_Word_Topic,k
  prompt_Word_Topic_1 = prompt_Word_Topic_0
  print('prompt_Word_Topic_1 is :',prompt_Word_Topic_1)
  k = perviuse_try_numner
  for i in range(perviuse_try_numner, len(prompts), 20):
     # Slice the prompts list to get the next 20 prompts
     print("I is ",i," Len of prompt Is:", len(prompts))

     batch = prompts[i:i+20]
     print("batch is ",batch)


     for prompt in batch:

         # Print the prompt
         print("prompt is ",list({prompt}))

         #updated_prompts = generate_content(list({prompt}), variables, TOPIC, perviuse_content)

         updated_prompts = update_prompt(prompt, main_variables)
         print("Updated Prompts:", updated_prompts)

         t = 0
         while (t == 0):

           time.sleep(random.randint(22, 40))
           #response = generate_academic_paper_a0(updated_prompts)
           response= call_llm(updated_prompts)
           print(f"\n Generated Content in the Field of {category} is: ")
           print("========================\n")

           if not response:
             print("The response generate_academic_paper_a0 is empty.")
           else:
             print("\n The response generate_academic_paper_a0 is not empty and is :\n")
           t= 1

         for choice in response.choices:
           print(choice.text)
           choice_in_loop = choice.text
           choice_text_all.append(choice.text)


         #save_academic_paper(topic,'\n--------**\n'+updated_prompts+'/n-------**\n'+choice.text)
         if make_photo:
            image_prompt = image_prompting(choice.text, updated_prompts)
         else:
            image_prompt = ''
         if k == 0 :
            # using string concatenation
            new_string = choice.text #+ prompt_Word_Topic_1[1:]
            print ('\n new_string is:',new_string)
            prompt_Word_Topic_1[0] = new_string
            #prompt_Word_Topic_1[0] = choice.text
            prompt_Word_Topic_1[0] = prompt_Word_Topic_1[0].replace ( '"','')
            print ('\n Prompt for topic is',prompt_Word_Topic_1[0]  )

            #ChatGPT image prompt creating
            save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)
            save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_T",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)

         else :
            save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',image_prompt,choice.text,perviuse_try_numner,category,make_photo)
            save_academic_paper_with_prompt_Tile(TOPIC[:15]+'_T',prompt_Word_Topic_1[k],image_prompt,choice.text,perviuse_try_numner,category,make_photo)

         #save_academic_paper_with_prompt_megazn(TOPIC[:15],'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',choice.text,category,make_photo)
         #save_academic_paper_with_prompt_megazn(TOPIC[:15],'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',choice.text, 'google_drive',category,make_photo)
         if hasattr(choice, 'choices'):
             extract_text(choice)

         perviuse_content = choice_in_loop
         print("\n end of loop")
         print("========================\n")

         time.sleep(random.randint(22, 40))
         perviuse_try_numner = perviuse_try_numner+1
         k=k+1
  return choice.text,perviuse_try_numner,response

#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality" #f" the dark triad in psychology and it's relation with {goal}"
#TOPIC = f"Understanding the Cycle of Domestic Violence against iranian women: The Influence of Economic Power"

def generate_papers_1(prompts, initial_content, start_index, prompt_template, category, variables, make_photo=False):
    choice_texts = []
    for i in range(start_index, len(prompts), 20):
        batch = prompts[i:i+20]
        for prompt in batch:
            # Check if the prompt is complete before updating it
            if '{' in prompt and '}' in prompt:
                updated_prompt = update_prompt(prompt, variables)
                print(f"Updated Prompt: {updated_prompt}")
            else:
                print(f"Prompt is incomplete: {prompt}")
                updated_prompt = prompt  # Initialize with original prompt if not complete

            while True:
                time.sleep(random.randint(22, 40))
                response = call_llm(updated_prompt)
                print(f"Generated Content in {category}:")
                print(response)
                if response:
                    break

            choice_text = response
            choice_texts.append(choice_text)

            if make_photo:
                image_prompt = image_prompting(choice_text, updated_prompt)
            else:
                image_prompt = ''

            if i == start_index:
                prompt_with_content = f"{prompt_template[0]}{choice_text}{prompt_template[1]}"
                save_academic_paper_with_prompt(TOPIC[:15]+"_Pr", prompt_with_content, image_prompt, "", i, category, make_photo)
                save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_T", prompt_with_content, image_prompt, "", i, category, make_photo)
            else:
                save_academic_paper_with_prompt(TOPIC[:15]+"_Pr", f"**<<< ChatGPT Prompt: {updated_prompt} >>>**\n{image_prompt}\n{choice_text}", i, category, make_photo)
                save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_T", prompt_with_content, image_prompt, choice_text, i, category, make_photo)

            initial_content = choice_text

    return choice_texts, start_index + len(batch)

def generate_papers_2(prompts, perviuse_content, perviuse_try_numner,prompt_Word_Topic_0, category='First',main_variables= main_variables_0, make_photo = False):
    choice_text_all=[]
    choice_texts = []
    global prompt_Word_Topic,k
    prompt_Word_Topic_1 = prompt_Word_Topic_0
    print('prompt_Word_Topic_1 is :',prompt_Word_Topic_1)
    k = perviuse_try_numner
    for i in range(perviuse_try_numner, len(prompts), 20):
        # Slice the prompts list to get the next 20 prompts
        print("I is ",i," Len of prompt Is:", len(prompts))

        batch = prompts[i:i+20]
        print("batch is ",batch)


        for prompt in batch:

            # Print the prompt
            print("prompt is ",list({prompt}))

            #updated_prompts = generate_content(list({prompt}), variables, TOPIC, perviuse_content)

            updated_prompts = update_prompt(prompt, main_variables)
            print("Updated Prompts:", updated_prompts)

            t = 0
            while (t == 0):

                time.sleep(random.randint(22, 40))
                #response = generate_academic_paper_a0(updated_prompts)
                response= call_llm(updated_prompts)
                print(f"\n Generated Content in the Field of {category} is: ")
                print("========================\n")

                if not response:
                    print("The response generate_academic_paper_a0 is empty.")
                else:
                    print("\n The response generate_academic_paper_a0 is not empty and is :\n")


                # Check if response is a string or has choices attribute
                if isinstance(response, str):
                    choice_text = response
                    print(f"\n Generated Content: {choice_text}")
                elif hasattr(response, 'choices') and isinstance(response.choices, list) and len(response.choices) > 0:
                    choice_text = response.choices[0].text
                else:
                    print(f"\n Unexpected response type: {type(response)}")
                    choice_text = ""  # Set empty string if response is not expected type

                t= 1

            choice_text_all.append(choice_text)

            #save_academic_paper(topic,'\n--------**\n'+updated_prompts+'/n-------**\n'+choice.text)
            if make_photo:
               image_prompt = image_prompting(choice.text, updated_prompts)
            else:
               image_prompt = ''
            if k == 0 :
               # using string concatenation
               new_string = choice.text #+ prompt_Word_Topic_1[1:]
               print ('\n new_string is:',new_string)
               prompt_Word_Topic_1[0] = new_string
               #prompt_Word_Topic_1[0] = choice.text
               prompt_Word_Topic_1[0] = prompt_Word_Topic_1[0].replace ( '"','')
               print ('\n Prompt for topic is',prompt_Word_Topic_1[0]  )

               #ChatGPT image prompt creating
               save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)
               save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_T",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)

            else :
               save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',image_prompt,choice.text,perviuse_try_numner,category,make_photo)
               save_academic_paper_with_prompt_Tile(TOPIC[:15]+'_T',prompt_Word_Topic_1[k],image_prompt,choice.text,perviuse_try_numner,category,make_photo)

            #save_academic_paper_with_prompt_megazn(TOPIC[:15],'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',choice.text,category,make_photo)
            #save_academic_paper_with_prompt_megazn(TOPIC[:15],'\n**<<<  ChatGPT Prompt is:\n'+''.join(updated_prompts)+'\n>>>**\n',choice.text, 'google_drive',category,make_photo)
            if hasattr(response, 'choices') and isinstance(response.choices, list) and len(response.choices) > 0:
                extract_text(response.choices[0])
            else:
                print("No choices found in the response.")

            perviuse_content = choice_text
            print("\n end of loop")
            print("========================\n")

            time.sleep(random.randint(22, 40))
            perviuse_try_numner = perviuse_try_numner+1
            k=k+1
    return choice_text_all, perviuse_try_numner+1, ""

def generate_papers(prompts, perviuse_content, perviuse_try_numner, prompt_Word_Topic_0, category='First', main_variables=main_variables_0, make_photo=False):
    choice_text_all = []
    global prompt_Word_Topic, k
    prompt_Word_Topic_1 = prompt_Word_Topic_0
    print('prompt_Word_Topic_1 is :', prompt_Word_Topic_1)
    k = perviuse_try_numner
    for i in range(perviuse_try_numner, len(prompts), 20):
        print("I is ", i, " Len of prompt Is:", len(prompts))
        batch = prompts[i:i+20]
        print("batch is ", batch)

        for prompt in batch:
            # Print the prompt
            print("prompt is ", list({prompt}))

            updated_prompts = update_prompt(prompt, main_variables)
            print("Updated Prompts:", updated_prompts)

            t = 0
            while (t == 0):
                if not utilized_model: # is ...:
                   time.sleep(random.randint(22, 40))
                response = call_llm(updated_prompts)
                print(f"\n Generated Content in the Field of {category} is: ")
                print("========================\n")

                if not response:
                    print("The response generate_academic_paper_a0 is empty.")
                else:
                    print("\n The response generate_academic_paper_a0 is not empty and is :\n")

                # Check if response is a string or has choices attribute
                if isinstance(response, str):
                    choice_text = response
                    print(f"\n Generated Content: {choice_text}")
                elif hasattr(response, 'choices') and isinstance(response.choices, list) and len(response.choices) > 0:
                    choice_text = response.choices[0].text
                else:
                    print(f"\n Unexpected response type: {type(response)}")
                    choice_text = ""  # Set empty string if response is not expected type

                t = 1

            choice_text_all.append(choice_text)

            if make_photo:
                image_prompt = image_prompting(updated_prompts, choice_text)
            else:
                image_prompt = ''

            if k == 0:
                new_string = choice_text  # Removed the concatenation with prompt_Word_Topic_1[1:]
                print('\n new_string is:', new_string)
                prompt_Word_Topic_1[0] = new_string
                prompt_Word_Topic_1[0] = prompt_Word_Topic_1[0].replace('"', '')
                print('\n Prompt for topic is', prompt_Word_Topic_1[0])

                save_academic_paper_with_prompt(TOPIC[:15] + "_Pr", prompt_Word_Topic_1[k], image_prompt, "", perviuse_try_numner, category, make_photo)
                save_academic_paper_with_prompt_Tile(TOPIC[:15] + "_T", prompt_Word_Topic_1[k], image_prompt, "", perviuse_try_numner, category, make_photo)
            else:
                save_academic_paper_with_prompt(TOPIC[:15] + "_Pr", '\n**<<<  ChatGPT Prompt is:\n' + ''.join(updated_prompts) + '\n>>>**\n', image_prompt, choice_text, perviuse_try_numner, category, make_photo)
                save_academic_paper_with_prompt_Tile(TOPIC[:15] + '_T', prompt_Word_Topic_1[k], image_prompt, choice_text, perviuse_try_numner, category, make_photo)

            if hasattr(response, 'choices') and isinstance(response.choices, list) and len(response.choices) > 0:
                extract_text(response.choices[0])
            else:
                print("No choices found in the response.")

            perviuse_content = choice_text
            print("\n end of loop")
            print("========================\n")

            if not utilized_model: # is ...:

              time.sleep(random.randint(22, 40))
            perviuse_try_numner = perviuse_try_numner + 1
            k = k + 1

    return choice_text_all, perviuse_try_numner + 1, ""

"""# Save module list :

https://stackoverflow.com/questions/31684375/automatically-create-file-requirements-txt

```
pip freeze > requirements.txt

```
"""

#!pip freeze > requirements.txt

"""#Final Results 👇🌹🌱"""

from django.utils.text import slugify
import os
prompts_business_plan_test = [
    f"suggest one Business Plans repost Title in less than 15 word, based of This Topic :({TOPIC}) and the description:({PARAGRAPH}.",
  ]
class Auto_Main():
  def __init__(self):
        pass
  def prompts_all(self): #, topic, description, main_variables_0):
        prompts = {
            "Save Variables" : prompt_save_var,
            #"Code For It" : prompts_chatdev,
            "Game Theory" : prompts_game_theory_1,
            "Business Plan" : prompts_business_plan,
            "Project Managment Report" :prompts_project_management,
            "Cancel Culture report" : Prompt_cancel_culture,
            "Psychology 7 Step" : prompts_Psychology,
            "6 Hat Brainstorming" : prompt_6Hat_Brainstorm,
            #"Academic Proposal" : prompts_Academic,
            #"Financial Model" : prompts_finantial,
            "Academic Critique Paper" : prompts_Academic_proposal_critique,
            "Political Party Constitution" : prompt_party_chart,
            "Novel Structure": prompts_story,
            "Radio Script" : prompt_radio_script,
            "Pitch Deck": prompts_pitch,
            "The meeting content" : prompt_meeting,
            "General Course Designing":prompt_course,
            ##"Course Designing" : prompts_manual,

        }
        prompts_topic = {
            #"Course Designing": prompts_manual_Title,
            "Save Variables" : prompt_save_var_title,
            "Radio Script" : prompt_radio_script_title,
            "General Course Designing":prompt_course_title,
            "Project Managment Report" : prompts_project_management_title,
            "Pitch Deck": prompt_Word_Topic_pitch,
            "Psychology 7 Step" : prompt_Word_Topic_Psychology,
            "Novel Structure" : prompts_story_topic,
            "Code For It":prompts_Topic_chatdev,
            "Financial Model" : prompt_Word_Topic_finantial,
            "Academic Proposal" : prompt_Word_Topic_Academic,
            "Academic Critique Paper" : prompt_Word_Topic_Academic_proposal_critique,
            "Game Theory" : prompt_Word_Topic_game_theory_1,
            #"Pitch Deck": prompt_Word_Topic_pitch,
            "Business Plan":prompt_Word_Topic_business_plan,
            "6 Hat Brainstorming" : prompt_Word_Topic_6Hat_Brainstorm,
            "The meeting content" : prompt_meeting_title,
            "Cancel Culture report" : Prompt_cancel_culture_title,
            "Political Party Constitution" : prompt_party_chart_title,

        }

        return prompts,prompts_topic

  def for_each_category(self, Main_Variable, prompts = None,prompts_topic= None):

     if prompts is None:
        prompts,prompts_topic = self.prompts_all()

     results = {}
     for category, category_prompts in prompts.items():
        for category_topic, category_prompts_topic in prompts_topic.items():
            if (category==category_topic):
            #for prompt in category_prompts:
                perviuse_try_numner = 0
                # Update the prompt with variables
                print ( '\n category is :',category,'\n category_prompts is:',category_prompts)
                #updated_prompt = self.update_prompt(prompt, main_variables_0)
                if category == 'Save Variables' :
                   topic = TOPIC_CLASS()
                   topic.category['main_variables']['category']=category
                   for variable, value in topic.category['main_variables'].items():
                     prompt =prompt_save_var[1]

                     if variable in prompt:
                        print ( '\n variable is :', variable,' \n and value is :', value)
                        prompt = prompt.replace(f"{{{variable}}}", value)
                        print ( '\n Prompt new us :', prompt)
                   #prompt_save_var[1] == prompt
                   #prompt_save_var[2] == topic.category['main_variables'].items()
                   save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_Pr",TOPIC,"",prompt_save_var_title[0],0,category,False)
                   save_academic_paper_with_prompt_Tile(TOPIC[:15]+"_Pr",prompt_save_var[2],"",prompt_save_var_title[1],11,category,False)

                   save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",TOPIC,"",prompt_save_var_title[0],0,category,False)
                   save_academic_paper_with_prompt(TOPIC[:15]+"_Pr",prompt,"",prompt_save_var_title[1],11,category,False)
                   category_prompts = category_prompts + prompt_presentation
                   category_prompts_topic = category_prompts_topic + prompt_presentation_topic
                   #response = self.main(perviuse_try_numner,category_prompts,category_prompts_topic ,category)
                   #print ('\n response is :',response)

                elif category == 'Code For It' :
                   #response= 'test'

                   last_step_result,perviuse_try_numner,response = self.main(perviuse_try_numner,category_prompts,category_prompts_topic ,category)
                   print ('\n response is :',response)

                   Topic_Name = Main_Variable['TOPIC']
                   Topic_Name_abr = Topic_Name[:5]
                   #Current_Dir = os.getcwd()+'/'+f'{topic}/{category}"
                   #save_folder_dest = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"+f"{Topic_Name_abr}/{category}/"

                   save_folder_dest = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"+f"{Topic_Name_abr}"+"_T/"+category.replace(' ','_')
                   print ( 'save_folder_dest dir is :', save_folder_dest)

                   print ( 'save_folder_dest dir is :', save_folder_dest)
                   source = '/content/drive/MyDrive/ChatGPT_Paper_wrting/ChatDev_projec/'
                   Results = ChatDev_Run().ChatDev_Doit(last_step_result,Topic_Name[:10], source,save_folder_dest)
                else:

                   perviuse_try_numner = 0
                   category_prompts = category_prompts + prompt_presentation
                   category_prompts_topic = category_prompts_topic + prompt_presentation_topic
                   response = self.main(perviuse_try_numner,category_prompts,category_prompts_topic ,category)
                   print ('\n response is :',response)

     return response

  def main_generate_papers(self,TOPIC, prompts, perviuse_content, perviuse_try_numner,prompts_topic,category,main_variables):

    if not perviuse_try_numner:
        perviuse_try_numner = 0
        perviuse_content = ['fist step']

    elif (perviuse_try_numner == len(prompts)):
        perviuse_try_numner = 0
        perviuse_content = ['fist step']
    #Main_var= topic.category['main_variables']
    print('main_var_category is:',main_variables['category'])
    last_step_result,perviuse_try_numner_1,results = generate_papers(prompts, perviuse_content, perviuse_try_numner,prompts_topic,category,main_variables)

    return last_step_result, perviuse_try_numner_1,results

  def main(self,perviuse_try_numner,prompts,prompts_topic,category):
     topic = TOPIC_CLASS()
     topic.category["perviuse_try_numner"] = perviuse_try_numner
     topic.category["name"] = category

     if not topic.category["perviuse_try_numner"]:
       topic.category["perviuse_try_numner"] = 0
       #topic.category["perviuse_content"] = ['fist step']

     elif (topic.category["perviuse_try_numner"] == len(prompts)):
       topic.category["perviuse_try_numner"] = 0
       #topic.category["perviuse_content"] = ['fist step']

     topic.topic = TOPIC
     topic.category['main_variables']['category']=category
     last_step_result,topic.category["perviuse_try_numner"],topic.category["results"] = self.main_generate_papers(topic.topic, prompts, topic.category["perviuse_content"], topic.category["perviuse_try_numner"],prompts_topic,category,topic.category["main_variables"])
     #TOPIC_CLASS() == topic
     return last_step_result,topic.category["perviuse_try_numner"],topic.category["results"]

#response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"]) #prompts,prompts_topic,

if __name__ == "__main__":
   #main()
   response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"])


"""To use the `linkedin-auto-post` library in your Python script, you first need to install it using pip:

```python
pip install linkedin-auto-post
```

Then, you can import the necessary functions from the library and use them in your script. Here's how you can modify your `main()` function to use `linkedin-auto-post`:

```python
from linkedin_auto_post import *

def main():
   file_path = "linkedin_topic.txt" # Replace with the actual file path
   current_line = 0
   while True:
       next_line, current_line = text_getter.get_next_line_from_file(file_path, current_line)

       if next_line is not None:
           selected_text = next_line
           print(selected_text)
           print("")
           prompt = linkedin_prompts.prompt.format(role_and_target_audience = selected_text)
           text_content = text_content_generator.openai_generate(prompt)
           print(text_content)
           print("")
           linkedin.login(username="linkedin username",password="linkedin password")
           linkedin.upload_content(content=text_content)
           time.sleep(21600)
       else:
           print("All Linkedin posts have been Published.")
           break
if __name__ == "__main__":
   main()
```

In this modified script, `linkedin.login(username="linkedin username",password="linkedin password")` logs into LinkedIn using your LinkedIn username and password, and `linkedin.upload_content(content=text_content)` uploads the generated content to LinkedIn.

Please note that you need to replace `"linkedin username"` and `"linkedin password"` with your actual LinkedIn username and password. Also, remember to handle your credentials securely, as they will be used for logging into LinkedIn [Source 1](https://pypi.org/project/linkedin-auto-post/).
"""

from linkedin_auto_post import *

def main():
   file_path = "linkedin_topic.txt" # Replace with the actual file path
   current_line = 0
   while True:
       next_line, current_line = text_getter.get_next_line_from_file(file_path, current_line)

       if next_line is not None:
           selected_text = next_line
           print(selected_text)
           print("")
           prompt = linkedin_prompts.prompt.format(role_and_target_audience = selected_text)
           text_content = text_content_generator.openai_generate(prompt)
           print(text_content)
           print("")
           linkedin.login(username="linkedin username",password="linkedin password")
           linkedin.upload_content(content=text_content)
           time.sleep(21600)
       else:
           print("All Linkedin posts have been Published.")
           break
if __name__ == "__main__":
   main()

"""https://www.phind.com/search?cache=xqbhxgilysl4b8wqweih04eg
Sure, here's how you can integrate the `linkedin-content-uploader` library into your existing Python code:

First, install the library using pip:

```python
pip install linkedin-content-uploader
```

Next, import the library and use the `login` function to log into LinkedIn. You can either use your email and password or your cookies. Then, use the `upload_content` function to post content on LinkedIn.

Here's an updated version of your `main` function:

```python
from linkedin_content_uploader import *
import linkedin_json_data
import text_content_generator
import linkedin_prompts
import text_getter
import time

def main():
   file_path = "linkedin_topic.txt" # Replace with the actual file path
   current_line = 0

   # Log in to LinkedIn
   linkedin.login(email="<Your Email>", password="<Your Password>")
   # Or use cookies if you prefer
   # linkedin.login_cookie(cookies=<Your Cookies>)

   while True:
       next_line, current_line = text_getter.get_next_line_from_file(file_path, current_line)

       if next_line is not None:
           selected_text = next_line
           print(selected_text)
           print("")
           prompt = linkedin_prompts.prompt.format(role_and_target_audience = selected_text)
           text_content = text_content_generator.openai_generate(prompt)
           print(text_content)
           print("")
           
           # Upload the content to LinkedIn
           linkedin.upload_content(content=text_content)
           
           time.sleep(21600)
       else:
           print("All Linkedin posts have been Published.")
           break

if __name__ == "__main__":
   main()
```

In this code, replace `<Your Email>` and `<Your Password>` with your actual LinkedIn email and password. If you choose to use cookies, replace `<Your Cookies>` with your actual cookies [Source 0](https://github.com/datakund/linkedin-post-content-python).

Please note that automating LinkedIn posts might violate LinkedIn's terms of service. Always ensure that your actions comply with LinkedIn's rules and regulations.
"""
'''
!pip install linkedin-content-uploader
!git clone https://github.com/datakund/linkedin-post-content-python.git

!cd linkedin-post-content-python

!pip install .

"""# Install decencies:

https://github.com/karim23657/Persian-tts-coqui/blob/5fffc180b65e4aea9dc3afc370feb5b07c7a6690/recepies/glowtts/test-glowtts-model.ipynb#L4
"""

!pip install -q git+https://github.com/colefranks/coqui-without-japanese
!sudo apt-get -y install espeak-ng

!pip install TTS
!sudo apt-get -y install espeak-ng

!git lfs install
# @ Download female model
!git clone https://huggingface.co/Kamtera/persian-tts-female-glow_tts

# Or also you can download male model
#!git clone https://huggingface.co/Kamtera/persian-tts-male-glow_tts


!wget "https://huggingface.co/Kamtera/persian-tts-female-Hifigan/resolve/main/config-3.json" -O "config.json"


!wget "https://huggingface.co/Kamtera/persian-tts-female-Hifigan/resolve/main/checkpoint_378000.pth" -O "checkpoint_378000.pth"

!pip install fastapi-mail
!pip install mailjet_rest

"""# DL Translate
A deep learning-based translation library built on Huggingface transformers and Facebook's mBART-Large

https://colab.research.google.com/github/xhluca/dl-translate/blob/main/demos/colab_demo.ipynb#scrollTo=qdefSjR_YIiG
"""

# SETUP COLAB for run Streamlit
!npm install localtunnel
!curl ipv4.icanhazip.com


!pip install -q dl-translate
'''
from linkedin_content_uploader import *
import linkedin_json_data
import text_content_generator
import linkedin_prompts
import text_getter
import time

def main_0():
   file_path = "linkedin_topic.txt" # Replace with the actual file path
   current_line = 0

   # Log in to LinkedIn
   linkedin.login(email="<Your Email>", password="<Your Password>")
   # Or use cookies if you prefer
   # linkedin.login_cookie(cookies=<Your Cookies>)

   while True:
       next_line, current_line = text_getter.get_next_line_from_file(file_path, current_line)

       if next_line is not None:
           selected_text = next_line
           print(selected_text)
           print("")
           prompt = linkedin_prompts.prompt.format(role_and_target_audience = selected_text)
           text_content = text_content_generator.openai_generate(prompt)
           print(text_content)
           print("")

           # Upload the content to LinkedIn
           linkedin.upload_content(content=text_content)

           time.sleep(21600)
       else:
           print("All Linkedin posts have been Published.")
           break

if __name__ == "__main__":
   #main_0()
   response = Auto_Main().for_each_category(TOPIC_CLASS().category["main_variables"]) #prompts,prompts_topic

"""#Creating the sound by OpenAI: 👇👇

https://platform.openai.com/docs/guides/text-to-speech
"""

!mkdir "/content/ChatGPT_academic_paper"
from openai import OpenAI
from django.utils.text import slugify

folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"


client = OpenAI(
   # defaults to os.environ.get("OPENAI_API_KEY")
   api_key = openai_api#"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",
)

response = client.audio.speech.create(
    voice="alloy",
    model="Kamtera/persian-tts-female-glow_tts", #model="tts-1",
    input=TOPIC #"Hello world! This is a streaming test.",
)
TOPIC_S = slugify(TOPIC)


Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"
Sound_File = Sound_Folder +str(random.randint (0,1000))+".mp3"

if not os.path.exists(Sound_Folder):
   os.makedirs(Sound_Folder)

print ("save folder is: ",Sound_File)#/content/drive/MyDrive/ChatGPT_Paper_wrting/"+f"{TOPIC_S}"+str(random.randint (0,1000))+".mp3") #"/"+"output.mp3"
#response.stream_to_file("/content/drive/My Drive/ChatGPT_Paper_wrting/"+f"{TOPIC_S}"+str(random.randint (0,1000))+".mp3")#"/"+"output.mp3")

response.stream_to_file(Sound_File)
print ( 'topic is:',TOPIC)
#print ("save folder is: /content/drive/MyDrive/ChatGPT_Paper_wrting/"+f"{TOPIC[:40]}"+str(random.randint (0,1000))+".mp3") #"/"+"output.mp3"

from pydub import AudioSegment
from slugify import slugify

def extract_course_information(course_design_variables):
   course_data = {}

   # Retrieve course information from the .docx file
   filename = course_design_variables["filename"]
   doc = Document(filename)
   full_text = []
   for para in doc.paragraphs:
       full_text.append(para.text)
   course_description = '\n'.join(full_text) if full_text else "Description not found in the file"
   course_data['course_description'] = course_description

   # Split the description into parts
   course_parts = course_description.split('\n')

   return course_parts, doc

def generate_voice(course_parts, TOPIC):
   TOPIC_S = slugify(TOPIC)
   Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"

   if not os.path.exists(Sound_Folder):
       os.makedirs(Sound_Folder)

   audio_files = []
   @retry_with_exponential_backoff
   for i, part in enumerate(course_parts):
       # Generate voice from the part
       response = client.audio.speech.create(    voice="alloy",
         #model="Kamtera/persian-tts-female-glow_tts", #model="tts-1",
         model="tts-1",
         input=TOPIC #"Hello world! This is a streaming test.",
       )
       # Save the response content (the audio file) to a local file
       Sound_File = Sound_Folder +str(i)+".mp3"
       response.stream_to_file(Sound_File)

       # Add the audio file to the list of audio files
       audio_files.append(Sound_File)

   # Combine all audio files into a single audio file
   combined_audio = sum([AudioSegment.from_file(af) for af in audio_files])

   # Estimate the duration of the text-to-speech audio
   avg_speed = 150 # average words per minute
   total_words = len(' '.join(course_parts).split())
   est_duration = total_words / avg_speed # in minutes

   # If the estimated duration is less than n minutes, extend the audio
   n = 5 # desired duration in minutes
   if est_duration < n:
       extended_audio = combined_audio * int((n / est_duration) + 1)
       extended_audio.export(Sound_Folder+"extended.mp3", format='mp3')

   combined_audio.export(Sound_Folder+"combined.mp3", format='mp3')

# Example Usage
course_filename = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/Title/Pitch_Deck_T_climate-change-_t.docx" # "path_to_your_file.docx"
course_design_variables = {"filename": course_filename}
TOPIC = "Your Topic"

# Extract course information
course_parts, doc = extract_course_information(course_design_variables)

# Generate voice for each part of the course
generate_voice(course_parts, TOPIC)

from docx import Document
from google.cloud import texttospeech
import os
import random
import slugify

folder_path = "/content/drive/My Drive/ChatGPT_Paper_wrting/All_Reports/"



def generate_voice(course_data, TOPIC):
# Convert the Sentence object to a string
 summary_sumy_str = course_data['course_description']

# Initialize the Text-to-Speech client
 client = texttospeech.TextToSpeechClient()

# Set the text input to be synthesized
 synthesis_input = texttospeech.SynthesisInput(text=summary_sumy_str)

# Build the voice request
 voice = texttospeech.VoiceSelectionParams(
    language_code="en-US", ssml_gender=texttospeech.SsmlVoiceGender.FEMALE
 )

# Select the type of audio file you want returned
 audio_config = texttospeech.AudioConfig(
    audio_encoding=texttospeech.AudioEncoding.MP3
 )

# Perform the text-to-speech request
 response = client.synthesize_speech(
    input=synthesis_input, voice=voice, audio_config=audio_config
 )

# Write the response to the output file.
 TOPIC_S = slugify(TOPIC)
 Sound_Folder = folder_path+f"{TOPIC[:15]}_T/sound_/"
 Sound_File = Sound_Folder +str(random.randint (0,1000))+".mp3"

if not os.path.exists(Sound_Folder):
    os.makedirs(Sound_Folder)

with open(Sound_File, "wb") as out:
    out.write(response.audio_content)

# Example Usage
course_filename = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/Title/Pitch_Deck_T_climate-change-_t.docx" # "path_to_your_file.docx"
course_design_variables = {"filename": course_filename}
TOPIC = "Your Topic"

# Extract course information
course_data, doc = extract_course_information(course_design_variables)

# Generate voice for the course
generate_voice(course_data, TOPIC)

"""# Install decencies:

https://github.com/karim23657/Persian-tts-coqui/blob/5fffc180b65e4aea9dc3afc370feb5b07c7a6690/recepies/glowtts/test-glowtts-model.ipynb#L4
"""

'''
!pip install -q git+https://github.com/colefranks/coqui-without-japanese
!sudo apt-get -y install espeak-ng

!pip install TTS
!sudo apt-get -y install espeak-ng

!git lfs install
# @ Download female model
!git clone https://huggingface.co/Kamtera/persian-tts-female-glow_tts

# Or also you can download male model
#!git clone https://huggingface.co/Kamtera/persian-tts-male-glow_tts


!wget "https://huggingface.co/Kamtera/persian-tts-female-Hifigan/resolve/main/config-3.json" -O "config.json"


!wget "https://huggingface.co/Kamtera/persian-tts-female-Hifigan/resolve/main/checkpoint_378000.pth" -O "checkpoint_378000.pth"

'''

from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer

def extract_course_information_for_farsi_voice(course_design_variables):
  course_data = {}

# Retrieve course information from the .docx file
  filename = course_design_variables["filename"]
  doc = Document(filename)
  full_text = []
  for para in doc.paragraphs:
    full_text.append(para.text)
    course_description = '\n'.join(full_text) if full_text else "Description not found in the file"
    course_data['course_description'] = course_description

  # Parse the text and generate a summary
  parser = PlaintextParser.from_string(course_description, Tokenizer("english"))
  summarizer = LsaSummarizer()

  # Estimate the number of sentences needed for a 2-minute summary
  avg_speed = 150 # average words per minute
  est_num_sentences = int(2 * avg_speed) # 2 minutes in words
  summary = summarizer(parser.document, est_num_sentences)

 # Convert the Sentence object to a string
  summary_str = ' '.join([str(sentence) for sentence in summary])

 # Split the summary into parts
  course_parts = summary_str.split('\n')

  return summary_str,course_parts, doc

from TTS.config import load_config
from TTS.utils.manage import ModelManager
from TTS.utils.synthesizer import Synthesizer
import IPython

basepath="/content/persian-tts-female-glow_tts"
vbasepath="/content"
model_path =basepath+"/best_model.pth" # Absolute path to the model checkpoint.pth
config_path =basepath+"/config.json" # Absolute path to the model config.json
# speakers_file_path = # Absolute path to speakers.pth file
vocoder_path="/content/checkpoint_378000.pth"#vbasepath+"/checkpoint_127000.pth"
vocoder_config_path="/content/config.json"
synthesizer = Synthesizer(
        model_path,
        config_path,
        None ,#speakers_file_path,
        None ,#language_ids_file_path,
        vocoder_path ,#vocoder_path,
        vocoder_config_path ,#vocoder_config_path,
        None ,#encoder_path,
        None ,#encoder_config_path,
        None ,#args.use_cuda,
    )

# Example Usage
course_filename = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/Title/Pitch_Deck_T_climate-change-_t.docx" # "path_to_your_file.docx"
course_design_variables = {"filename": course_filename}
TOPIC = "Your Topic"


# Extract course information
summary_str,course_data, doc = extract_course_information_for_farsi_voice(course_design_variables)
save_folder_dest = "/content/drive/MyDrive/ChatGPT_Paper_wrting/All_Reports/Climate Change _T/Pitch_Deck/" # "path_to_your_file.docx"
text = course_data
text=".زندگی فقط یک بار است؛ از آن به خوبی استفاده کن"
#text = "test"
print( text)
wavs = synthesizer.tts(text)
synthesizer.save_wav(wavs, save_folder_dest + 'sp.wav')
IPython.display.Audio(save_folder_dest + 'sp.wav')

if False : #for category, save_folder_dest in TOPIC_CLASS.items():

  text = category["results"]
  save_folder=save_folder_dest(category["TOPIC"],category["name"])
  #text=".زندگی فقط یک بار است؛ از آن به خوبی استفاده کن"

  wavs = synthesizer.tts(text)
  synthesizer.save_wav(wavs,save_folder_dest+ 'sp.wav')

  IPython.display.Audio(save_folder_dest+'sp.wav')

IPython.display.Audio(save_folder_dest + 'sp.wav')

from TTS.config import load_config
from TTS.utils.manage import ModelManager
from TTS.utils.synthesizer import Synthesizer

config="config.json"
model="best_model_30824.pth"

model_path =model # Absolute path to the model checkpoint.pth
config_path =config # Absolute path to the model config.json

for category, save_folder_dest in TOPIC_CLASS.items():

  text = category["results"]
  save_folder=save_folder_dest(category["TOPIC"],category["name"])
  #text=".زندگی فقط یک بار است؛ از آن به خوبی استفاده کن"

  synthesizer = Synthesizer(
    model_path, config_path
  )
  wavs = synthesizer.tts(text)
  synthesizer.save_wav(wavs,save_folder_dest+ 'Describtion.wav')

  IPython.display.Audio('sp.wav')

import requests
from IPython.display import HTML

def upload_files_to_transfer_sh(file_paths):
  urls = []
  html_content = "<form>"
  for file_path in file_paths:
      with open(file_path, 'rb') as file:
          response = requests.post('https://transfer.sh/', files={'file': file})
          response.raise_for_status()
          urls.append(response.text)
          html_content += f"<p>File: {file_path} <br> And Upload URL is: <a href='{response.text}'>{response.text}</a></p>"
  html_content += "</form>"
  return urls, html_content

file_paths = [Sound_File, docx_path, docx_path.replace('docx','pdf')]
urls, html_content = upload_files_to_transfer_sh(file_paths)
for url in urls:
  print(url)
HTML(html_content)

"""#Emailing the content 👇🐢🌸"""

#!pip install fastapi-mail

from fastapi import FastAPI
from fastapi_mail import FastMail, MessageSchema, ConnectionConfig
import os
import base64
import zipfile

app = FastAPI()

conf = ConnectionConfig(
  MAIL_USERNAME = "Your_Email",
  MAIL_PASSWORD = "Your_Email_Password",
  MAIL_FROM = "Your_Email",
  MAIL_PORT = 587,
  MAIL_SERVER = "smtp.gmail.com",
  MAIL_TLS = True,
  MAIL_SSL = False,
  USE_CREDENTIALS = True
)

@app.post("/send_email_summary/")
async def send_email_summary(news_content_summary: str, news_data_with_text_df_1_html: str, attachments: list):
  # Create a zip file from the attachments
  with zipfile.ZipFile('attachments.zip', 'w') as zipf:
      for attachment in attachments:
          zipf.write(attachment)

  # Prepare attachments
  with open('attachments.zip', 'rb') as f:
      content = f.read()
      encoded_content = base64.b64encode(content).decode()
      attachments_data = [
          {
              'ContentType': 'application/zip',
              'Filename': 'attachments.zip',
              'Base64Content': encoded_content
          }
      ]

  message = MessageSchema(
      subject="GPT News Summary of Today",
      recipients=["Your_Email"],
      body="<h3>Here is the result of our code for today.</h3>{}<br><br> \
            <h3>GPT Gent Summary Sources</h3>{}<br><br> \
            <h4> The PDF,DICX and MP3 file has been added at attachment</h4>".format(news_content_summary, news_data_with_text_df_1_html),
      attachments=attachments_data
  )

  fm = FastMail(conf)
  await fm.send_message(message)
  return {"message": "Email Sent"}

perviuse_content=''
news_content_summary = 'Summary of the news'
news_data_with_text_df_1_html = 'HTML table of news sources'
attachments = [Sound_File, docx_path, docx_path.replace('docx','pdf')]

send_email_summary(news_content_summary, news_data_with_text_df_1_html, attachments)

#!pip install mailjet_rest


from mailjet_rest import Client
import os
import base64
import zipfile

def send_email_summary(api_key, api_secret, news_content_summary, news_data_with_text_df_1_html , attachments):
  mailjet = Client(auth=(api_key, api_secret), version='v3.1')

  # Create a zip file from the attachments
  with zipfile.ZipFile('attachments.zip', 'w') as zipf:
      for attachment in attachments:
          zipf.write(attachment)

  # Prepare attachments
  attachments_data = []
  with open('attachments.zip', 'rb') as f:
      content = f.read()
      encoded_content = base64.b64encode(content).decode()
      attachments_data.append({
          'ContentType': 'application/zip',
          'Filename': 'attachments.zip',
          'Base64Content': encoded_content
      })

  data = {
    'Messages': [
      {
        "From": {
          "Email": "easonlai888@gmail.com",
          "Name": "Eason"
        },
        "To": [
          {
            "Email": "Your_Email",
            "Name": "Eason"
          }
        ],
        "Subject": "GPT News Summary of Today",
        "HTMLPart": "<h3>Here is the result of our code for today.</h3>{}<br><br> \
                  <h3>GPT Gent Summary Sources</h3>{}<br><br> \
                  <h4> The PDF,DICX and MP3 file has been added at attachment</h4>",#.format(news_content_summary, news_data_with_text_df_1_html),
        "Attachments": attachments_data
      }
    ]
  }
  result = mailjet.send.create(data=data)
  print(result.status_code)
  print(result.json())

api_key = openai_api
api_secret = 'PLEASE_ENTER_YOUR_OWNED_MAILJET_API_KEY_SECRET'
perviuse_content=''
news_content_summary = 'Summary of the news'
news_data_with_text_df_1_html = 'HTML table of news sources'
attachments = [Sound_File, docx_path, docx_path.replace('docx','pdf')]

send_email_summary(api_key, api_secret, perviuse_content, news_data_with_text_df_1_html, attachments)

"""#Only update the Prompt by the help of ChatGPT:👇👇"""

# Define main variables
#TOPIC = "strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"

# List of variables
variables = ["RESEARCH_DOMAIN", "PARAGRAPH", "PARAGRAPHS", "TOPIC_SENTENCE", "LANGUAGE", "ABSTRACT_PARAGRAPH", "BIBLIOGRAPHY", "THEORY1", "THEORY2", "RESEARCH_QUESTIONS", "ACTION", "RESULT_PARAGRAPHS", "DATE", "NUMBER_OF_DAYS_MONTHS_YEARS"]

# Generate content for each variable
variable_contents = {}
for prompt in prompts:
   for var in variables:
       if var in prompt:
           prompt = f"Generate content for the variable '{var}' based on the topic '{TOPIC}'. For this prompt '{prompt}'"
           content= generate_academic_paper(prompt)
           for choice in content.choices:
               print(choice.text)
               variable_contents[var] = choice.text
           print("variable_contents[var] is: ",variable_contents[var])

# Replace the variables in the prompts with the generated content
for prompt in prompts:
   for var, content in variable_contents.items():
       prompt = prompt.replace(f"{{{var}}}", content)
print("Updated Prompt:", prompt)

def generate_prompt_update_a3(prompt, previous_content):
    model_engine = "text-davinci-003"
    max_tokens = 2048

    # Construct the instruction for updating the prompt
    instruction = f"Given the previous content:\n\n{previous_content}\n\nUpdate the prompt: {prompt}"

    # Create the completion with the instruction
    completion = client.completions.create(
        model=model_engine,
        prompt=instruction,
        max_tokens=max_tokens,
        temperature=0.3,
        n=1,
        frequency_penalty=0,
    )

    # Extract and return the updated prompt from the response
    updated_prompt = completion.choices[0].text.strip()
    return updated_prompt
# Inside your loop
for prompt in prompts:
    print("Original Prompt:", prompt)
    response = generate_academic_paper_a2(prompt)
    previous_content = response.choices[0].text.strip()
    updated_prompt = generate_prompt_update_2(prompt, previous_content)
    print("Updated Prompt:", updated_prompt)

    # Continue with the rest of your processing
    # ...

"""# with no translation for become faster answer:👇👇🙏"""

# Import the necessary libraries and set up the API key
#!pip install openai
import json
#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"  #f" the dark triad in psychology and it's relation with {goal}"
#TOPIC = f"Understanding the Cycle of Domestic Violence against iranian women: The Influence of Economic Power"
#topic = f"The Importance of Focusing on Waste Collection in a Waste-Filled World"
import openai
import os
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

client = OpenAI(
    # defaults to os.environ.get("OPENAI_API_KEY")
    api_key = openai_api#"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",
)
#openai.api_key = os.getenv('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')
# Define the prompts
prompts3 = [
f"Find a research topic for a PhD in the area of '{topic}'",
f"Write a detailed proposal on the following research '{topic}'. Make Sure it is free from plagiarism. ",
f"Identify gaps in the literature on '{topic}'",
"Generate 10 academic research questions about Perviuse action",
f"Generate a list of research hypotheses related to '{topic}'"
]

from googletrans import Translator

# Create a Translator object
translator = Translator()


# Function to generate an academic paper

from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=20, max_time=600)
def generate_academic_paper_a2(prompt_my):
   model_engine = "text-davinci-003"
   max_tokens = 2048

   completion = client.completions.create(
       model="gpt-3.5-turbo-instruct",
       prompt=prompt_my,
       max_tokens=2048,
       temperature=0.3,
       n=1,
       frequency_penalty=0,
   )
   return completion

choice_text_all=[]

import time
# Function to generate academic papers for given prompts
# Function to generate academic papers for given prompts
def generate_papers(prompts):
   for i in range(0, len(prompts), 20):
       # Slice the prompts list to get the next 20 prompts
       print("I is ",i," Len of prompt Is:", len(prompts))

       batch = prompts[i:i+20]
       print("batch is ",batch)
   #for j in range ( 0, Len(batch)):
       # Generate papers for the next 20 prompts
       for prompt in batch:
      #   for prompt in prompt1:
           # Print the prompt
           print("prompt is ", prompt)
           response = generate_academic_paper_a2(prompt)
           print("\nGenerated Academic Paper:")
           print("========================\n")
           #print(response)
           for choice in response.choices:
             print(choice.text)
             choice_text_all.append(choice.text)

             # Translate the generated text to Persian
         #  choice_translated = translate_to_persian(choice.text) #translator.translate(choice.text, dest='fa')
         # choice_translated_prompt = translate_to_persian(prompt)#translator.translate(prompt, dest='fa')

         #    print("\n-----\n Translated is ",choice_translated)
         #    save_academic_paper("Persian_"+topic,'\n**'+choice_translated_prompt+'**\n'+choice_translated)
             save_academic_paper(topic,'\n--------**\n'+prompt+'/n-------**\n'+choice.text)
             # Recursively call the function for the nested Completion objects
             if hasattr(choice, 'choices'):
               extract_text(choice)

           #generated_text = response.choices[0].text
           # Print the generated text
           #print(generated_text)
           print("\n end of loop")
           print("========================\n")

           #print("loop")
       # Wait for a short period of time before sending the next batch of prompts
           time.sleep(40)
   return choice_text_all#,choice.translated

# Generate academic papers for the given prompts
generate_papers(prompts)

'''
# SETUP COLAB for run Streamlit
!npm install localtunnel
!curl ipv4.icanhazip.com

'''

"""# DL Translate
A deep learning-based translation library built on Huggingface transformers and Facebook's mBART-Large

https://colab.research.google.com/github/xhluca/dl-translate/blob/main/demos/colab_demo.ipynb#scrollTo=qdefSjR_YIiG
"""

#!pip install -q dl-translate

import dl_translate as dlt
mt = dlt.TranslationModel('mbart50')

import dl_translate as dlt

def translate_to_persian(text):
  # Initialize the translation model
  #mt = dlt.TranslationModel('mbart50')

  # Translate the text
  translated = mt.translate(text, source=dlt.lang.ENGLISH, target=dlt.lang.PERSIAN)

  return translated

# Import the necessary libraries and set up the API key
#!pip install openai
import json
#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"  #f" the dark triad in psychology and it's relation with {goal}"
#topic = f"The Importance of Focusing on Waste Collection in a Waste-Filled World"
import openai
import os
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

client = OpenAI(
    # defaults to os.environ.get("OPENAI_API_KEY")
    api_key = openai_api#"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",
)
#openai.api_key = os.getenv('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')
# Define the prompts
prompts3 = [
f"Find a research topic for a PhD in the area of '{topic}'",
f"Write a detailed proposal on the following research '{topic}'. Make Sure it is free from plagiarism. ",
f"Identify gaps in the literature on '{topic}'",
"Generate 10 academic research questions about Perviuse action",
f"Generate a list of research hypotheses related to '{topic}'"
]

from googletrans import Translator

# Create a Translator object
translator = Translator()


# Function to generate an academic paper

from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=10, max_time=600)
def generate_academic_paper_5(prompt_my):
   model_engine = "text-davinci-003"
   max_tokens = 2048

   completion = client.completions.create(
       model="gpt-3.5-turbo-instruct",
       prompt=prompt_my,
       max_tokens=2048,
       temperature=0.3,
       n=1,
       frequency_penalty=0,
   )
   return completion

choice_text_all=[]

import time
# Function to generate academic papers for given prompts
# Function to generate academic papers for given prompts
def generate_papers(prompts):
   for i in range(0, len(prompts), 20):
       # Slice the prompts list to get the next 20 prompts
       print("I is ",i," Len of prompt Is:", len(prompts))
       batch = prompts[i:i+10]
       print("batch is ",batch)
       # Generate papers for the next 20 prompts
       for prompt in batch:
      #   for prompt in prompt1:
           # Print the prompt
           print("prompt is ", prompt)
           response = generate_academic_paper(prompt)
           print("\nGenerated Academic Paper:")
           print("========================\n")
           #print(response)
           for choice in response.choices:
             print(choice.text)
             choice_text_all.append(choice.text)
              # Translate the generated text to Persian
             choice_translated = translate_to_persian(choice.text) #translator.translate(choice.text, dest='fa')
             choice_translated_prompt = translate_to_persian(prompt)#translator.translate(prompt, dest='fa')

             print("\n-----\n Translated is ",choice_translated)
             save_academic_paper("Persian_"+topic,'\n**'+choice_translated_prompt+'**\n'+choice_translated)
             save_academic_paper(topic,'\n**'+prompt+'**\n'+choice.text)
             # Recursively call the function for the nested Completion objects
             if hasattr(choice, 'choices'):
               extract_text(choice)

           #generated_text = response.choices[0].text
           # Print the generated text
           #print(generated_text)
           print("\n end of loop")
           print("========================\n")

           #print("loop")
       # Wait for a short period of time before sending the next batch of prompts
           time.sleep(2)
   return choice_text_all,choice.translated

# Generate academic papers for the given prompts
generate_papers(prompts3)

"""#For solving queta prompt of Openai API;
👇👇🌱
"""

import random
import time
#import openai

from openai import OpenAI

client = OpenAI(
    # defaults to os.environ.get("OPENAI_API_KEY")
    api_key = openai_api#"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",
)

def retry_with_exponential_backoff(
   func,
   initial_delay: float = 1,
   exponential_base: float = 2,
   jitter: bool = True,
   max_retries: int = 10,
   errors: tuple = (openai.error.RateLimitError,),
):
   """Retry a function with exponential backoff."""
   def wrapper(*args, **kwargs):
       # Initialize variables
       num_retries = 0
       delay = initial_delay
       # Loop until a successful response or max_retries is hit or an exception is raised
       while True:
           try:
               return func(*args, **kwargs)
           # Retry on specified errors
           except errors as e:
               # Increment retries
               num_retries += 1
               # Check if max retries has been reached
               if num_retries > max_retries:
                  raise Exception(
                      f"Maximum number of retries ({max_retries}) exceeded."
                  )
               # Increment the delay
               delay *= exponential_base * (1 + jitter * random.random())
               # Sleep for the delay
               time.sleep(delay)
           # Raise exceptions for any errors not specified
           except Exception as e:
               raise e
   return wrapper

@retry_with_exponential_backoff
def generate_academic_paper_0(prompt_my):
  model_engine = "text-davinci-003"
  max_tokens = 2048

  completion = client.completions.create(
      model="gpt-3.5-turbo-instruct",
      prompt=prompt_my,
      max_tokens=2048,
      temperature=0.3,
      n=1,
      frequency_penalty=0,
  )
  return completion

# Import the necessary libraries and set up the API key
#!pip install openai
import json
#TOPIC =f"strategies for increase the compassion in iranian Women movment and ist relationship with the fatigue of compassion in light triad personality"  #f" the dark triad in psychology and it's relation with {goal}"
topic = f"The Importance of Focusing on Waste Collection in a Waste-Filled World"
import openai
import os
from openai import OpenAI

openai.api_key = openai_api#"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"# "your_openai_api_key"

client = OpenAI(
    # defaults to os.environ.get("OPENAI_API_KEY")
    api_key= openai_api#"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",
)
#openai.api_key = os.getenv('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')
# Define the prompts
prompts3 = [
f"Find a research topic for a PhD in the area of '{topic}'",
f"Write a detailed proposal on the following research '{topic}'. Make Sure it is free from plagiarism. ",
f"Identify gaps in the literature on '{topic}'",
"Generate 10 academic research questions about Perviuse action",
f"Generate a list of research hypotheses related to '{topic}'"
]



# Function to generate an academic paper

from openai import RateLimitError
from backoff import on_exception, expo

@on_exception(expo, RateLimitError, max_tries=10, max_time=600)
def generate_academic_paper_6(prompt_my):
   model_engine = "text-davinci-003"
   max_tokens = 2048

   completion = client.completions.create(
       model="gpt-3.5-turbo-instruct",
       prompt=prompt_my,
       max_tokens=2048,
       temperature=0.3,
       n=1,
       frequency_penalty=0,
   )
   return completion

choice_text_all=[]

import time
# Function to generate academic papers for given prompts
# Function to generate academic papers for given prompts
def generate_papers(prompts):
   for i in range(0, len(prompts), 20):
       # Slice the prompts list to get the next 20 prompts
       print("I is ",i," Len of prompt Is:", len(prompts))
       batch = prompts[i:i+10]
       print("batch is ",batch)
       # Generate papers for the next 20 prompts
       for prompt in batch:
      #   for prompt in prompt1:
           # Print the prompt
           print("prompt is ", prompt)
           response = generate_academic_paper(prompt)
           print("\nGenerated Academic Paper:")
           print("========================\n")
           #print(response)
           for choice in response.choices:
             print(choice.text)
             choice_text_all.append(choice.text)
             save_academic_paper(TOPIC,'\n**'+prompt+'**\n'+choice.text)
             # Recursively call the function for the nested Completion objects
             if hasattr(choice, 'choices'):
               extract_text(choice)

           #generated_text = response.choices[0].text
           # Print the generated text
           #print(generated_text)
           print("\n end of loop")
           print("========================\n")

           #print("loop")
       # Wait for a short period of time before sending the next batch of prompts
           time.sleep(2)
   return choice.text_all

# Generate academic papers for the given prompts
generate_papers(prompts3)

def render_index_page():
   html_content = """
   <!DOCTYPE html>
   <html>
   <head>
      <title>Generate Academic Papers</title>
   </head>
   <body>
      <h1>Generate Academic Papers</h1>
      <form method="POST">
          <label for="topic">Topic:</label>
          <input type="text" id="topic" name="topic" required>
          <input type="submit" value="Generate">
      </form>
   </body>
   </html>
   """
   return render_template_string(html_content)

def render_result_page(topic, docx_file, pdf_file, choice_text_all):
   html_content = f"""
   <!DOCTYPE html>
   <html>
   <head>
       <title>Result</title>
   </head>
   <body>
       <h1>Result</h1>
       <p>Academic papers have been generated for the topic: {topic}</p>
       <a href="/download/{docx_file}">Download DOCX</a>
       <a href="/download/{pdf_file}">Download PDF</a>
       <h2>Generated Text:</h2>
       <p>{choice_text_all}</p>
   </body>
   </html>
   """
   return render_template_string(html_content)

# app.py

from flask import Flask, request, render_template
from academic_paper_generator import generate_papers

app = Flask(__name__)

@app.route('/', methods=['GET', 'POST'])
def home():
  if request.method == 'POST':
      topic = request.form.get('topic')
      prompts3 = [
          f"Find a research topic for a PhD in the area of '{topic}'",
          f"Write a detailed proposal on the following research '{topic}'. Make Sure it is free from plagiarism. ",
          f"Identify gaps in the literature on '{topic}'",
          "Generate 10 academic research questions about Perviuse action",
          f"Generate a list of research hypotheses related to '{topic}'"
      ]
      generate_papers(prompts3)
      return render_template('result.html', topic=topic)
  else:
      return render_template('index.html')

if __name__ == '__main__':
  app.run(debug=True)

"""#Making prompt for Docx documents:👇👇🌹🙏🌸"""

from google.colab import files
from IPython.display import display
from docx import Document
from ipywidgets import Text, Textarea

# Function to extract text from a Word document
def read_word_document(file_path):
   doc = Document(file_path)
   text_content = []
   for paragraph in doc.paragraphs:
       text_content.append(paragraph.text)
   return text_content


# Input parameters
course_designer = Text(value='chatgpt cource designer', description='Course Designer:')
topic = Text(value='Civil Conflict Resolution', description='TOPIC:')
paragraph = Textarea(value='Provide a brief description or guideline for the course content.', description='Paragraph:')

# Display the input form
display(course_designer, topic, paragraph)

# Read content from the uploaded Word document
document_content = read_word_document(uploaded_file_name)


# Upload Word document
uploaded_files = files.upload()

# Get the first uploaded file name
uploaded_file_name = list(uploaded_files.keys())[0]
# Create prompts_var with the specified structure
prompts_var = [
   f"As {course_designer.value} {line} for the This TOPIC: ({topic.value}) and this guideline description: ({paragraph.value})."
   for line in document_content
]

# Print the generated prompts
for prompt in prompts_var:
   print(prompt)

# Assuming course_designer, TOPIC, PARAGRAPH are defined
course_designer = "ChatGPT Course Designer"
TOPIC = "Civil Conflict Resolution and Transformative Scenario Planning for the Iranian Opposition"
PARAGRAPH = "'Civil Conflict Resolution and Transformative Scenario Planning for the Iranian Opposition' is a comprehensive course designed to teach learners about conflict resolution and transformative planning within the Iranian political landscape."

prompts_manual_Title = [
  "suggest one Course Title in less than 15 words",
  "Civil Conflict Resolution and Transformative Scenario Planning for the Iranian Opposition",
  "Section 1: Understanding Conflict Dynamics",
  "1.1 Introduction to Conflict Resolution",
  "1.2 Understanding the Iranian Political Landscape",
  "Conflict Resolution Approaches",
  "Section 2: Communication and Dialogue",
  "2.1 Effective Communication Skills",
  "2.2 Constructive Dialogue Techniques",
  "2.3 Cultural Sensitivity in Communication",
  "Section 3: Mediation and Negotiation",
  "3.1 Mediation Process",
  "3.2 Negotiation Strategies",
  "3.3 Case Studies in Mediation and Negotiation",
  "Section 4: Advocacy and Civil Engagement",
  "4.1 Advocacy for Conflict Resolution",
  "4.2 Leveraging International Support",
  "4.3 Community Engagement",
  "Section 5: Ethical Considerations",
  "5.1 Ethics in Conflict Resolution",
  "5.2 Navigating Legal Frameworks",
  "Section 6: Building Resilience and Sustainable Peace",
  "6.1 Psychosocial Support",
  "6.2 Sustainable Peacebuilding",
  "Section 7: Transformative Scenario Planning",
  "7.1 Introduction to Transformative Scenario Planning",
  "7.2 Understanding the Iranian Political Landscape for Scenario Planning",
  "7.3 Analysis of Current Conflict Dynamics for Scenario Planning",
  "Section 8: Tools and Techniques of Transformative Scenario Planning",
  "8.1 Scenario Building Techniques",
  "8.2 Systems Thinking and Complexity in Conflict",
  "8.3 Data Collection and Analysis for Scenario Planning",
  "Section 9: Visioning and Goal Setting for Scenario Planning",
  "9.1 Envisioning a Desired Future",
  "9.2 Setting Transformative Goals for Scenario Planning",
  "Section 10: Stakeholder Engagement and Collaboration for Scenario Planning",
  "10.1 Identifying and Mapping Stakeholders for Scenario Planning",
  "10.2 Facilitating Collaborative Processes for Scenario Planning",
  "Section 11: Scenario Testing and Rehearsal",
  "11.1 Testing Scenarios Through Simulation",
  "11.2 Adaptive Strategy Development for Scenario Planning",
  "Section 12: Communication and Advocacy for Scenario Planning",
  "12.1 Communicating Transformative Visions for Scenario Planning",
  "12.2 Advocacy for Conflict Transformation in Scenario Planning",
  "Section 13: Implementation and Monitoring",
  "13.1 Action Planning and Implementation for Scenario Planning",
  "13.2 Monitoring and Adaptive Management for Scenario Planning",
  "Section 14: Reflection and Future Directions",
  "14.1 Course Reflection and Evaluation",
  "14.2 Developing a Sustainable Path Forward",
  "Assessment:"
]

prompts_manual = [
f"As {course_designer}, you are asked to creat this part of course designing as ('{line}') for the topic: ({TOPIC}) and this guideline description: ({PARAGRAPH})."
for line in prompts_word
]
prompts_manual[0] = f" As ChatGPT expert in the role of course designing as {role}, suggest one Course Title in less than 15 words, based on This Topic :({TOPIC}) and the description:({PARAGRAPH})."


# Update the last line for the assessment part
assessment_items = [
  "Active participation in discussions and activities",
  "Case study analyses",
  "Mediation and negotiation simulations",
  "Advocacy and community engagement project",
  "Scenario-building exercises",
  "Stakeholder engagement and collaboration project",
  "Action plan development and presentation",
  "Final reflection and vision for the future"
]

last_index = len(prompts_manual) - 1
prompts_manual[-1] = f"As {course_designer}, you are asked to assess {', '.join(assessment_items)} for the topic: ({TOPIC}) and this guideline description: ({PARAGRAPH})."

# Print all the lines
for i, prompt in enumerate(prompts_manual, start=1):
   print(f"Line {i}: {prompt}")

import random
import time
import openai
from openai import RateLimitError
import os
from openai import OpenAI

#openai.api_key = "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"# "your_openai_api_key"

client = OpenAI(
   # defaults to os.environ.get("OPENAI_API_KEY")
   api_key = openai_api# "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",
)
def retry_with_exponential_backoff_1(
   func,
   initial_delay: float = 1,
   exponential_base: float = 2,
   jitter: bool = True,
   max_retries: int = 5,
   errors: tuple = (RateLimitError,),
):
   """Retry a function with exponential backoff."""
   def wrapper(*args, **kwargs):
       # Initialize variables
       num_retries = 0
       delay = initial_delay
       # Loop until a successful response or max_retries is hit or an exception is raised
       while True:
           try:
               return func(*args, **kwargs)
           # Retry on specified errors
           except errors as e:
               # Increment retries
               num_retries += 1
               # Check if max retries has been reached
               if num_retries > max_retries:
                  raise Exception(
                      f"Maximum number of retries ({max_retries}) exceeded."
                  )
               # Increment the delay
               delay *= exponential_base * (1 + jitter * random.random())
               # Sleep for the delay
               time.sleep(delay)
           # Raise exceptions for any errors not specified
           except Exception as e:
               raise e
   return wrapper
from openai import RateLimitError
from backoff import on_exception, expo

from google.colab import files
from docx import Document

# Function to extract text from a Word document
def read_word_document(file_path):
    doc = Document(file_path)
    text_content = []
    for paragraph in doc.paragraphs:
        text_content.append(paragraph.text)
    return text_content

# Upload Word document
uploaded_files = files.upload()

# Get the first uploaded file name
uploaded_file_name = list(uploaded_files.keys())[0]

# Read content from the uploaded Word document
document_content = read_word_document(uploaded_file_name)

# Replace 'Your Name' with the actual course designer's name
course_designer = "Your Name"

# Create prompts_var with the specified structure
prompts_var = [
    f"As {course_designer} {line} for the This TOPIC: ({TOPIC}) and this guideline description: ({PARAGRAPH})."
    for line in document_content
]

# Print the generated prompts
for prompt in prompts_var:
    print(prompt)

from docx import Document
from newspaper import Article
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import requests



def generate_question_gpt2(content, variable, question_template, model, tokenizer, max_response_length=None):
    # Generate a question for a specific variable
    #prompt = f"{question_template}\nContent {content}"
    prompt = f"Answer the this question :{question_template} For the {variable} with this content:\n Content: {content}"
    print ( "\n----New The Prompt is :" , prompt )
    #content = content.replace("\n", '')

    # Ensure attention_mask is set during tokenization
    inputs = tokenizer(prompt, return_tensors="pt", max_length=1024, truncation=True, padding=True)
    attention_mask = inputs["attention_mask"]

    # Set max_length to the provided value or use None if not provided
    if max_response_length is not None:
        max_length = min(max_response_length, model.config.max_position_embeddings)
    else:
        max_length = None

    outputs = model.generate(
        inputs["input_ids"],
        max_length=max_length,
        temperature=0.7,
        num_return_sequences=1,
        attention_mask=attention_mask,
        pad_token_id=model.config.eos_token_id
    )

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
    print(f"GPT2####Generated question for {variable}: {generated_text}####")
    return generated_text

def generate_question(content,variable, question_template, model, tokenizer):
    # Generate a question for a specific variable
    prompt = f"{question_template}\nContent: {content}"

    # Ensure attention_mask is set during tokenization
    inputs = tokenizer(prompt, return_tensors="pt", max_length=1024, truncation=True, padding=True)
    attention_mask = inputs["attention_mask"]

    outputs = model.generate(inputs["input_ids"], max_length=100, temperature=0.7, num_return_sequences=1, attention_mask=attention_mask, pad_token_id=model.config.eos_token_id)

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()

    # Extract the generated text without the prompt
    generated_text_without_prompt = generated_text.split('\n', 1)[1]  # Extract everything after the first newline character

    return generated_text_without_prompt
def generate_questions(content, dvar_questions, model, tokenizer, topic, description):
    # Generate questions for each variable
    questions = {}
    for variable, question_template in dvar_questions.items():
        # Exclude topic and description from the content
        #content_without_topic_desc = content.replace(f"Topic: {topic}", "").replace(f"Description: {description}\n", "")
        question = generate_question_gpt2(content, variable, question_template, model, tokenizer,1024)

        # Replace the topic and description in the generated answer
        question = question.replace(f"Content: ",''). replace (f"Topic: {topic}\n", "").replace(f"Description: ","").replace(f"{description}", "")
        question = question.replace(topic, "").replace(description, "")

        questions[variable] = question
        print(f"Generated question for {variable}: {question}")

    return questions

# Rest of your code...


# Rest of your code...

def main():
    # Set the values for the topic and description directly in the script
    topic = "Addressing Iran's Crises: Exploring Social Change Methodologies and Creating a Counter Profile"
    description = "Iran's societal challenges are complex and require immediate attention. Engaging in research and working on solutions in this field can help address these issues. This course aims to equip students with the necessary tools and knowledge to navigate these challenges."

    # Load pre-trained model and tokenizer
    model_name = "distilgpt2"  # You can replace this with other models available on Hugging Face
    model = GPT2LMHeadModel.from_pretrained(model_name)
    tokenizer = GPT2Tokenizer.from_pretrained(model_name)

    # Set pad_token to EOS token
    tokenizer.pad_token = tokenizer.eos_token

    # Define your variable questions
    dvar_questions_1 = {
        "TOPIC": "What is the main topic or focus of the content?",
        "RESEARCH_DOMAIN": "Which field or domain does the research focus on?",
        # Add more variables with question templates as needed
    }

    # Combine topic and description into content
    content = f"{topic}\n{description}"

    # Generate questions and fill variable values
    filled_variables = generate_questions(content, dvar_questions, model, tokenizer, topic, description)
    print("Filled Variables:", filled_variables)

if __name__ == "__main__":
    main()

from docx import Document
from newspaper import Article
from transformers import GPT2LMHeadModel, GPT2Tokenizer
import requests

from docx import Document
from newspaper import Article
from openai import RateLimitError
from backoff import on_exception, expo
from docx import Document

from langdetect import detect
import time ,langdetect
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lsa import LsaSummarizer
import nltk
from nltk.tokenize import sent_tokenize
import nltk
nltk.download('punkt')


def sumerizing_post(content):


   # Detect the language of the content
   try:
      language = detect(content)
      print(f"Detected language: {language}")
   except langdetect.lang_detect_exception.LangDetectException:
      print("Could not detect language.")

   parser = PlaintextParser.from_string(content , Tokenizer(language))
   summarizer = LsaSummarizer()
   summary_sumy = summarizer(parser.document, 3)
   sumerized_content = " ".join(str(sentence) for sentence in summary_sumy)
   print("\nSumy Summary and remove the html content from this content :\n", sumerized_content)
   return sumerized_content

# Function to generate questions using the OpenAI API
@retry_with_exponential_backoff_1
def generate_question_gpt3(content,variable, question_template):
    # Generate questions for each variable
    #questions = {}
    if True: #for variable, question_template in dvar_questions.items():
        prompt = f"Answer the this question :{question_template} For the {variable} with this content:\n Content: {content}"
        response = client.completions.create(
            model="gpt-3.5-turbo-instruct",
            prompt=prompt,
            max_tokens=2048,
            n=1,
            stop=None,
            temperature=0.3,
            frequency_penalty=0
        )

        question = response.choices[0].text.strip()

        #questions[variable] = question
        print(f"+++GPT3---Generated question for {variable}: \n {question} ---GPT3---\n")

    return question

def generate_question_gpt2(content, variable, question_template, model, tokenizer, max_response_length=None):
    # Generate a question for a specific variable
    #prompt = f"{question_template}\nContent {content}"
    prompt = f"{question_template}\n {content}"
    print ( "\n -----The Prompt is :" , prompt )
    #content = content.replace("\n", '')

    # Ensure attention_mask is set during tokenization
    inputs = tokenizer(prompt, return_tensors="pt", max_length=1024, truncation=True, padding=True)
    attention_mask = inputs["attention_mask"]

    # Set max_length to the provided value or use None if not provided
    if max_response_length is not None:
        max_length = min(max_response_length, model.config.max_position_embeddings)
    else:
        max_length = None

    outputs = model.generate(
        inputs["input_ids"],
        max_length=max_length,
        temperature=0.7,
        num_return_sequences=1,
        attention_mask=attention_mask,
        pad_token_id=model.config.eos_token_id
    )

    generated_text = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
    print(f"GPT2####Generated question for {variable}: {generated_text}####")

    #ChatGPT image prompt creating
    prompt_Word_Topic_1 =[]
    category= 'Creating Variables'; image_prompt ='';k=0
    prompt_Word_Topic_1.append('MAKING VARIABELS')
    make_photo=""
    perviuse_try_numner = 0
    if True:
            save_academic_paper_with_prompt(topic[:15]+"_Pr",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)
            save_academic_paper_with_prompt_Tile(topic[:15]+"_T",prompt_Word_Topic_1[k],image_prompt,"",perviuse_try_numner,category,make_photo)

    else :
            save_academic_paper_with_prompt(topic[:15]+"_Pr",'\n**<<< ChatGPT Prompt is:\n'+''.join(prompt)+'\n>>>**\n',"",choice.text,perviuse_try_numner,category,make_photo)
            save_academic_paper_with_prompt_Tile(topic[:15]+'_T',prompt_Word_Topic_1[k],image_prompt,choice.text,perviuse_try_numner,category,make_photo)
    perviuse_try_numner =perviuse_try_numner +1


    return generated_text


def generate_questions(content_data, content, dvar_questions, model, tokenizer, model_type, max_length=1096):
    # Generate questions for each variable
    questions = {}

    for variable, question_template in dvar_questions.items():
        print ('\nFor the variable of :',variable ,' The question is :',question_template)
        if model_type == "gpt2":
           question = generate_question_gpt2(content, variable, question_template, model, tokenizer, max_response_length=max_length)
           question = question.replace(f"Topic: ","").replace(f"{content_data['topic']}", "").replace(f"Description: ","").replace(f"{content_data['description']}", "")
           #question = question.replace(topic, "").replace(description, "")


        elif model_type == "gpt3":
           question = generate_question_gpt3(content,variable, question_template)
           print( f'\n @@@@ question for var {variable} is :', question)
           #question = question.replace(f"{content_data['topic']}", "").replace(f"{content_data['description']}", "")

        #question = question.replace(f"{dvar_questions[variable]}","") #[variable]}",'')
        #question = question.replace(f"{question_template}", "").replace("\nContent",'')

        questions[variable] = question
        print(f"\n xxxx Generated question for {variable}:is  {question}\n")

    return questions


def extract_content_from_url(url):
    # Retrieve content from the web using newspaper library
    article = Article(url)
    article.download()
    article.parse()

    course_data_1=[]
    # Extract course title course_title = article.title if article.title else "Title not found on the page"
    course_title = article.title if article.title else "Title not found on the page"
    #course_data_1['course_title'] = course_title

    # Extract course description
    course_description = article.text if article.text else "Description not found on the page"
    #course_data_1['course_description'] = course_description
    course_data = []
    course_data.append({'topic': course_title, 'description': course_description})

    return course_data
# Rest of your code...
def fill_variables_from_docx(docx_path, dvar_questions):
    # Read content from DOCX file
    doc = Document(docx_path)
    content = "\n".join([paragraph.text for paragraph in doc.paragraphs])

    # Generate questions and fill variable values
    variable_values = generate_questions(content, dvar_questions)

    return variable_values


def main():
    # Set the values for the topic and description directly in the script
    topic = "Addressing Iran's Crises: Exploring Social Change Methodologies and Creating a Counter Profile"
    description = "Iran's societal challenges are complex and require immediate attention. Engaging in research and working on solutions in this field can help address these issues. This course aims to equip students with the necessary tools and knowledge to navigate these challenges."

    # Load pre-trained model and tokenizer
    model_name = "distilgpt2"  # You can replace this with other models available on Hugging Face
    model = GPT2LMHeadModel.from_pretrained(model_name)
    tokenizer = GPT2Tokenizer.from_pretrained(model_name)

    # Set pad_token to EOS token
    tokenizer.pad_token = tokenizer.eos_token

    # Define your variable questions
    dvar_questions_url = {
        "topic": "What is the main topic or focus of the content?",
         "description": "Can you provide a summary of the content of that internet post?",
     # Add more variables with question templates as needed
    }

    # Combine topic and description into content
    #content = f"Topic: {topic}\nDescription: {description}"

    # Generate questions and fill variable values
    #filled_variables = generate_questions(content, dvar_questions, model, tokenizer)
    #print("Filled Variables:", filled_variables)

    # Extract content from a URL
    course_url = "https://telegra.ph/OpenAIs-Democratic-Rules-and-Light-Triad-Personality-Traits-for-Iran-01-19"
    extracted_content = extract_content_from_url(course_url)
    extracted_content = extracted_content[0]
    content = extracted_content['description'] # f"Topic: {extracted_content['topic']}\nDescription: {extracted_content['description']}"

    summarize_post = sumerizing_post(content)
    extracted_content['description'] = summarize_post # extracted_content[0]  # Accessing the first (and only) dictionary in the list

    #content = f"Topic: {extracted_content['topic']}\nDescription: {extracted_content['description']}"
    content = summarize_post #f"{extracted_content['topic']}\n{extracted_content['description']}"

    print('\n Content is :', content)
    url_content = generate_questions(extracted_content,content, dvar_questions, model, tokenizer, 'gpt3')

    content = f"Topic: {url_content['topic']}\nDescription: {url_content['description']}"
    filled_variables = generate_questions(url_content,content, dvar_questions, model, tokenizer, 'gpt3')

    print("Extracted Content from URL:", filled_variables)

if __name__ == "__main__":
    main()
